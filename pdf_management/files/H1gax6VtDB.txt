Title:
```
Published as a conference paper at ICLR 2020 CONTRASTIVE LEARNING OF STRUCTURED WORLD MODELS
```
Abstract:
```
A structured understanding of our world in terms of objects, relations, and hierar- chies is an important component of human cognition. Learning such a structured world model from raw sensory data remains a challenge. As a step towards this goal, we introduce Contrastively-trained Structured World Models (C-SWMs). C- SWMs utilize a contrastive approach for representation learning in environments with compositional structure. We structure each state embedding as a set of ob- ject representations and their relations, modeled by a graph neural network. This allows objects to be discovered from raw pixel observations without direct super- vision as part of the learning process. We evaluate C-SWMs on compositional environments involving multiple interacting objects that can be manipulated inde- pendently by an agent, simple Atari games, and a multi-object physics simulation. Our experiments demonstrate that C-SWMs can overcome limitations of models based on pixel reconstruction and outperform typical representatives of this model class in highly structured environments, while learning interpretable object-based representations.
```

Figures/Tables Captions:
```
Figure 1: The C-SWM model is composed of the following components: 1) a CNN-based object extractor, 2) an MLP-based object encoder, 3) a GNN-based relational transition model, and 4) an object-factorized contrastive loss. Colored blocks denote abstract states for a particular object.
Figure 2: Example observations from block pushing environments (a-b), Atari 2600 games (c- d) and a 3-body gravitational physics simulation (e). In the grid worlds (a-b), each block can be independently moved into the four cardinal directions unless the target position is occupied by another block or outside of the scene. Best viewed in color.
Figure 3: Discovered object masks (left) and direct visualization of the 2D abstract state spaces and transition graphs for a single object (right) in the block pushing environments. Nodes denote state embeddings obtained from a test set experience buffer with random actions and edges are predicted transitions. The learned abstract state graph clearly captures the underlying grid structure of the environment both in terms of object-specific latent states and in terms of predicted transitions, but is randomly rotated and/or mirrored. The model further correctly captures that certain actions do not have an effect if a neighboring position is blocked by another object (shown as colored spheres), even though the transition model does not have access to visual inputs. (a) Observations from 3-body gravitational physics simulation (bottom) and learned abstract state transition graph for a single object slot (top).
Figure 4: Qualitative results for 3-body physics environment for a single representative test set episode (left) and for a dataset of 50 test episodes (right). The model learns to smoothly embed object trajectories, with the circular motion represented in the latent space (projected from four to two dimensions via PCA). In the abstract state transition graph, orange nodes denote starting states for a particular episode, green links correspond to ground truth transitions and violet links correspond to transitions predicted by the model. One trajectory (in the center) strongly deviates from typical trajectories seen during training, and the model struggles to predict the correct transition.
Table 1: Ranking results for multi-step prediction in latent space. Highest (mean) scores in bold.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Compositional reasoning in terms of objects, relations, and actions is a central ability in human cognition ( Spelke & Kinzler, 2007 ). This ability serves as a core motivation behind a range of recent works that aim at enriching machine learning models with the ability to disentangle scenes into objects, their properties, and relations between them ( Chang et al., 2016 ;  Battaglia et al., 2016 ;  Watters et al., 2017 ;  van Steenkiste et al., 2018 ;  Kipf et al., 2018 ;  Sun et al., 2018 ; 2019b;  Xu et al., 2019 ). These structured neural models greatly facilitate predicting physical dynamics and the consequences of actions, and provide a strong inductive bias for generalization to novel environment situations, allowing models to answer counterfactual questions such as "What would happen if I pushed this block instead of pulling it?". Arriving at a structured description of the world in terms of objects and relations in the first place, however, is a challenging problem. While most methods in this area require some form of human annotation for the extraction of objects or relations, several recent works study the problem of object discovery from visual data in a completely unsupervised or self-supervised manner ( Eslami et al., 2016 ;  Greff et al., 2017 ;  Nash et al., 2017 ;  van Steenkiste et al., 2018 ;  Kosiorek et al., 2018 ;  Jan- ner et al., 2019 ;  Xu et al., 2019 ;  Burgess et al., 2019 ;  Greff et al., 2019 ;  Engelcke et al., 2019 ). These methods follow a generative approach, i.e., they learn to discover object-based representa- tions by performing visual predictions or reconstruction and by optimizing an objective in pixel space. Placing a loss in pixel space requires carefully trading off structural constraints on latent variables vs. accuracy of pixel-based reconstruction. Typical failure modes include ignoring visu- ally small, but relevant features for predicting the future, such as a bullet in an Atari game ( Kaiser et al., 2019 ), or wasting model capacity on visually rich, but otherwise potentially irrelevant features, such as static backgrounds. To avoid such failure modes, we propose to adopt a discriminative approach using contrastive learn- ing, which scores real against fake experiences in the form of state-action-state triples from an Published as a conference paper at ICLR 2020 experience buffer ( Lin, 1992 ), in a similar fashion as typical graph embedding approaches score true facts in the form of entity-relation-entity triples against corrupted triples or fake facts. We introduce Contrastively-trained Structured World Models (C-SWMs), a class of models for learning abstract state representations from observations in an environment. C-SWMs learn a set of abstract state variables, one for each object in a particular observation. Environment transitions are modeled using a graph neural network ( Scarselli et al., 2009 ;  Li et al., 2015 ;  Kipf & Welling, 2016 ;  Gilmer et al., 2017 ;  Battaglia et al., 2018 ) that operates on latent abstract representations. This paper further introduces a novel object-level contrastive loss for unsupervised learning of object-based representations. We arrive at this formulation by adapting methods for learning trans- lational graph embeddings ( Bordes et al., 2013 ;  Wang et al., 2014 ) to our use case. By establishing a connection between contrastive learning of state abstractions ( François-Lavet et al., 2018 ;  Thomas et al., 2018 ) and relational graph embeddings ( Nickel et al., 2016a ), we hope to provide inspiration and guidance for future model improvements in both fields. In a set of experiments, where we use a novel ranking-based evaluation strategy, we demonstrate that C-SWMs learn interpretable object-level state abstractions, accurately learn to predict state transi- tions many steps into the future, demonstrate combinatorial generalization to novel environment configurations and learn to identify objects from scenes without supervision.

Section Title: STRUCTURED WORLD MODELS
  STRUCTURED WORLD MODELS Our goal is to learn an object-oriented abstraction of a particular observation or environment state. In addition, we would like to learn an action-conditioned transition model of the environment that takes object representations and their relations and interactions into account. We start by introducing the general framework for contrastive learning of state abstractions and transition models without object factorization in Sections 2.1-2.2, and in the following describe a variant that utilizes object-factorized state representations, which we term a Structured World Model.

Section Title: STATE ABSTRACTION
  STATE ABSTRACTION We consider an off-policy setting, where we operate solely on a buffer of offline experience, e.g., obtained from an exploration policy. Formally, this experience buffer B = {(s t , a t , s t+1 )} T t=1 con- tains T tuples of states s t ∈ S, actions a t ∈ A, and follow-up states s t+1 ∈ S, which are reached after taking action a t . We do not consider rewards as part of our framework for simplicity. Our goal is to learn abstract or latent representations z t ∈ Z of environment states s t ∈ S that discard any information which is not necessary to predict the abstract representation of the follow- up state z t+1 ∈ Z after taking action a t . Formally, we have an encoder E : S → Z which maps observed states to abstract state representations and a transition model T : Z × A → Z operating solely on abstract state representations.

Section Title: CONTRASTIVE LEARNING
  CONTRASTIVE LEARNING Our starting point is the graph embedding method TransE ( Bordes et al., 2013 ): TransE embeds facts from a knowledge base K = {(e t , r t , o t )} T t=1 , which consists of entity-relation-entity triples (e t , r t , o t ), where e t is the subject entity (analogous to the source state s t in our case), r t is the relation (analogous to the action a t in our experience buffer), and o t is the object entity (analogous to the target state s t+1 ). TransE defines the energy of a triple (e t , r t , o t ) as H = d(F (e t ) + G(r t ), F (o t )), where F (and G) are embedding functions that map discrete entities (and relations) to R D , where D is the dimen- sionality of the embedding space, and d(·, ·) denotes the squared Euclidean distance. Training is carried out with an energy-based hinge loss ( LeCun et al., 2006 ), with negative samples obtained by replacing the entities in a fact with random entities from the knowledge base. We can port TransE to our setting with only minor modifications. As the effect of an action is in general not independent of the source state, we replace G(r t ) with T (z t , a t ), i.e., with the transition Published as a conference paper at ICLR 2020 function, conditioned on both the action and the (embedded) source state via z t = E(s t ). The overall energy of a state-action-state triple then can be defined as follows: H = d(z t + T (z t , a t ), z t+1 ). This additive form of the transition model provides a strong inductive bias for modeling effects of actions in the environment as translations in the abstract state space. Alternatively, one could model effects as linear transformations or rotations in the abstract state space, which motivates the use of a graph embedding method such as RESCAL ( Nickel et al., 2011 ), CompleX ( Trouillon et al., 2016 ), or HolE ( Nickel et al., 2016b ). With the aforementioned modifications, we arrive at the following energy-based hinge loss: defined for a single (s t , a t , s t+1 ) with a corrupted abstract statez t = E(s t ).s t is sampled at random from the experience buffer. The margin γ is a hyperparameter for which we found γ = 1 to be a good choice. Unlike  Bordes et al. (2013) , we place the hinge only on the negative term instead of on the full loss and we do not constrain the norm of the abstract states z t , which we found to work better in our context (see Appendix A.3). The overall loss is to be understood as an expectation of the above over samples from the experience buffer B.

Section Title: OBJECT-ORIENTED STATE FACTORIZATION
  OBJECT-ORIENTED STATE FACTORIZATION Our goal is to take into account the compositional nature of visual scenes, and hence we would like to learn a relational and object-oriented model of the environment that operates on a factored abstract state space Z = Z 1 × . . . × Z K , where K is the number of available object slots. We further assume an object-factorized action space A = A 1 × . . . × A K . This factorization ensures that each object is independently represented and it allows for efficient sharing of model parameters across objects in the transition model. This serves as a strong inductive bias for better generalization to novel scenes and facilitates learning and object discovery. The overall C-SWM model architecture using object-factorized representations is shown in  Figure 1 .

Section Title: Encoder and Object Extractor
  Encoder and Object Extractor We split the encoder into two separate modules: 1) a CNN-based object extractor E ext , and 2) an MLP-based object encoder E enc . The object extractor module is a CNN operating directly on image-based observations from the environment with K feature maps in its last layer. Each feature map m k t = [E ext (s t )] k can be interpreted as an object mask corresponding to one particular object slot, where [. . .] k denotes selection of the k-th feature map. For simplicity, we only assign a single feature map per object slot which sufficed for the experiments considered in this work (see Appendix A.4). To allow for encoding of more complex object features (other than, e.g., position/velocity), the object extractor can be adapted to produce multiple feature maps per object slot. After the object extractor module, we flatten each feature map m k t (object mask) and feed it into the object encoder E enc . The object encoder shares weights across objects and returns an abstract state representation: z k t = E enc (m k t ) with z k t ∈ Z k . We set Z k = R D in the following, where D is a hyperparameter.

Section Title: Relational Transition Model
  Relational Transition Model We implement the transition model as a graph neural network ( Scarselli et al., 2009 ;  Li et al., 2015 ;  Kipf & Welling, 2016 ;  Battaglia et al., 2016 ;  Gilmer et al., 2017 ;  Battaglia et al., 2018 ), which allows us to model pairwise interactions between object states Published as a conference paper at ICLR 2020 while being invariant to the order in which objects are represented. After the encoder stage, we have an abstract state description z k t ∈ Z k and an action a k t ∈ A k for every object in the scene. We repre- sent actions as one-hot vectors (or a vector of zeros if no action is applied to a particular object), but note that other choices are possible, e.g., for continuous action spaces. The transition function then takes as input the tuple of object representations z t = (z 1 t , . . . , z K t ) and actions a t = (a 1 t , . . . , a K t ) at a particular time step: T (z t , a t ) is implemented as a graph neural network (GNN) that takes z k t as input node features. The model predicts updates ∆z t = (∆z 1 t , . . . , ∆z K t ). The object representations for the next time step are obtained via z t+1 = (z 1 t + ∆z 1 t , . . . , z K t + ∆z K t ). The GNN consists of node update functions f node and edge update functions f edge with shared parameters across all nodes and edges. These functions are implemented as MLPs and we choose the following form of message passing updates: e (i,j) t = f edge ([z i t , z j t ]) (3) ∆z j t = f node ([z j t , a j t , i =j e (i,j) t ]) , (4) where e (i,j) t is an intermediate representation of the edge or interaction between nodes i and j. This corresponds to a single round of node-to-edge and edge-to-node message passing. Alternatively, one could apply multiple rounds of message passing, but we did not find this to be necessary for the experiments considered in this work. Note that this update rule corresponds to message passing on a fully-connected scene graph, which is O(K 2 ). This can be reduced to linear complexity by reducing connectivity to nearest neighbors in the abstract state space, which we leave for future work. We denote the output of the transition function for the k-th object as ∆z k t = T k (z t , a t ) in the following.

Section Title: Multi-object Contrastive Loss
  Multi-object Contrastive Loss We only need to change the energy function to take the factoriza- tion of the abstract state space into account, which yields the following energy H for positive triples andH for negative samples: wherez k t is the k-th object representation of the negative state samplez t = E(s t ). The overall contrastive loss for a single state-action-state sample from the experience buffer then takes the form:

Section Title: RELATED WORK
  RELATED WORK For coverage of related work in the area of object discovery with autoencoder-based models, we refer the reader to the Introduction section. We further discuss related work on relational graph embeddings in Section 2.2.

Section Title: Structured Models of Environments
  Structured Models of Environments Recent work on modeling structured environments such as interacting multi-object or multi-agent systems has made great strides in improving predictive accuracy by explicitly taking into account the structured nature of such systems ( Sukhbaatar et al., 2016 ;  Chang et al., 2016 ;  Battaglia et al., 2016 ;  Watters et al., 2017 ;  Hoshen, 2017 ;  Wang et al., 2018 ;  van Steenkiste et al., 2018 ;  Kipf et al., 2018 ;  Sanchez-Gonzalez et al., 2018 ;  Xu et al., 2019 ). These methods generally make use of some form of graph neural network, where node update functions model the dynamics of individual objects, parts or agents and edge update functions model their interactions and relations. Several recent works succeed in learning such structured models directly from pixels ( Watters et al., 2017 ;  van Steenkiste et al., 2018 ;  Xu et al., 2019 ;  Watters et al., 2019 ), but in contrast to our work rely on pixel-based loss functions. The latest example in this line of research is the COBRA model ( Watters et al., 2019 ), which learns an action-conditioned transition policy on object representations obtained from an unsupervised object discovery model ( Burgess et al., 2019 ). Unlike C-SWM, COBRA does not model interactions between object slots and relies on a pixel-based loss for training. Our object encoder, however, is more limited and utilizing an iterative object encoding process such as in MONet ( Burgess et al., 2019 ) would be interesting for future work.

Section Title: Contrastive Learning
  Contrastive Learning Contrastive learning methods are widely used in the field of graph rep- resentation learning ( Bordes et al., 2013 ;  Perozzi et al., 2014 ;  Grover & Leskovec, 2016 ;  Bordes et al., 2013 ;  Schlichtkrull et al., 2018 ;  Veličković et al., 2018 ), and for learning word representations ( Mnih & Teh, 2012 ;  Mikolov et al., 2013 ). The main idea is to construct pairs of related data exam- ples (positive examples, e.g., connected by an edge in a graph or co-occuring words in a sentence) and pairs of unrelated or corrupted data examples (negative examples), and use a loss function that scores positive and negative pairs in a different way. Most energy-based losses ( LeCun et al., 2006 ) are suitable for this task. Recent works ( Oord et al., 2018 ;  Hjelm et al., 2018 ;  Hénaff et al., 2019 ;  Sun et al., 2019a ;  Anand et al., 2019 ) connect objectives of this kind to the principle of learning representations by maximizing mutual information between data and learned representations, and successfully apply these methods to image, speech, and video data.

Section Title: State Representation Learning
  State Representation Learning State representation learning in environments similar to ours is often approached by models based on autoencoders (Corneil et al., 2018;  Watter et al., 2015 ;  Ha & Schmidhuber, 2018 ;  Hafner et al., 2019 ;  Laversanne-Finot et al., 2018 ) or via adversarial learning ( Kurutach et al., 2018 ;  Wang et al., 2019 ). Some recent methods learn state representations without requiring a decoder back into pixel space. Examples include the selectivity objective in  Thomas et al. (2018) , the contrastive objective in  François-Lavet et al. (2018) , the mutual information objective in  Anand et al. (2019) , the distribution matching objective in  Gelada et al. (2019)  or using causality- based losses and physical priors in latent space ( Jonschkowski & Brock, 2015 ;  Ehrhardt et al., 2018 ). Most notably,  Ehrhardt et al. (2018)  propose a method to learn an object detection module and a physics module jointly from raw video data without pixel-based losses. This approach, however, can only track a single object at a time and requires careful balancing of multiple loss functions.

Section Title: EXPERIMENTS
  EXPERIMENTS Our goal of this experimental section is to verify whether C-SWMs can 1) learn to discover object representations from environment interactions without supervision, 2) learn an accurate transition model in latent space, and 3) generalize to novel, unseen scenes. Our implementation is available under https://github.com/tkipf/c-swm.

Section Title: ENVIRONMENTS
  ENVIRONMENTS We evaluate C-SWMs on two novel grid world environments (2D shapes and 3D blocks) involving multiple interacting objects that can be manipulated independently by an agent, two Atari 2600 games (Atari Pong and Space Invaders), and a multi-object physics simulation (3-body physics). See  Figure 2  for example observations. For all environments, we use a random policy to collect experience for both training and evaluation. Observations are provided as 50 × 50 × 3 color images for the grid world environments and as 50 × 50×6 tensors (two concatenated consecutive frames) for the Atari and 3-body physics environments. Additional details on environments and dataset creation can be found in Appendix B.

Section Title: EVALUATION METRICS
  EVALUATION METRICS In order to evaluate model performance directly in latent space, we make use of ranking metrics, which are commonly used for the evaluation of link prediction models, as in, e.g.,  Bordes et al. (2013) . This allows us to assess the quality of learned representations directly without relying on auxiliary metrics such as pixel-based reconstruction losses, or performance in downstream tasks such as planning. Given an observation encoded by the model and an action, we use the model to predict the rep- resentation of the next state, reached after taking the action in the environment. This predicted state representation is then compared to the encoded true observation after taking the action in the environment and a set of reference states (observations encoded by the model) obtained from the experience buffer. We measure and report both Hits at Rank 1 (H@1) and Mean Reciprocal Rank (MRR). Additional details on these evaluation metrics can be found in Appendix C.

Section Title: BASELINES
  BASELINES

Section Title: Autoencoder-based World Models
  Autoencoder-based World Models The predominant method for state representation learning is based on autoencoders, and often on the VAE ( Kingma & Welling, 2013 ;  Rezende et al., 2014 ) model in particular. This World Model baseline is inspired by  Ha & Schmidhuber (2018)  and uses either a deterministic autoencoder (AE) or a VAE to learn state representations. Finally, an MLP is used to predict the next state after taking an action.

Section Title: Physics As Inverse Graphics (PAIG)
  Physics As Inverse Graphics (PAIG) This model by  Jaques et al. (2019)  is based on an encoder- decoder architecture and trained with pixel-based reconstruction losses, but uses a differentiable physics engine in the latent space that operates on explicit position and velocity representations for each object. Thus, this model is only applicable to the 3-body physics environment.

Section Title: TRAINING AND EVALUATION SETTING
  TRAINING AND EVALUATION SETTING We train C-SWMs on an experience buffer obtained by running a random policy on the respective environment. We choose 1000 episodes with 100 environment steps each for the grid world envi- ronments, 1000 episodes with 10 steps each for the Atari environments and 5000 episodes with 10 steps each for the 3-body physics environment. For evaluation, we populate a separate experience buffer with 10 environment steps per episode and a total of 10.000 episodes for the grid world environments, 100 episodes for the Atari environments and 1000 episodes for the physics environment. For the Atari environments, we minimize train/test overlap by 'warm-starting' experience collection in these environments with random actions before we start populating the experience buffer (see Appendix B), and we ensure that not a single full test set episode coincides exactly with an episode from the training set. The state spaces of the grid world environments are large (approx. 6.4M unique states) and hence train/test coincidence of a full 10-step episode is unlikely. Overlap is similarly unlikely for the physics environment which has a continuous state space. Hence, performing well on these tasks will require some form of generalization to new environment configurations or an unseen sequence of states and actions. All models are trained for 100 epochs (200 for Atari games) using the Adam ( Kingma & Ba, 2014 ) optimizer with a learning rate of 5 · 10 −4 and a batch size of 1024 (512 for baselines with decoders due to higher memory demands, and 100 for PAIG as suggested by the authors). Model architecture details are provided in Appendix D.

Section Title: QUALITATIVE RESULTS
  QUALITATIVE RESULTS We present qualitative results for the grid world environments in  Figure 3  and for the 3-body physics environment in  Figure 4 . All results are obtained on hold-out test data. Further qualitative results (incl. on Atari games) can be found in Appendix A. In the grid world environments, we can observe that C-SWM reliably discovers object-specific fil- ters for a particular scene, without direct supervision. Further, each object is represented by two coordinates which correspond (up to a random linear transformation) to the true object position in Published as a conference paper at ICLR 2020 (a) Discovered object masks in a scene from the 3D cubes (top) and 2D shapes (bottom) environments. (b) Learned abstract state transition graph of the yel- low cube (left) and the green square (right), while keeping all other object positions fixed at test time. the scene. Although we choose a two-dimensional latent representation per object for easier vi- sualization, we find that results remain unchanged if we increase the dimensionality of the latent representation. The edges in this learned abstract transition graph correspond to the effect of a par- ticular action applied to the object. The structure of the learned latent representation accurately captures the underlying grid structure of the environment. We further find that the transition model, which only has access to latent representations, correctly captures whether an action has an effect or not, e.g., if a neighboring position is blocked by another object. Similarly, we find that the model can learn object-specific encoders in the 3-body physics envi- ronment and can learn object-specific latent representations that track location and velocity of a particular object, while learning an accurate latent transition model that generalizes well to unseen environment instances.

Section Title: QUANTITATIVE RESULTS
  QUANTITATIVE RESULTS We set up quantitative experiments for evaluating the quality of both object discovery and the quality of the learned transition model. We compare against autoencoder baselines and model variants that do not represent the environment in an object-factorized manner, do not use a GNN, or do not make use of contrastive learning. Performing well under this evaluation setting requires some degree of (combinatorial) generalization to unseen environment instances.

Section Title: Published as a conference paper at ICLR 2020
  Published as a conference paper at ICLR 2020 We report ranking scores (in %) in latent space, after encoding source and target observations, and taking steps in the latent space using the learned model. Reported results are mean and standard error of scores over 4 runs on hold-out environment instances. Results are summarized in  Table 1 . We find that baselines that make use of reconstruction losses in pixel space (incl. the C-SWM model variant without contrastive loss) typically generalize less well to unseen scenes and learn a latent space configuration that makes it difficult for the transition model to learn the correct transition function. See Appendix A.1 for a visual analysis of such latent state transition graphs. This effect appears to be even stronger when using a VAE-based World Model, where the prior puts further constraints on the latent representations. C-SWM recovers this structure well, see  Figure 3 . On the grid-world environments (2D shapes and 3D blocks), C-SWM models latent transitions al- most perfectly, which requires taking interactions between latent representations of objects into account. Removing the interaction component, i.e., replacing the latent GNN with an object-wise MLP, makes the model insensitive to pairwise interactions and hence the ability to predict future states deteriorates. Similarly, if we remove the state factorization, the model has difficulties general- izing to unseen environment configurations. We further explore variants of the grid-world environ- ments in Appendix A.5, where 1) certain actions have no effect, and 2) one object moves randomly and independent of agent actions, to test the robustness of our approach. For the Atari 2600 experiments, we find that results can have a high variance, and that the task is more difficult, as both the World Model baseline and C-SWM struggle to make perfect long- term predictions. While for Space Invaders, a large number of object slots (K = 5) appears to be beneficial, C-SWM achieves best results with only a single object slot in Atari Pong. This suggests that one should determine the optimal value of K based on performance on a validation set if it is not known a-priori. Using an iterative object encoding mechanism, such as in MONet ( Burgess et al., 2019 ), would enable the model to assign 'empty' slots which could improve robustness w.r.t. the choice of K, which we leave for future work.

Section Title: Published as a conference paper at ICLR 2020
  Published as a conference paper at ICLR 2020 We find that both C-SWMs and the autoencoder-based World Model baseline excel at short-term predictions in the 3-body physics environment, with C-SWM having a slight edge in the 10 step pre- diction setting. Under our evaluation setting, the PAIG baseline ( Jaques et al., 2019 ) underperforms using the hyperparameter setting recommended by the authors. Note that we do not tune hyperpa- rameters of C-SWM separately for this task and use the same settings as in other environments.

Section Title: LIMITATIONS
  LIMITATIONS

Section Title: Instance Disambiguation
  Instance Disambiguation In our experiments, we chose a simple feed-forward CNN architecture for the object extractor module. This type of architecture cannot disambiguate multiple instances of the same object present in one scene and relies on distinct visual features or labels (e.g., the green square) for object extraction. To better handle scenes which contain potentially multiple copies of the same object (e.g., in the Atari Space Invaders game), one would require some form of iterative disambiguation procedure to break symmetries and dynamically bind individual objects to slots or object files ( Kahneman & Treisman, 1984 ;  Kahneman et al., 1992 ), such as in the style of dynamic routing ( Sabour et al., 2017 ), iterative inference ( Greff et al., 2019 ;  Engelcke et al., 2019 ) or sequential masking ( Burgess et al., 2019 ;  Kipf et al., 2019 ).

Section Title: Stochasticity & Markov Assumption
  Stochasticity & Markov Assumption Our formulation of C-SWMs does not take into account stochasticity in environment transitions or observations, and hence is limited to fully deterministic worlds. A probabilistic extension of C-SWMs is an interesting avenue for future work. For sim- plicity, we make the Markov assumption: state and action contain all the information necessary to predict the next state. This allows us to look at single state-action-state triples in isolation. To go beyond this limitation, one would require some form of memory mechanism, such as an RNN as part of the model architecture, which we leave for future work.

Section Title: CONCLUSIONS
  CONCLUSIONS Structured world models offer compelling advantages over pure connectionist methods, by enabling stronger inductive biases for generalization, without necessarily constraining the generality of the model: for example, the contrastively trained model on the 3-body physics environment is free to store identical representations in each object slot and ignore pairwise interactions, i.e., an unstruc- tured world model still exists as a special case. Experimentally, we find that C-SWMs make effective use of this additional structure, likely because it allows for a transition model of significantly lower complexity, and learn object-oriented models that generalize better to unseen situations. We are excited about the prospect of using C-SWMs for model-based planning and reinforcement learning in future work, where object-oriented representations will likely allow for more accurate counterfactual reasoning about effects of actions and novel interactions in the environment. We further hope to inspire future work to think beyond autoencoder-based approaches for object-based, structured representation learning, and to address some of the limitations outlined in this paper.

```
