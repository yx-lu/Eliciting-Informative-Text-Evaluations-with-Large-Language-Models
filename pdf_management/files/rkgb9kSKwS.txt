Title:
```
Under review as a conference paper at ICLR 2020 A SPECTRAL NONLOCAL BLOCK FOR NEURAL NET- WORKS
```
Abstract:
```
The nonlocal network is designed for capturing long-range spatial-temporal de- pendencies in several computer vision tasks. Although having shown excellent performances, it needs an elaborate preparation for both the number and position of the building blocks. In this paper, we propose a new formulation of the non- local block and interpret it from the general graph signal processing perspective, where we view it as a fully-connected graph filter approximated by Chebyshev polynomials. The proposed nonlocal block is more efficient and robust, which is a generalized form of existing nonlocal blocks (e.g. nonlocal block, nonlocal stage). Moreover, we give the stable hypothesis and show that the steady-state of the deeper nonlocal structure should meet with it. Based on the stable hypothesis, a full-order approximation of the nonlocal block is derived for consecutive con- nections. Experimental results illustrate the clear-cut improvement and practical applicability of the generalized nonlocal block on both image and video classifi- cation tasks.
```

Figures/Tables Captions:
```
Figure 1: The comparison between the nonlocal operator (NL), nonlocal stage operator (NS) and ours spectral nonlocal operator (SNL). Our SNL has more widely attention range as shown in the two red boxes benefited from the composition of the self-attention term and the self-preserving term which is taken effect by the W 1 and W 2 . Our SNL degrades into the NL when W 1 = 0 and NS operator when W 1 = −W 2 = W.
Figure 2: The histogram of the strength statistics of the affinity matrix A where the abscissa is the range of the strength and the ordinates is the number of the elements in A in these ranges. We can see that the histogram of A k is nearly the same.
Figure 3: The implementation of the generalized Spectral Nonlocal Block, which added the self- preserving part (green map) and the full-order approximation part (red map) than the NL block.
Figure 4: The Feature maps of Nonlocal-based Network. Our SNL block has better results for the crucial part of the birds as shown in the highlighted boxes.
Figure 5: The eigenvalue of the the nonlocal weight matrix trained on the CIFAR100 dataset
Table 1: Summary of different types nonlocal block used in the experiments. Our proposed two models have less constraints and are more flexible compared with others.
Table 2: Experiments for transferred chan- nels on CIFAR100 Dataset
Table 3: Experiments for different positions on CIFAR100 Dataset
Table 4: Experiments for different numbers on CIFAR100 Dataset
Table 5: The Results on Cifar10
Table 6: The Results on Cifar100
Table 7: The Results on Cifar100
Table 8: The Results on UCF101
Table 9: The Results on CUB
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Capturing the long-range spatial-temporal dependencies is crucial for the Deep Convolutional Neu- ral Networks (CNNs) to extract discriminate features in vision tasks such as image and video clas- sification. However, the traditional convolution operator only focuses on processing local neighbor- hood at a time. This makes the CNNs need to go deeper with convolutional operations to enlarge the receptive fields, which lead to higher computation and memory. Moreover, going deeper cannot always increase the effective receptive fields due to the Gaussian distribution of the kernel weight (Luo et al. (2016)). To eliminate this limitation, some recent works focus on designing the network architecture with wider and well-designed modules to catch the long-range dependencies such as (Peng et al. (2017), Chen et al. (2017), Zhao et al. (2017)). Although having larger receptive fields, these modules still need to be applied recursively to catch the dependencies of the pairs in large distances. Inspired by the classical non-local means method in image denoising, Wang et al. (2018) proposes the nonlocal neural network which uses the nonlocal (NL) block to concern the "full-range" de- pendencies in only one module by exploring the correlations between each position and all other positions. In the NL block, the affinity matrix is first computed to represent the correlations between each position pair. Then the weight means of features are calculated based on the affinity matrix to refine the feature representation. Finally, the residual connection is added to the refined feature map. Due to its simplicity and effectiveness, the nonlocal block has been widely used in image and video classification (Wang et al. (2018); Yue et al. (2018); Tao et al. (2018); Chen et al. (2018)), image segmentation (Huang et al. (2018); Yue et al. (2018); Wang et al. (2018)) and person re-identification (Liao et al. (2018); Zhang et al. (2019)) recently. However, due to the complexity of the affinity matrix, the nonlocal block 1 needs much more com- putational effort and is sensitive to its number and position in the neural network (Tao et al. (2018)). Some works solve the first problem by simplifying the calculation of the affinity matrix such as Huang et al. (2018), He et al. (2019), Yue et al. (2018), Chen et al. (2018). Only a few works try to solve the second problem which limits the robustness of the nonlocal network 2 . Tao et al. (2018) Under review as a conference paper at ICLR 2020 proposes the nonlocal stage (NS) block which concerns the diffusion nature and maintains the same affinity matrix for all the nonlocal units in the NS block. Comparing with the NL block, the NS block is insensitive to the numbers and allows deeper nonlocal structure. However, the deeper nonlocal structure of NS block increases the complexity and do not have a remarkable improvement. In this work, we focus on elaborating a robust nonlocal block which is more flexible when using in the neural network. We prove that the nonlocal operator in the nonlocal block is equivalent to the Chebyshev-approximated fully-connected graph filter with irrational constraints that limits its liberty for learning. To remove these irrational constraints, we propose the Spectral-based Nonlocal (SNL) block which is more robust and can degrade into the NL and NS with specific assumptions. We also prove that the deeper nonlocal structure satisfies the stable hypothesis with the help of steady- state analysis. Based on this hypothesis, we give the full-order approximated spectral nonlocal (gSNL) block which is well-performed for deeper nonlocal structure. Finally, we add our proposed nonlocal blocks into the deep network and evaluate them on the image and video classification tasks. Experiments show that the networks with our proposed blocks are more robust and have a higher accuracy than using other types of nonlocal blocks. To summarize, our contributions are threefold: • We propose a spectral nonlocal (SNL) block as an efficient, simple, and generic component for capturing long-range spatial-temporal dependencies with deep neural networks, which is a generalization of the classical nonlocal blocks. • We propose the stable hypothesis, which can enable the deeper nonlocal structure without an elaborate preparation for both the number and position of the building blocks. We further extend SNL into generalized SNL (gSNL), which can enable multiple nonlocal blocks to be plugged into the existing computer vision architectures with stable learning dynamics. • Both SNL and gSNL have outperformed other nonlocal blocks across both image and video classification tasks with a clear-cut improvement.

Section Title: PRELIMINARY
  PRELIMINARY Nonlocal block The NL block consist of NL operator with residual connection and is expressed as: Y = X + F(A, Z) with Z = XW g , (1) where X ∈ R N ×C1 is the input feature map, F(A, Z) is the NL operator, Z ∈ R N ×Cs is the transferred feature map that compresses the channels of X ∈ R N ×C1 by a linear transformation with kernel W g ∈ R C1×Cs . Here N is the number of positions. The affinity matrix A ∈ R N ×N is composed by pairwise correlations between pixels. In the NL block, the NL operator explores the "full-range" dependencies by concerning the relation- ships between all the position pairs: F(A, Z) = AZW with A = (a ij ) N ×N , A ij = f (X i,: , X j,: ), (2) where W ∈ R Cs×C1 is the weight matrix of a linear transformation. f (·) is the affinity kernel which can adopt the "Dot Product", "Traditional Gasuassian", "Embedded Gasussian" or other kernel ma- trix with a finite Frobenius norm.

Section Title: Nonlocal stage
  Nonlocal stage To make the NL operator follow the diffusion nature that allows deeper nonlocal structure (Tao et al. (2018)), the nonlocal stage (NS) operator uses the graph laplacian L = D A − A to replace the affinity matrix A in the NL operator: F(A, Z) = (A − D A )ZW with D A = diag(d i ), (3) whereF(A, Z) is the NS operator. d i = j a ij is the degree of node i. Moreover, when adding multiple blocks with the same affinity matrix A and replacing the NL operator by the NS operator, these consecutively-connected blocks become the NS block. We called these nonlocal blocks in the NS block as the NS units.

Section Title: METHOD
  METHOD The nonlocal operator can be divided into two steps: calculating the affinity matrix A to repre- sent the correlations between each position pairs and refining the feature map by calculating the Under review as a conference paper at ICLR 2020 weighted means based on A. In this section, a fully-connected graph filter is utilized for explaining the nonlocal operator. With the Chebyshev approximation, we propose the SNL operator which is proved to be a generalized form of NL and NS operator and is more robust with higher performance in computer vision tasks. Furthermore, based on the stable hypothesis that deeper nonlocal struc- ture tends to learn a stable affinity matrix, we extend our SNL operator into a full-order Chebyshev approximation version, i.e. the gSNL.

Section Title: THE PROPOSED SPECTRAL NONLOCAL OPERATOR
  THE PROPOSED SPECTRAL NONLOCAL OPERATOR Nonlocal operator in the graph view The nonlocal operator F(A, Z) is a filter that computes a weighted mean of all the positions in the feature map Z based on the affinity matrix A and then conduct the feature transformation with the kernel W. This is the same as filtering the signal Z by a graph filter Ω in the graph domain defined by the affinity matrix A (Shuman et al. (2013)). Based on this perspective (Shuman et al. (2013)), we further define the nonlocal operator as: Theorem 1. Given an affinity matrix A ∈ R N ×N and the signal Z ∈ R N ×Cs , the nonlocal operator is the same as filtering the signal Z in the graph domain of a fully-connected weighted graph G: where the graph filter Ω ∈ R N ×N is a diagonal parameter matrix, i.e. Ω = diag(ω), ω = (ω 1 , ω 2 , ..., ω n ). G = (V, A) is a fully-connected graph with the vertex set V and affinity matrix A. Λ = diag({λ 1 , λ 2 , ..., λ i , ..., λ N }) and U = {u 1 , u 2 , ..., u i , ..., u N } are the eigenvectors and eigenvalues of the graph laplacian L. This definition requires that the graph laplacian L has non-singular eigenvalue and eigenvector, so the affinity matrix A should be a symmetric, non-negative, row-normalized matrix. To meet this requirement, the affinity matrix A can be obtained by the following steps. First, the affinity kernel is used to calculate the matrix A (we use the dot product with embeded weight matrix W φ ∈ R C1×Cs and W ϕ ∈ R C1×Cs as the affinity kernel, i.e. A = (XW φ )(XW ϕ )). Then we make the matrix A symmetric:Ā = A T +A 2 . We normalize the row ofĀ to make it satisfy d i = 1 and havingǍ = D −1 AĀ . For the simplicity, in the following sections the symmetric, non-negative, row-normalized matrixǍ is denoted as A. The proposed spectral nonlocal operator The graph filter Ω in Eq. (4) contains N parameters. To simplify it, we use the Chebyshev polynomials which can reduce the N parameters into k (k N ). For simplicity, we firstly assume that the input Z, the output F(A, Z) and the output F(A, Z) have only one channel. Following the similar method as Defferrard et al. (2016), the k st -order Chebyshev polynomials is used to approximate the graph filter function g θ (Λ): Due to L is a random walk laplacican, the maximum eiginvalue λ max satisfies λ max = 2 which makes L = A (Shuman et al. (2013)). Then Eq. (5) becomes: If k = 1, the first-order Chebyshev approximation of Eq. (6) becomes: F(A, Z) = θ 0 Z + θ 1 AZ, (7) where θ 0 and θ 1 are the coefficients for the first and second term which are approximated by learning with SGD. Then, extending Eq. (7) into multi-channel conditions, we can get the formation of our SNL operator: Under review as a conference paper at ICLR 2020 where F s (A, Z) is the SNL operator, W 1 ∈ R Cs×C1 , W 2 ∈ R Cs×C1 . Finally, a residual connec- tion is added with the SNL operator to form the SNL block:

Section Title: Relation with other nonlocal operators
  Relation with other nonlocal operators As shown in  fig. 1 , our SNL operator can degrade into the NL operator by setting W 1 = 0, i.e. θ 0 = 0. However, its analytic solution: θ 0 = 2 N N j=0 ω j controls the total filtering intensity, which cannot be guaranteed to be 0. This setting will limit the search space when training the network and reduce the robustness of the NL block. The NL operator cannot magnify features of a large range and damp some discriminative features such as the beak of the waterfowl. Our SNL operator can also degrade into the NS operator by setting W 1 = −W 2 , i.e. θ 1 + θ 0 = 0. However, the analytic solution of this equation is When setting it to zero, the filter strength of the high-frequency signal (with high λ) such as the small part or twig is suppressed. Thus, it still cannot magnify the discriminative part such as the beak of the waterfowl as shown in  fig. 1 . Comparing with NL and NS, our SNL does not have these irrational constraints and give these two parameters a liberal learning space. Thus, θ 0 can control the preserve strength of the discriminative features, while θ 1 can pay more attention to the low-frequency signal to diminish the noise.

Section Title: THE PROPOSED GENERALIZED SPECTRAL NONLOCAL OPERATOR
  THE PROPOSED GENERALIZED SPECTRAL NONLOCAL OPERATOR To fully exploit the "full-range" dependencies, the nonlocal block should have the ability to be consecutively stacked into the network to form a deeper nonlocal structure. However, some types of nonlocal blocks such as the NL and CGNL block cannot achieve this purpose (Tao et al. (2018)). To show the robustness of our SNL block when used in the deeper nonlocal structure, we firstly study the steady-state of deeper nonlocal structure when consecutively adding our SNL block. We also prove the stable hypothesis that the deeper nonlocal structure tends to learn a stable affinity. Based on this hypothesis, we can extend our SNL block into a full-order Chebyshev approximation, i.e. the gSNL block which is more applicable for deeper nonlocal structure.

Section Title: The stable hypothesis
  The stable hypothesis The Steady-state analysis can be used to analyze the stable dynamics of the nonlocal block. Here we give the steady-state analysis of our SNL block when consecutively adds into the network structure and get the Stable Hypothesis: Lemma 1. The Stable Hypothesis: when adding more than two consecutively-connected SNL blocks with the same affinity matrix A into the network structure, these SNL blocks are stable when the variable affinity matrix A satisfies: A k = A. Proof. The stability holds when the weight parameters in W 1 , W 2 and W are small enough such that the CFL condition is satisfied (Tao et al. (2018)). So we ignore them for simplicity. The discrete nonlinear operator of our SNL have a similar formulation as the NS operator: L h Z N := −LZ, where h is the discretization parameter. Z N is the input of the N th block in the deeper nonlocal structure with Z 0 = X. The stable assumption demands that Z N +1 = Z N , so the steady-state equation of the last SNL block can be written as: The deeper nonlocal structure has more than one SNL blocks. So the Z N −1 and L h Z N −1 can be used to express Z N : Finally, the steady-state equation becomes: This equation can naturally extend to the k-hop affinity matrix A k , i.e. A k = A. To verify the stable hypothesis, we add five consecutively-connected SNL blocks (and NS blocks) into the PreResnet56 He et al. (2016) and train this model on the train set of the CIFAR100 dataset with the initial learning rate 0.1 which is subsequently divided by 10 at 150 and 250 epochs (total 300 epochs). A weight decay 1e − 4 and momentum 0.9 are also used. Then we test the trained model on the test set and output the affinity matrix of each image.  Figure. 2  shows the statistics that reflects the strength of the affinity matrix, 2-hop, 3-hop, and 4-hop affinity matrix: A, A 2 , A 3 , A 4 . We can see that the number of elements in each histogram bin are nearly the same. This means that Under review as a conference paper at ICLR 2020 the A, A 2 , A 3 , A 4 have similar distribution of all the elements in k-hop affinity matrixes, which also empirically verifies the stable-state equation: A k = A. Full-order spectral nonlocal operator With the stable hypothesis, the Chebyshev polynomials can be simplified into a piece-wise function (details in Appendix B). Taking this piece-wise function into the Eq. 7, we can get the full-order approximation of the SNL operator: F * s (A, Z) = k θ k T k (A)Z = Zθ 1 + AZθ 2 + (2A − I)Zθ 3 , (10) whereθ 1 = k%4=0 i1 θ i1 ,θ 2 = k%4=1||k%4=2 i2 θ i1 ,θ 3 = k%4=3 i1 θ i1 , whose upper bound is less than 1. Then, extending it into multi-channel input and output with the residual connection, we can get our gSNL block: The gSNL block is well-performed when the stable affinity hypothesis is satisfied, i.e. adding more than two nonlocal blocks with the same affinity matrix as shown in  Table. 4 .

Section Title: IMPLEMENTATION DETAILS
  IMPLEMENTATION DETAILS The implementation details of the gSNL block is shown in  fig. 3 . The input feature map X ∈ R W ×H×C1 is first fed into three 1x1 convolutions with the weight kernel: W φ ∈ R C1×Cs , W ϕ ∈ R C1×Cs , W g ∈ R C1×Cs to subtract the number of channel. One of the output Z ∈ R W ×H×Cs is used as the transferred feature map to reduce the calculation complexity, while the other two output Φ ∈ R W ×H×Cs , Ψ ∈ R W ×H×Cs are used to get the affinity matrix A. The sub-channel C s are usually two times less than the input channel C 1 . The affinity matrix is calculated by the affinity kernel function f (·) and then use the operation in Sec3.1 to make it non-negative, symmetric and normalized. Finally, with the affinity matrix A and the transferred feature map Z, the output of the nonlocal block can be obtained by the equation Eq. (11). Specifically, the three weight matrixes W 1 ∈ R Cs×C1 , W 2 ∈ R Cs×C1 , W 3 ∈ R Cs×C1 are implemented as three 1x1 convolutions.

Section Title: EXPERIMENT
  EXPERIMENT

Section Title: SETTING
  SETTING

Section Title: Datasets
  Datasets Our proposed SNL and gSNL blocks have been evaluated across several computer vision tasks, including image classification and video-based action recognition. For the image classifica- tion, both CIFAR-10 and CIFAR-100 datasets (Krizhevsky & Hinton (2009)) are tested. The CIFAR- 10 dataset contains 60, 000 images of 10 classes, and CIFAR-100 dataset contains 60, 000 images of 100 classes. For these two datasets, we use 50, 000 images as the train set and 10, 000 images as Under review as a conference paper at ICLR 2020 the test set. We also generate experiments for the fine-grained classification on the Birds-200-2011 (CUB-200) dataset (Welinder et al. (2010)) which contains 11, 788 images of 200 bird categories. For the action recognition, the experiments are conducted on the UCF-101 dataset (Soomro et al. (2012)), which contains 101 different actions.

Section Title: Backbones
  Backbones For the image classification, the ResNet-50 and the PreResNet variations (including both PreResNet-20 and PreResNet-56) are used as the backbone networks. For the video classification task, we follow the I3D structure (Hara et al. (2018)) which uses k × k × k kernels to replace the convolution operator in the residual block.

Section Title: Setting for the network
  Setting for the network In the main experiments, we set C s = C 1 /2. Without loss of the generality, we use the "Dot Product" as the affinity kernel in the experiments. We add one SNL (or gSNL) block into these backbone networks to construct the SNL (or gSNL) network. For the ResNet and the I3D (Hara et al. (2018)), following Wang et al. (2018) we add the SNL block right before the last residual block of res 4 . For the PreResNet series, we add the SNL block right after the second residual block in res 1 . For the other nonlocal-base block including the NL (Wang et al. (2018)), the NS (Tao et al. (2018)), the Compact Generalized Nonlocal Block (CGNL) (Yue et al. (2018)) and the Double Attention Block (A2), the settings are all the same as ours. The difference of these blocks are shown in  Table. 1 , in which the Approximated Condition shows the strategy for the Chebyshev approximation and Channel-wise reflect the consideration of the channel relations.

Section Title: Setting for the training
  Setting for the training For the image classification on CIFAR-10 dataset and CIFAR-100 dataset, we train the models end-to-end without using pretrained model. The initial learning rate 0.1 is used for these two datasets with the weight decay 1e − 4 and momentum 0.9. The learning rate is divided by 10 at 150 and 250 epochs. The models are trained for total 300 epochs. For the fine-grained classification on CUB-200 dataset, we use the models pretrained on ImageNet (Russakovsky et al. (2015)) to initialize the weights. We train the models for total 200 epochs with the initial learning rate 0.1 which is subsequently divided by 10 at 31, 61, 81 epochs. The weight decay and momentum are the same as the setting of CIFAR-10 and CIFAR-100. For the video classification on the UCF-101 dataset, the weights are initialized by the pretrained I3D model on Kinetics dataset (Kay et al. (2017)). We train the models with the initial learning rate 0.1 which is subsequently divided by 10 each 40 epochs. The training stops at the 100 epochs. The weight decay and momentum are the same as the setting of CIFAR-10 and CIFAR-100. The number of channels in transferred feature space The nonlocal-based block firstly reduces the channels of original feature map C 1 into the transferred feature space C s by the 1×1 convolution to reduce the computation complexity. When C s is too large, the feature map will contain redundant information which introduces the noise when calculating the affinity matrix A. However, if C s is too small, it is hard to reconstruct the output feature map due to inadequate features. To test the robustness for the number of the C s , we generate three types of models with different number of the transferred channels with the setting: "Sub 1" (C s = C 1 ), "Sub 2" (C s = C1 2 ), "Sub 4" (C s = C1 4 ) as shown in  Table. 2 . Other parameters of the models and the training steps are the same as the setting in Sec.4.1.  Table. 2  shows the experimental results of the three types of models with different nonlocal blocks. Our SNL and gSNL blocks outperforms other models profited by their flexible for learning. Moreover, from  Table. 2 , we can see that the performances of the CGNL steeply drops when the number of the transferred channels increases. This is because the CGNL block concerns Under review as a conference paper at ICLR 2020 the relationship between channels, when the number of the sub-channel increases, the relationship between the redundant channels seriously interferes its effects. Overall, our proposed nonlocal block is the most robust for the large number of transferred channels (our model rise 1.1% in Top1 while the best of others only rise 0.4% compared to the baseline). The stage for adding the nonlocal blocks The nonlocal-based blocks can be added into the different stages of the preResNet (or the ResNet) to form the Nonlocal Net. In Tao et al. (2018), the nonlocal- based blocks are added into the early stage of the preResNet to catch the long-range correlations. Here we experiment the performance of adding different types of nonlocal blocks into the three stages (the first, the second and the third stage of the preResNet) and train the models on CIFAR100 dataset with the same setting discussed in Sec.5.2. The experimental results are shown in  Table. 3 . We can see that the performances of the NL block is lower than the backbones when adding into the early stage. However, our proposed SNL block has 0.81% improvement compared with the backbone when respectively adding into all the three stages, which is much higher than the other type nonlocal blocks (only 0.42% for the best case).

Section Title: Under review as a conference paper at ICLR 2020
  Under review as a conference paper at ICLR 2020 To intuitively show the stability and robustness of our SNL, we give the spectrum analysis for the estimated weight matrices (Tao et al. (2018)). We extract the self-attention weight matrix: W g , W of the NL block and the NS block, W g , W 2 of our proposed SNL block. The dimension of the weight matrix satisfies: W g ∈ R C1×Cs , W ∈ R Cs×C1 W 2 ∈ R Cs×C1 . To make all the eigenvalues real, we let: W = (WgW)+(WgW) T 2 . We do the same to the W 2 .  Figure. 5  shows the top thirty- two eigenvalues of the weight matrix of W on the models in  Table. 3 . We can see that the density of the negative eigenvalues is higher than the positive eigenvalues of the NL block when adding into all three stages. This phenomenon makes the NL operator F(A, Z) in Eq. (1) less than zero. So the output feature map is less than the input feature map, i.e. Y < X (more detail of this phenomenon can be seen in Tao et al. (2018)). The NS block can avoid "the damping effect" to some extent by concerning the diffusion nature. However, when adding into the early stage, only six eigenvalues of the nonlocal stage are not equal to zero. This phenomenon makes the nonlocal stage cannot effectively magnify the discriminated feature. Comparing with these two models, our proposed SNL block has more positive eigenvalues which takes effect to enhance the discriminated features and also avoids the "damping effect". The number of the nonlocal blocks We test the robustness for adding multiple nonlocal blocks into the backbone network which forms the three type network "Different Position 3 (DP 3)", "Same Position 3 (SP 3)" "Same Position 5 (SP 5)" as shown in  Table. 4 . The result are shown in  Table. 4 . For the model "DP3", three blocks are added into the stage 1, stage 2, and stage 3 (right after the second residual block). We can see that adding three proposed nonlocal operators into different stages of the backbone generate a larger improvement than the NS operator and NL operator (2.4% improvement). This is because when adding NS and NL into the early stage, these two models cannot better aggregate the low-level features and interfere the following blocks. For the model "SP 3" ("SP 5"), we add three (five) consecutively-connected nonlocal blocks into the stage 1. Note that different from the experiment in Tao et al. (2018) and Wang et al. (2018), these consecutively- connected nonlocal blocks have the same affinity matrix. From  Table. 4 , we can see that profited by concerning the stable hypothesis discussed in Sec 3.3, our gSNL outperform all other models when adding consecutively-connected nonlocal blocks (rises average 0.72% to the backbone and 0.41% higher than the best performance of other type nonlocal blocks) and has a relatively stable performance. However, one drawback is that our gSNL may interfere the learning when adding only one nonlocal block (the stable hypothesis is not satisfied).

Section Title: MAIN RESULTS
  MAIN RESULTS We test the networks with the Nonlocal Block (NL), the Nonlocal Stage (NS), the Compact Gen- eralized Nonlocal block (CGNL), the Double Attention Block (A2) and our SNL (gSNL) blocks in the different visual learning tasks. The experiment settings are discussed in Sec.4.1. Our models outperform other types of the nonlocal blocks across several standard benchmarks.  Table. 5  shows the experimental results on the CIFAR10 dataset, we can see that by adding one proposed block, the Top1 rises about 0.65%, which is higher than adding other type nonlocal blocks (0.3%). As the experiments on CIFAR100 dataset shown in  Table. 7 , using our proposed block brings improvement about 1.8% with ResNet50. While using a more simple backbone PreResnet56, our model can still generate 1.1% improvement as shown in  Table. 6 .  Table. 9  shows the experimental results on the fine-grained image classification task on CUB-200 datasets. Our model outperforms other non-channel-concerning blocks and generate (0.42%) im- provement. Comparing with the channel-wise concerning CGNL block, our model is only a bit lower in Top1.  Fig. 4  also shows the visualized feature map which is formed by adding the up- sampled feature output with the source image. We can see that the feature maps of our proposed block can cover more critical area of the birds. For example, both the left and right wings (red square) of the birds can be focused profited by the better long-range concerning of our SNL. More- over, benefited from the flexibility of the W 1 , our proposed SNL can also catch a relatively large range of the discriminative parts.  Table. 8  shows the experimental results on the action recognition task. The network with our proposed block can generate 1.8% improvement than the I3D model and outperforms all other nonlocal models on the UCF-101 dataset.

Section Title: CONCLUSION
  CONCLUSION In this paper, we explain the nonlocal block in the graph view and propose the spectral nonlocal (SNL) block which is more robust and well-behaved. Our SNL block is a generalized version of the NL and NS block and having more liberty for the parameter learning. We also give the stable hypothesis for deeper nonlocal structure and extend the SNL to gSNL that can be applied to the deeper nonlocal structures. The experiments on multiple computer vision tasks show the high robustness and performance of our proposed nonlocal block. Feature works will focus on using the SNL block into different vision task and its roubustness for the other type of neural network such as the Generative Adversarial Networks (GAN).

```
