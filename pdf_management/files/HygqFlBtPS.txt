Title:
```
Under review as a conference paper at ICLR 2020 IMPROVED TRAINING OF CERTIFIABLY ROBUST MOD- ELS
```
Abstract:
```
Convex relaxations are effective for training and certifying neural networks against norm-bounded adversarial attacks, but they leave a large gap between certifiable and empirical robustness. In principle, convex relaxation can provide tight bounds if the solution to the relaxed problem is feasible for the original non-convex problem. Therefore, we propose two regularizers that can be used to train neural networks that yield tighter convex relaxation bounds for robustness. In all of our experiments, the proposed regularizers result in higher certified accuracy than non-regularized baselines.
```

Figures/Tables Captions:
```
Figure 1: The feasible sets (blue regions/lines) given by the bounded ReLU constraints (Eq. O), convex hull (conv ij ) and the relaxation (Fast-Lin) discussed in this paper (specific choice for Eq. C) for j ∈ I i . The red lines and dots are the intersections between the boundaries of the convex feasible sets and the ReLU constraints.
Table 1: Results on MNIST, and CIFAR10 with small networks, large networks, and different coefficients of d(x, δ * 0 , W, b), r(x, δ * 0 , W, b). All entries with positive λ or γ are using our regularizers. For all models not marked as "Exact", we have projected the input dimension of Wi:1 to 50, the same as Wong et al. (2018). For val- ues with * , larger is used for training. = 0.3, 2/255, 8/255 correspond to using = 0.4, 2.2/255, 8.8/255 for training respectively. For the methods: 1 : (Dvijotham et al., 2018a); 2 : (Xiao et al., 2018); 3 : (Mirman et al., 2018); 4 (Gowal et al., 2018).
Table 2: Our results on the MNIST dataset, with CROWN-IBP. CI Orig are results copied from the paper, CI ReImp are results of our implementation of CROWN-IBP, and CI Reg is with regularizer r.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Neural networks have achieved excellent performances on many computer vision tasks, but they could be vulnerable to small, adversarially chosen perturbations that are barely perceptible to humans while having a catastrophic impact on the network's performance ( Szegedy et al., 2013 ;  Goodfellow et al., 2014 ). Making classifiers robust to these adversarial perturbations is of great interest, especially when neural networks are applied to safety-critical applications. Several heuristic methods exist for obtaining robust classifiers, however powerful adversarial examples can be found against most of these defenses ( Carlini & Wagner, 2017 ;  Uesato et al., 2018 ). Recent studies focus on verifying or enforcing the certified accuracy of deep classifiers, especially for networks with ReLU activations. They provide guarantees of a network's robustness to any perturba- tion δ with norm bounded by δ p ≤ ( Wong & Kolter, 2017 ;  Wong et al., 2018 ; Raghunathan et al., 2018;  Dvijotham et al., 2018b ;  Zhang et al., 2018 ;  Salman et al., 2019 ). There are exact verifiers that find the exact minimum adversarial distortions δ or the robust error ( Ehlers, 2017 ;  Katz et al., 2017 ;  Tjeng et al., 2017 ), but due to the non-convex nature of the problem, exact verification is NP-hard. To make verification efficient and scalable, convex relaxations are adopted to expand the non-convex feasible set given by non-linear activations into convex sets, resulting in a lower bound on the norm of adversarial perturbations ( Zhang et al., 2018 ;  Weng et al., 2018 ), or an upper bound on the robust error ( Dvijotham et al., 2018b ;  Gehr et al., 2018 ;  Singh et al., 2018 ). With LP relaxations ( Wong et al., 2018 ), such a verifier can be efficient enough to estimate the lower bound of the margin in each iteration for training certifiably robust networks. However, due to the relaxation of the underlying problem, the lower bound of the margin is potentially loose, and thus a barrier remains between the optimal values from the original and relaxed problems ( Salman et al., 2019 ). In this paper, we focus on improving the certified robustness of neural networks trained with convex relaxation bounds. To achieve this, we first give a more interpretable explanation for the bounds achieved in ( Weng et al., 2018 ;  Wong et al., 2018 ). Namely, the constraints of the relaxed problem are defined by a simple linear network with adversaries injecting bounded perturbations to both the input of the network and the pre-activations of intermediate layers. The optimal solution of the relaxed problem can be written as a forward pass of the clean image through the linear network, plus the cumulative adversarial effects of all the perturbations added to the linear transforms, which makes it easier to identify the optimality conditions and serves as a bridge between the relaxed problem and the original non-convex problem. We further identify conditions for the bound to be tight, and we propose two indicators for the gap between the original non-convex problem and the relaxed problem. Adding the proposed indicators into the loss function results in classifiers with better certified accuracy.

Section Title: BACKGROUND AND RELATED WORK
  BACKGROUND AND RELATED WORK Adversarial defenses roughly fall into two categories: heuristic defenses and verifiable defenses. The heuristic defenses either try to identify adversarial examples and remove adversarial perturbations from images, or make the network invariant to small perturbations through training ( Papernot & McDaniel, 2018 ;  Shan et al., 2019 ;  Samangouei et al., 2018 ;  Hwang et al., 2019 ). In addition, adversarial training uses adversarial examples as opposed to clean examples during training, so that the network can learn how to classify adversarial examples directly ( Madry et al., 2017 ;  Shafahi et al., 2019 ;  Zhang et al., 2019a ). In response, a line of works have proposed to verify the robustness of neural nets. Exact methods obtain the perturbation δ with minimum δ p such that f (x) = f (x + δ), where f is a classifier and x is the data point. Nevertheless, the problem itself is NP-hard and the methods can hardly scale ( Cheng et al., 2017 ;  Lomuscio & Maganti, 2017 ;  Dutta et al., 2018 ; Fischetti & Jo, 2017;  Tjeng et al., 2017 ;  Scheibler et al., 2015 ;  Katz et al., 2017 ;  Carlini et al., 2017 ;  Ehlers, 2017 ). A body of work focuses on relaxing the non-linearities in the original problem into linear inequality constraints ( Singh et al., 2018 ;  Gehr et al., 2018 ;  Zhang et al., 2018 ;  Mirman et al., 2018 ), sometimes using the dual of the relaxed problem ( Wong & Kolter, 2017 ;  Wong et al., 2018 ;  Dvijotham et al., 2018b ). Recently,  Salman et al. (2019)  unified the primal and dual views into a common convex relaxation framework, and suggested there is an inherent gap between the actual and the lower bound of robustness given by verifiers based on LP relaxations, which they called a convex relaxation barrier. Some defense approaches integrate the verification methods into the training of a network to minimize robust loss directly.  Hein & Andriushchenko (2017)  uses a local lipschitz regularization to improve certified robustness. In addition, a bound based on semi-definite programming (SDP) relaxation was developed and minimized as the objective (Raghunathan et al., 2018).  Wong & Kolter (2017)  presents an upper bound on the robust loss caused by norm-bounded perturbation via LP relaxation, and minimizes this upper bound during training.  Wong et al. (2018)  further extend this method to much more general network structures with skip connections and general non-linearities, and provide a memory-friendly training strategy using random projections. Since LP relaxation is adopted, the aforementioned convex relaxation barrier exists for their methods. While another line of work (IBP) have shown that an intuitively looser interval bound can be used to train much more robust networks than convex relaxation for large ∞ perturbations ( Gowal et al., 2018 ;  Zhang et al., 2019b ), it is still important to study convex relaxation bounds since it can provide better certificates against a broader class of adversaries that IBP struggles to certify in some cases, such as 2 adversaries for convolutional networks. We give a brief discussion for the reason in Appendix E. We seek to enforce the tightness of the convex relaxation certificate during training. It reduces the optimality gap between the original and the relaxed problem by adding the proposed indicators into the loss function as regularizers. Compared with previous approaches, we have the following contributions: First, based upon the same relaxation in ( Weng et al., 2018 ), we illustrate a more intuitive view for the bounds on intermediate ReLU activations achieved by ( Wong et al., 2018 ) , which can be viewed as a linear network facing adversaries adding bounded perturbations to both the input and the intermediate layers. Second, starting from this view, we identify conditions where the bound from the relaxed problem is tight for the original non-convex problem. Third, based on the conditions, we propose regularizers that encourage the bound to be tight for the obtained network, which improves the certificate on both MNIST and CIFAR-10.

Section Title: PROBLEM FORMULATION
  PROBLEM FORMULATION In general, to train an adversarially robust network, we solve a constrained minimax problem where the adversary tries to maximize the loss given the norm constraint, and the parameters of the network are trained to minimize this maximal loss. Due to nonconvexity and the complexity of neural networks, it is expensive to solve the inner max problem exactly. To obtain certified robustness, like many related works ( Wong et al., 2018 ;  Gowal et al., 2018 ), we minimize an upper bound of the inner max problem, which is a cross entropy loss on the negation of the lower bounds of margins over each Under review as a conference paper at ICLR 2020 other class, as shown in Eq. 4. Without loss of generality, in this section we analyze the original and relaxed problems for minimizing the margin between the ground truth class y and some other class t under norm-bounded adversaries, which can be adapted directly to compute the loss in Eq. 4. The original nonconvex constrained optimization problem for finding the norm-bounded adversary that minimizes the margin can be formulated as minimize z1∈Bp, (x) c t x L , subject to z i+1 = σ(x i ), x i = f i (z i ), for i = 1, ..., L, (O) where c t = e y − e t , e y and e t are one-hot vectors corresponding to the label y and some other class t, σ(·) is the ReLU activation, and f i is one functional block of the neural network. This can be a linear layer (f i (z i ) = W i z i + b i ), or even a residual block. We use h i (x) = f i (σ(f i−1 (· · · f 1 (x)))) to denote the ReLU network up to the i-th layer, and p * O to denote the optimal solution to O.

Section Title: EFFICIENT CONVEX RELAXATIONS
  EFFICIENT CONVEX RELAXATIONS

Section Title: Grouping of ReLU Activations
  Grouping of ReLU Activations The nonconvexity of O stems from the nonconvex feasible set given by the ReLU activations. Since the network is a continuous function, the pre-activations x i have lower and upper bounds x i andx i when the input z 1 ∈ B p, (x). If a certain pre-activation x ij has x ij < 0 <x ij , its corresponding ReLU constraint z i+1,j = σ(x ij ) gives rise to a non-convex feasible set as shown in the left of  Figure 1 , making Eq. O a non-convex optimization problem. On the other hand, ifx ij ≤ 0 or x ij ≥ 0, the constraints degenerate into linear constraints z i+1,j = 0 and z i+1,j = x ij respectively, which do not affect convexity. Based on x i andx i , we divide the ReLU activations into three disjoint subsets If j ∈ I i , we call the corresponding ReLU activation an unstable neuron. Convex relaxation expands the non-convex feasible sets into convex ones and solves a convex optimization problem C. The feasible set of O is a subset of the feasible set of C, so the optimal value of C lower bounds the optimal value of Eq. O. Moreover, we want problem C to be solved efficiently, better with a closed form solution, so that it can be integrated into the training process.

Section Title: Computational Challenge for the "optimal" Relaxation
  Computational Challenge for the "optimal" Relaxation As pointed out by ( Salman et al., 2019 ), the optimal layer-wise convex relaxation, i.e., the optimal convex relaxation for the nonlinear constraint z i+1 = σ(x i ) of a single layer, can be obtained independently for each neuron. For each j ∈ I i in a ReLU network, the optimal layer-wise convex relaxation is the closed convex hull conv ij of , corresponding to the triangle region in the middle of  Figure 1 . Despite being relatively tight, there is no closed-form solution to this relaxed problem. LP solvers are typically adopted to solve a linear programming problem for each neuron. Therefore, such a relaxation is hardly scalable to verify larger networks without any additional trick (like  Xiao et al. (2018) ).  Weng et al. (2018)  find it to be 34 to 1523 times slower than Fast-Lin, and it has difficulty verifying MLPs with more than 3 layers on MNIST. In ( Salman et al., 2019 ), it takes 10,000 CPU cores to parallelize the LP solvers for bounding the activations of every neuron in a two-hidden-layer MLP with 100 neurons per layer. Since solving LP problems for all neurons are usually impractical, it is even more difficult to optimize the network to maximize the Under review as a conference paper at ICLR 2020 lower bounds of margin found by solving this relaxation problem, as differentiating through the LP optimization process is even more expensive.

Section Title: Computationally Efficient Relaxations
  Computationally Efficient Relaxations In the layer-wise convex relaxation, instead of using a boundary nonlinear in x ij , ( Zhang et al., 2018 ) has shown that for any nonlinearity, when both the lower and upper boundaries are linear in x ij , there exist closed-form solutions to the relaxed problem, which avoids using LP solvers and improves efficiency. Specifically, the following relaxation of O has closed-form solutions: where · denotes element-wise product, and for simplicity, we have only considered networks with no skip connections, and represent both Full Connected and Convolutional Layers as a linear transform Before we can solve C to get the lower bound of margin, we need to know thee range [x i ,x i ] for the pre-activations x i . As in ( Wong & Kolter, 2017 ;  Weng et al., 2018 ;  Zhang et al., 2018 ), we can solve the same optimization problem for each neuron x ij starting from layer 1 to L, by replacing c t with e j or −e j for x ij orx ij respectively. 1 The most efficient approach in this category is Fast-Lin ( Weng et al., 2018 ), which sets a ij =ā ij , as shown in the right of  Figure 1 . A tighter choice is CROWN ( Zhang et al., 2018 ), which chooses different a ij andā ij such that the convex feasible set is minimized. However, CROWN has much higher complexity than Fast-Lin due to its varying slopes. We give detailed analysis of the closed- form solutions of both bounds and their complexities in Appendix F. Recently, CROWN-IBP ( Zhang et al., 2019b ) has been proposed to provide a better initialization to IBP, which uses IBP to estimate range [x i ,x i ] for CROWN. In this case, both CROWN and Fast-Lin have the same complexity and CROWN is a better choice.

Section Title: TIGHTER BOUNDS VIA REGULARIZATION
  TIGHTER BOUNDS VIA REGULARIZATION Despite being relatively efficient to compute, Fast-Lin and CROWN are not even the tightest layer- wise convex relaxation. Using tighter bounds to train the networks could potentially lead to higher certified robustness by preventing such bounds from over-regularizing the networks. Nevertheless, there exist certain parameters and inputs such that the seemingly looser Fast-Lin is tight for O, i.e., the optimal value of Fast-Lin is the same as O. The most trivial case is where no unstable neuron exists. In practice, as shown in the illustrative example in Appendix A, Fast-Lin can be tight even when unstable neurons exist. It is therefore interesting to check the conditions for Fast-Lin or CROWN to be tight for O, and enforcing such conditions during training to improve the certified robustness.

Section Title: CONDITIONS FOR TIGHTNESS
  CONDITIONS FOR TIGHTNESS Here we look into conditions that make the optimal value p * C of the convex problem C to be equal to p * O . Let {z i , x i } L i=1 be some feasible solution of C, from which the objective value of C can be determined as p C = c t x L . Let {z i , x i } L i=1 be some feasible solution of O computed by passing z 1 through the ReLU sub-networks h i (z 1 ) defined in O, and denote the resulting feasible objective value as p O = c t x L . Generally, for a given network with the set of weights {W i , b i } L i=1 , as long as the optimal solution Therefore, for a given network and input x, to check the tightness of the convex relaxation, we can check whether its optimal solution {z * i , x * i } L i=1 is feasible for O. This can be achieved by passing z * 1 through the ReLU network, and either directly check the resultant objective value p O , or compare {z * i , x * i } L i=1 with the resultant feasible solution {z i , x i } L i=1 . Further, we can encourage such Under review as a conference paper at ICLR 2020 conditions to happen during the training process to improve the tightness of the bound. Based on such mechanisms, we propose two regularizers to enforce the tightness. Notice such regularizers are different from the RS Loss ( Xiao et al., 2018 ) introduced to reduce the number of unstable neurons, since we have shown with Appendix A that C can be tight even when unstable neurons exist.

Section Title: A INTUITIVE INDICATOR OF TIGHTNESS
  A INTUITIVE INDICATOR OF TIGHTNESS The observation above motivates us to consider the non-negative value d(x, δ * 0 , W, b) = p O (x, δ * 0 ) − p * C (2) as an indicator of the difference between {z * i , x * i } L i=1 and {z i , x i } L i=1 , where p O (x, δ * 0 ) = c t h L (x + δ * 0 ) is the margin over class t computed by passing the optimal perturbation δ * 0 for C through the original network. δ * 0 can be computed efficiently from the optimality condition of Fast-Lin or CROWN, as demonstrated in Eq. 16. For example, when p = ∞, the optimal input perturbation The larger d(x, δ * 0 , W, b) is, the more relaxed C is, and the higher p * O −p * C could be. Therefore, we can regularize the network to minimize d(x, δ * 0 , W, b) during training and maximize the lower-bound of the margin p * C , so that we can obtain a network where p * C is a better estimate of p * O and the robustness is better represented by p * C . Such an indicator avoids comparing the intermediate variables, which gives more flexibility for adjustment. It bears some similarities to knowledge distillation (Hinton et al., 2015), in that it encourages learning a network whose relaxed lower bound gives similar outputs of the corresponding ReLU network. It is worth noting that minimizing d(x, δ * 0 , W, b) does not necessarily lead to decreasing p O (x, δ * 0 ) or increasing p * C . In fact, both p O (x, δ * 0 ) and p * C can be increased or decreased at the same time with their difference decreasing. The tightest indicator should give the minimum gap p * O − p * C , where we need to find the optimal perturbation for O. However, the minimum gap cannot be found in polynomial time, due to the non-convex nature of O. ( Weng et al., 2018 ) also proved that there is no polynomial time algorithm to find the minimum 1 -norm adversarial distortion with 0.99 ln n approximation ratio unless NP=P, a problem equivalent to finding the minimum margin here.

Section Title: A BETTER INDICATOR FOR REGULARIZATION: DIFFERENCE IN SOLUTIONS
  A BETTER INDICATOR FOR REGULARIZATION: DIFFERENCE IN SOLUTIONS Despite being intuitive and is able to achieve improvements, Eq. 2 which enforces similarity between objective values does not work as good as enforcing similarity between the solutions {z * i , x * i } L i=1 and {z i , x i } L i=1 in practice, an approach we will elaborate below. For both CROWN and Fast-Lin, unless d(x, δ * 0 , W, b) = 0, {z * i , x * i } L i=1 may deviate a lot from {z i , x i } L i=1 and does not correspond to any ReLU network, even if d(x, δ * 0 , W, b) may seem small. For example, it is possible that z * ij < 0 for a given z * 1 , but a ReLU network will always have z ij ≥ 0. We find an alternative regularizer more effective at improving verifiable accuracy. The regularizer encourages the feasible solution {z i , x i } L i=1 of O to exactly match the feasible optimal solution {z * i , x * i } L i=1 of C. Since we are adopting the layer-wise convex relaxation, the optimal solutions of the unstable neurons can be considered independently. Here we derive a sufficient condition for tightness for Fast-Lin, which also serves as a sufficient condition for CROWN. For linear programming, the optimal solution occurs on the boundaries of the feasible set. Since Fast-Lin is a layer-wise convex relaxation, the solution to each of its neurons in z i can be considered independently, and therefore for a specific layer i and j ∈ I i , the pair of optimal solutions (x * ij , z * i+1,j ) should occur on the boundary in the right of  Figure 1 . It follows that the only 3 optimal solutions (x * ij , z * i+1,j ) of C that are also feasible for O are (x ij , 0), (x ij , x ij ) and (0, 0). Notice they are also in the intersection between the boundary of CROWN and O. In practice, out of efficiency concerns, both Fast-Lin and CROWN identify the boundaries that the optimal solution lies on and computes the optimal value by accumulating the contribution of each layer in a backward pass, without explicitly computing {z * i , x * i } L i=1 for each layer with a forward Under review as a conference paper at ICLR 2020 pass (see Appendix F for more details). It is therefore beneficial to link the feasible solutions of O to the parameters of the boundaries. Specifically, let δ * ij ∈ {b ij ,b ij } be the intercept of the line that the optimal solution (x * ij , z * i+1,j ) lies on. We want to find a rule based on {δ * i } L i=1 to determine whether the bound is tight from the values of {x i } L i=1 . For both Fast-Lin and CROWN, b ij = 0,b ij = − xij x ij xij −x ij . For Fast-Lin, when δ * ij =b ij , only (x * ij , z * i+1,j ) = (x ij , 0) or (x ij , x ij ) are fesible for O; when δ * ij = b ij , only (x * ij , z * i+1,j ) = (0, 0) is feasible for O. Meanwhile, z i+1,j = max(x ij , 0) is deterministic if x ij is given. Therefore, when the bound is tight for Fast-Lin, if δ * ij = b ij , then x ij = 0. Otherwise, if δ * ij =b ij , and x ij = x ij or x ij . For CROWN, this condition is also feasible, though it could be either x ij ≤ 0 or x ij ≥ 0 when δ * ij = 0, depending on the optimal slope D (L) ij . Indeed, we achieve optimal tightness (p * C = p * O ) for both Fast-Lin and CROWN if x ij satisfy these conditions at all unstable neurons. Specifically, Proposition 1. Assume {z i , x i } L i=1 is obtained by the ReLU network h L with input z 1 , and {δ * i } L−1 i=0 is the optimal solution of Fast-Lin or CROWN. We provide the proof of this simple proposition in the Appendix. It remains to be discussed how to best enforce the similarity between the optimal solutions of O and Fast-Lin or CROWN. Like before, we choose to enforce the similarity between {x i } L i=1 and the closest optimal solution of Fast-Lin, where {x i } L i=1 is constructed by setting x 1 = x * 1 = W 1 (x + δ * 0 ) + b 1 and pass x 1 through the ReLU network to obtain x i = h i (x + δ * 0 ). By Proposition 1, the distance can be computed by considering the values of the intercepts {δ * i } L−1 i=1 as

Section Title: CERTIFIED ROBUST TRAINING IN PRACTICE
  CERTIFIED ROBUST TRAINING IN PRACTICE In practice, for classification problems with more than two classes, we will compute the lower bound of the margins w.r.t. multiple classes. Denote p * C and p * O as the concatenated vector of lower bounds of the relaxed problem and original problem for multiple classes, and d t , r t as the regularizers for the margins w.r.t. class t. Together with the regularizers, we optimize the following objective minimize W,b L CE (−p * C , y) + λ t d t (x, δ * 0 , W, b) + γ t r t (x, δ * 0 , W, b), (4) where L CE (−p * C , y) is the cross entropy loss with label y, as adopted by many related works ( Wong et al., 2018 ;  Gowal et al., 2018 ), and we have implicitly abbreviated the inner maximization problem w.r.t. {δ i } L−1 i=0 into the optimal values p * C and solution δ * 0 . More details for computing the intermediate and output bounds can be found in Algorithm 1, where we have used · 1,row to denote row-wise 1 norm, and (·) :,j for taking the j-th column. One major challenge of the convex relaxation approach is the high memory consumption. To compute the bounds x i , x i , we need to pass an identity matrix with the same number of diagonal entries as the total dimensions of the input images, which can make the batch size thousands of times larger than usual. To mitigate this, one can adopt the random projection from  Wong et al. (2018) , which projects identity matrices into lower dimensions as W i:1 R to estimate the norm of W i:1 . Such projections add noise/variance to x i , x i , and the regularizers are affected as well.

Section Title: EXPERIMENTS
  EXPERIMENTS

Section Title: Models, Datasets and Hyper-parameters
  Models, Datasets and Hyper-parameters We evaluate the proposed regularizer on two datasets (MNIST and CIFAR10) with two different each. We consider only ∞ adversaries. We experiment with a variety of different network structures, including a MLP (2x100) with two 100-neuron hidden layers as ( Salman et al., 2019 ), two Conv Nets (Small and Large) that are the same as ( Wong et al., 2018 ), a family of 10 small conv nets and a family of 8 larger conv nets, all the same as ( Zhang et al., 2019b ), and also the same 5-layer convolutional network (XLarge) as in the latest version of CROWN-IBP ( Zhang et al., 2019b ). For CROWN-IBP, we use the updated expensive training schedule as ( Zhang et al., 2019b ), which uses 200 epochs with batch size 256 for MNIST and 3200 epochs with batch size 1024 for CIFAR10. We use up to 4 GTX 1080Ti or 2080Ti for all our experiments. Improved Training with Convex Relaxation  Table 1  shows comparisons with various approaches. All of our baseline implementations have improved compared with ( Wong et al., 2018 ). When adding the proposed regularizers, the certified robust accuracy is further improved in all cases for both CP ( Wong et al., 2018 ) and CROWN-IBP ( Zhang et al., 2019b ). We also provide results against Under review as a conference paper at ICLR 2020 a 100-step PGD adversary for our CP models. We will add PGD error rates for our CROWN-IBP models in our future version. Since both PGD errors and standard errors are reduced in most cases, the regularizer should have improved not only the certified upper bound, but also improved the actual robust error. The relative improvement on 2x100 with our regularizer (10.3%/8.7%) are comparable to the im- provements (5.9%/10.0%) from ( Salman et al., 2019 ), despite the fact that we start from a stronger baseline. This indicates that the improvement brought by using our regularizer is comparable with using the expensive and unstable optimal layer-wise convex relaxation for relaxation. Our results with Small are better than the best results of ( Dvijotham et al., 2018a ;  Xiao et al., 2018 ) on MNIST with = 0.1, though not as good as the best of ( Mirman et al., 2018 ), which uses a larger model. When applying the same model on CIFAR10, we achieve better robust error than ( Mirman et al., 2018 ). The relative improvements in certified robust error for = 0.1 and 0.3 are 18%/3.4% for the small exact model on MNIST, compared with 0.03%/3.13% for the random projection counterparts. In the exact models, we have better estimates of x i , x i . These consistent improvements validate that our proposed regularizers improve the performance. In comparison with IBP-based methods, our regularizers is able to further improve CP on CIFAR10 with = 2/255, and demonstrate the best result among all approaches compared in this setting. To our knowledge, this is the best result of models of the same size. By using our regularizers on CROWN- IBP to provide a better initialization for the later training stage of IBP, our method also achieves the best certified accuracy on CIFAR10 under = 8/255. To provide more comprehensive evaluations, Table 4 shows the mean and variance of the results with smaller models, demonstrating consistent Under review as a conference paper at ICLR 2020 improvements of our model, while  Table 2  gives the best, median and worst case results with the large models on the MNIST dataset. Note all the networks are significantly smaller than ( Gowal et al., 2018 ), and our batch size and number of epochs (at most 256 and 140) are also much smaller than ( Gowal et al., 2018 ) (1600 and 3200). Still, we are able to achieve better results.

Section Title: CONCLUSIONS
  CONCLUSIONS We propose two regularizers that lead to tighter LP relaxation bounds for certifiable robustness. Extensive experiments validate that the regularizers improve robust accuracy over non-regularized baselines. This work is a step towards closing the gap between certified and empirical robustness. Future directions include methods to improve computational efficiency for LP relaxations (and certified methods in general), and better ways to leverage random projections for acceleration.
  1 Forxij, take an extra negation on the solution.

```
