Title:
```
Under review as a conference paper at ICLR 2020 REINFORCEMENT LEARNING WITH PROBABILISTICALLY COMPLETE EXPLORATION
```
Abstract:
```
Balancing exploration and exploitation remains a key challenge in reinforcement learning (RL). State-of-the-art RL algorithms suffer from high sample complexity, particularly in the sparse reward case, where they can do no better than to explore in all directions until the first positive rewards are found. To mitigate this, we propose Rapidly Randomly-exploring Reinforcement Learning (R3L). We formulate explo- ration as a search problem and leverage widely-used planning algorithms such as Rapidly-exploring Random Tree (RRT) to find initial solutions. These solutions are used as demonstrations to initialize a policy, then refined by a generic RL algorithm, leading to faster and more stable convergence. We provide theoretical guarantees of R3L exploration finding successful solutions, as well as bounds for its sampling complexity. We experimentally demonstrate the method outperforms classic and intrinsic exploration techniques, requiring only a fraction of exploration samples and achieving better asymptotic performance.
```

Figures/Tables Captions:
```
Figure 1: Expected returns achieved by linear policy with 2 parameters on Sparse MountainCar domain (background). Gradient is 0 in the dark blue area. Trajectories show the evolution of policy parameters over 1000 iterations of TRPO, with 5 random seeds. Same colors indicate the same random seeds. (a) Random-walk type behaviour observed when parameters are initialized using Glorot initialization (Glorot & Bengio, 2010). (b) Convergence observed when parameters are initialized in a region with gradients (1, 40).
Figure 2: Example of R3L exploration on sparse MountainCar. Green segments are sampled transitions, executed in simulation. A successful solution found by R3L is dis- played in red. State dimensions are normal- ized to [−1, 1].
Figure 3: Results for classic control tasks, comparing our proposed method (R3L-TRPO/DDPG), vanilla TRPO/DDPG, and VIME-TRPO. Trendlines are the medians and shaded areas are the interquartile range, taken over 10 randomly chosen seeds. Also shown is the average undiscounted return of successful trajectories generated with R3L exploration. The dashed offset at the start of R3L-TRPO/DDPG reflects the number of timesteps spent on R3L exploration.
Table 1: Impact of learning local policy π l and biasing search towards F goal with probability p g on R3L exploration. Results show the mean and standard deviation of successful trajectory length |τ | and number of timesteps required, computed over 20 runs.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Reinforcement Learning (RL) studies how agents can learn a desired behaviour by simply using inter- actions with an environment and a reinforcement signal. Central to RL is the long-standing problem of balancing exploration and exploitation. Agents must first sufficiently explore the environment to identify high-reward behaviours, before this knowledge can be exploited and refined to maximize long-term rewards. Many recent RL successes have been obtained by relying on well-formed reward signals, that provide rich gradient information to guide policy learning. However, designing such informative rewards is challenging, and rewards are often highly specific to the particular task being solved. Sparse rewards, which carry little or no information besides binary success or failure, are much easier to design. This simplicity comes at a cost; most rewards are identical, so that there is little gradient information to guide policy learning. In this setting, the sample complexity of simple exploration strategies was shown to grow exponentially with state dimension in some cases ( Osband et al., 2016b ). Intuition behind this phenomenon can be gained by inspecting Figure 1a: exploration in regions where the return surface is flat leads to a random walk type search. This inefficient search continues until non-zero gradients are found, which can then be followed to a local optimum. Planning algorithms can achieve much better exploration performance than random walk by taking search history into account ( Lavalle, 1998 ). These techniques are also often guaranteed to find a solution in finite time if one exists ( Karaman & Frazzoli, 2011 ). In order to leverage the advantages of these methods, we formulate RL exploration as a planning problem in the state space. Solutions found by search algorithms are then used as demonstrations for RL algorithms, initializing them in regions of policy parameter space where the return surface is not flat. Figure 1b shows the importance of such good initialization; surface gradients can be followed, which greatly facilitates learning. This paper brings the following contributions. We first formulate RL exploration as a planning problem. This yields a simple and effective method for automatically generating demonstrations without the need for an external expert, solving the planning problem by adapting the classic Rapidly-exploring Random Tree algorithm (RRT) ( Kuffner & LaValle, 2000 ). The demonstrations are then used to initialize an RL policy, which can be refined with a classic RL method such as TRPO ( Schulman et al., 2015 ). We call the proposed method Rapidly Randomly-exploring Reinforcement Learning (R3L) 1 , provide theoretical guarantees for finding successful solutions Under review as a conference paper at ICLR 2020 (a) (b) and derive bounds for its sampling complexity. Experimentally, we demonstrate R3L improves exploration and outperforms classic and recent exploration techniques, and requires only a fraction of the samples while achieving better asymptotic performance. Lastly, we show that R3L lowers the variance of policy gradient methods such as TRPO, and verify that initializing policies in regions with rich gradient information makes them less sensitive to initial conditions and random seed. The paper is structured as follows: Section 2 analyzes the limitations of classic RL exploration. Section 3 describes R3L and provides theoretical exploration guarantees. Related work is discussed in Section 4, followed by experimental results and comments in Section 5. Finally, Section 6 concludes and gives directions for future work.

Section Title: SPARSE-REWARD RL AS RANDOM WALK
  SPARSE-REWARD RL AS RANDOM WALK Many recent RL methods are based on a policy gradient optimization scheme. This approach optimizes policy parameters θ with gradient descent, using a loss function L(θ) (e.g. expected return) and gradient g(θ) ≡ ∇ θ L(θ). Since computing L(θ) exactly is intractable, it is common to use unbiased empirical estimatorsL(θ) andĝ(θ), estimated from samples acquired by executing the policy. Optimization of θ then follows the common stochastic gradient descent (SGD) update-rule ( Bottou, 2010 ;  Robbins & Monro, 1951 ): θ n+1 = θ n − ĝ (θ n ), where is the learning rate. The SGD update rule defines a discrete-time stochastic process ( Mandt et al., 2017 ). Note thatĝ is the mean of n mb i.i.d. samples. Following the central limit theorem, the distribution overĝ is approximatelyĝ(θ) ∼ N (g(θ), 1 n mb C(θ)), meaningĝ is an unbiased estimator of g with covariance 1 n mb C(θ). Consequently, the update rule can be rewritten as ( Mandt et al., 2017 ): Here we assume that C(θ) = C, i.e. approximately constant w.r.t. θ, and factorizes as C = BB T . SGD is efficient for high-dimensional problems as it offers almost dimension independent convergence rates ( Nesterov, 2018 ). However, SGD requires non-zero gradients to guide the search towards the optimum θ * , i.e. |g(θ)| > g , ∀θ = θ * , g ∈ R. In the case of sparse-reward RL problems, such as in  Figure 1 , much of the loss surface is flat. This leads to inefficient exploration of parameter space Θ, as the drift component in Eq. (1) g ≈ 0, turning the SGD to a random walk in Θ; ∆θ = n mb B∆W . Random walk is guaranteed to wander to infinity when dimensionality d Θ ≥ 3 ( Pólya, 1921 ;  Kakutani, 1944 ). However, the probability of it reaching a desired region in Θ, e.g. where g = 0, depends heavily on problem specific parameters. The probability of θ n ever reaching a sphere of radius r centered at C such that C − θ 0 = R > r is ( Dvoretzky & Erdős, 1951 ): Under review as a conference paper at ICLR 2020 In sparse RL problems r < R, thus the probability of reaching a desired region by random walk is smaller than 1, i.e. there are no guarantees of finding any solution, even in infinite time. This is in stark contrast with the R3L exploration paradigm, as discussed in Section 3.5.

Section Title: R3L: RAPIDLY AND RANDOMLY-EXPLORING REINFORCEMENT LEARNING
  R3L: RAPIDLY AND RANDOMLY-EXPLORING REINFORCEMENT LEARNING R3L adapts RRT to the RL setting by formulating exploration as a planning problem in state space. Unlike random walk, RRT encourages uniform coverage of the search space and is probabilistically complete, i.e. guaranteed to find a solution ( Kleinbort et al., 2019 ). R3L is decomposed into three main steps: (i) exploration is first achieved using RRT to generate a data-set of successful trajectories, described in Sections 3.2 and 3.3, (ii) successful trajectories are converted to a policy using learning from demonstrations (Section 3.4), and (iii) the policy is refined using classic RL methods.

Section Title: DEFINITIONS
  DEFINITIONS This work is based on the Markov Decision Process (MDP) framework, defined as a tuple < S, A, T, R, γ >. S and A are spaces of states s and actions a respectively. T : S×A×S → [0, 1] is a transition probability distribution so that T (s t , a t , s t+1 ) = p(s t+1 |s t , a t ), where the subscript t indi- cates the t th discrete timestep. R : S ×A×S → R is a reward function defining rewards r t associated with transitions (s t , a t , s t+1 ). γ ∈ [0, 1) is a discount factor. Solving a MDP is equivalent to finding the optimal policy π * maximizing the expected return J(π * ) = E T,π * [ H t=0 γ t R(s t , a t , s t+1 )] for some time horizon H, where actions are chosen according to a t = π * (s t ). Lastly, let S be a Eu- clidean space, equipped with the standard Euclidean distance metric with an associated norm denoted by · . The space of valid states is denoted by F ⊆ S.

Section Title: EXPLORATION AS A PLANNING PROBLEM WITH RRT
  EXPLORATION AS A PLANNING PROBLEM WITH RRT The RRT algorithm ( LaValle & Kuffner, 2001 ) provides a principled approach for planning in problems that cannot be solved directly (e.g. using inverse kinematics), but where it is possible to sample transitions. RRT builds a tree of valid transitions between states in F, grown from a root s 0 . As such, the tree T maintains information over valid trajectories. The exploration problem is defined by the pair (F, s 0 ). In RL environments with a known goal set F goal ⊆ F (e.g. MountainCar), the exploration problem is defined by (F, s 0 , F goal ). The RRT algorithm starts by sampling a random state s rand ∈ S, used to encourage exploration in a specific direction in the current iteration. This necessitates the first of two assumptions. Assumption 1. Random states can be sampled uniformly from the MDP state space S. Sampled states are not required to be valid, thus sampling a random state is typically equivalent to trivially sampling a hyper-rectangle. Then, the vertex s near = arg min s∈T s rand − s near is found. RRT attempts to expand the tree T from s near toward s rand by sampling an action a ∈ A according to a steering function Υ : S × S → A. In many planning scenarios, Υ samples randomly from A. A forward step s new = f (s near , a) is then simulated from s near using action a, where f is defined by the transition dynamics. Being able to expand the tree from arbitrary s near relies on another assumption. Assumption 2. The environment state can be set to a previously visited state s ∈ T. Although this assumption largely limits the algorithm to simulators, it has previously been used in  Florensa et al. (2017) ;  Nair et al. (2018) ;  Ecoffet et al. (2019)  for example; see discussion in Section 6 on overcoming the limitation to simulated environments. s new is added as a new vertex of T, alongside an edge (s near , s new ) with edge information a. This process repeats until a sampling budget k is exhausted or the goal set is reached (i.e. s new ∈ F goal ). Add node s new , a and edge (s near , s new ) to T end τ ← trajectory in T with max. cumulated reward Once planning is finished, a successful valid trajectory can easily be generated from T by retrieving all nodes between the leaf s leaf ∈ F goal and the root. Because tree T is grown from valid transitions between states in F, these trajectories are valid by construction.

Section Title: R3L EXPLORATION: ADAPTING RRT TO RL
  R3L EXPLORATION: ADAPTING RRT TO RL RRT is not directly applicable to RL problems. This subsection presents the necessary adaptations to the exploration phase of R3L, summed up in Algorithm 1.  Figure 2  shows R3L's typical exploration behaviour.

Section Title: Local policy learning
  Local policy learning In classic planning problems, selecting actions extending s near towards s rand is easy, as these have a geometric interpretation or there is a known steering function. RL state spaces do not benefit from the same geometric properties, and properly selecting actions can be challenging. We solve this problem by defining a local policy π l , which models the distribution of actions to transition from a state to a neighbouring goal state. Actions to extend a tree branch are sampled as a ∼ π l (s near , s rand − s near ). We formulate the problem of learning π l as supervised learning, where inputs are starting states s t augmented with the difference s t+1 − s t , and targets are actions. The model is learned using transition data collected from previous tree expansion iterations. Results in this paper use Bayesian linear regression to represent π l , but any supervised learning model can applied instead.

Section Title: Unknown dynamics
  Unknown dynamics RRT was designed for problems with known continuous dynamics f , but RL features unknown discrete transition dynamics. In R3L, f is replaced with an environment interaction from s near , with selected action a, resulting in a new state s new . Since (s near , a, s new ) is a real transition, it must be valid, and s new can be added to the tree T.

Section Title: Biasing search with F goal
  Biasing search with F goal Better exploration efficiency can be achieved if goal information is available. Indeed, the RRT framework allows for biasing exploration towards F goal , often resulting in faster exploration. This is achieved by sampling s rand from F goal instead of F with low probability p g , while the rest of the iteration remains unchanged. Since R3L uses RRT to explore, the algorithm is most suitable for RL problems that are fully observable, exhibit sparse rewards and have continuous controls. R3L is applicable to other RL problems, but may not perform as well as methods tailored to specific cases.

Section Title: POLICY INITIALIZATION FROM R3L DEMONSTRATIONS
  POLICY INITIALIZATION FROM R3L DEMONSTRATIONS Upon completion, R3L exploration yields a successful trajectory τ , which may not be robust to various starting conditions and/or stochastic transitions. Converting successful trajectories into a policy is crucial to achieve robustness and enable further refinement with RL. Policy initialization is applied to a set of successful trajectories τ = {τ i } N 1 generated using N runs of R3L exploration with different starting conditions. An imitation policy π 0 is learned by supervised Under review as a conference paper at ICLR 2020 learning on transitions from τ . Policy π is then refined using traditional RL algorithms like TRPO. As shown in  Figure 1 , initializing policy parameters in the vicinity of a local optimum is crucial.

Section Title: EXPLORATION GUARANTEES
  EXPLORATION GUARANTEES The RL planning environment defines differential constraints of the form: Therefore, starting at s , the trajectory τ can be generated by forward integrating Eq. (3) with the applied actions. As with many RL problems, a(t) is time-discretized resulting in a piecewise constant control function. This means τ is constructed of n τ segments of fixed time duration ∆t such that the overall trajectory duration t τ = n τ · ∆t. Thus, a(t) is defined as a(t) = a i ∈ A where t ∈ [(i − 1) · ∆t, i · ∆t) and 1 ≤ i ≤ n τ . Furthermore, as all transitions between states in τ are known, the trajectory return can be defined as R τ = nτ t=0 γ t R(s t , a t , s t+1 ). R3L explores in state-action/trajectory space instead of policy parameter space. Furthermore, it is an effective exploration framework which provides probabilistic completeness (PC): Definition 2. A probabilistically complete planner finds a feasible solution (if one exists) with a probability approaching 1 in the limit of infinite samples. With the aforementioned dynamic characteristics, we prove that R3L exploration under the RL setting is PC. This is in stark contrast to the random walk exploration process, discussed in section 2, which is not PC. We begin with the following theorem, a modification of Theorem 2 from  Kleinbort et al. (2019) , which is applied to kinodynamic RRT where a goal set F goal is defined. Theorem 1. Suppose that there exists a valid trajectory τ from s 0 to F goal as defined in definition 1, with a corresponding piecewise constant control. The probability that R3L exploration fails to reach F goal from s 0 after k iterations is bounded by ae −bk , for some constants a, b > 0. The proof, which is a modification of Theorem 2 from  Kleinbort et al. (2019) , can be found in Appendix S2. It should be noted that R3L exploration does not require an explicit definition for F goal in order to explore the space. While in some path planning variants of RRT, F goal is used to bias sampling, the main purpose of F goal is to indicate that a solution has been found. Therefore, F goal can be replaced by another implicit success criterion. In the RL setting, this can be replaced by a return-related criterion. Theorem 2. Suppose that there exists a trajectory with a return R τ ≥R,R ∈ R. The probability that R3L exploration fails to find a valid trajectory from s 0 with R τ ≥R after k iterations is bounded byâe −bk , for some constantsâ,b > 0.

Section Title: Proof
  Proof The proof is straightforward. We augment each state in τ with the return to reach it from s 0 : s n = s n R sn , ∀n = 1 : n τ , (4) where R sn= = n≤nτ t=0 γ t R(s t , a t , s t+1 ). For consistency we modify the distance metric by simply adding a reward distance metric. With the above change in notation, we modify the goal set to F RL goal = {(s, R s )|s ∈ F goal , R s ≥R}, such that there is an explicit criterion for minimal return as a goal. Consequently, the exploration problem can be written for the augmented representation as (F, s RL 0 , F RL goal ), where s RL 0 = [s 0 , 0] . Theorem 1 satisfies that R3L exploration can find a feasible solution to this problem within finite time, i.e. PC, and therefore the probability of not reaching F RL goal after k iterations is upper-bounded by the exponential termâe −bk , for some constantsâ,b > 0 We can now state our main result on the sampling complexity of the exploration process. Theorem 3. If trajectory exploration is probabilistically complete and satisfies an exponential convergence bound, the expected sampling complexity is finite and bounded such that E[k] ≤â 4 sinh 2b 2 , (5) whereâ,b > 0. Under review as a conference paper at ICLR 2020 Proof. Theorem 2 provides an exponential bound for the probability the planner will fail in finding a feasible path. Hence, we can compute a bound for the expected number of iterations needed to find a solution, i.e. sampling complexity: It is worth noting that while the sample complexity is bounded, the above result implies that its complexity varies according to problem-specific properties, which are encapsulated in the value of a andb. Intuitively,â depends on the scale of the problem. It grows as |F RL goal | becomes smaller or as the length of the solution trajectory becomes longer.b depends on the probability of sampling states that will expand the tree in the right direction. It therefore shrinks as the dimensionality of S increases. We refer the reader to Appendix S2 for more details on the meaning ofâ,b and the derivation of the tail bound in Theorem 1.

Section Title: RELATED WORK
  RELATED WORK Exploration in RL has been extensively studied. Classic techniques typically rely on adding noise to actions ( Mnih et al., 2015 ;  Schulman et al., 2015 ) or to policy parameters ( Plappert et al., 2018 ). However, these methods perform very poorly in settings with sparse rewards. Intrinsic motivation tackles this problem by defining a new reward to direct exploration. Many intrinsic reward definitions were proposed, based on information theory ( Oudeyer & Kaplan, 2008 ), state visit count ( Lopes et al., 2012 ;  Bellemare et al., 2016 ;  Szita & Lőrincz, 2008 ;  Fox et al., 2018 ), value function posterior variance ( Osband et al., 2016a ;  Morere & Ramos, 2018 ), or model prediction error ( Stadie et al., 2015 ;  Pathak et al., 2017 ). Methods extending intrinsic motivation to continuous state and action spaces were recently proposed ( Houthooft et al., 2016 ;  Morere & Ramos, 2018 ). However, these approaches are less interpretable and offer no guarantees for the exploration of the state space. Offering exploration guarantees, Bayesian optimization was adapted to RL in  Wilson et al. (2014) , to search over the space of policy parameters in problems with very few parameters. Recent work extends the method to functional policy representations ( Vien et al., 2018 ), but results are still limited to toy problems and specific policy model classes. Motion planning in robotics is predominantly addressed with sampling-based methods. This type of approach offers a variety of methodologies for exploration and solution space representation (e.g., Probabilistic roadmaps (PRM) ( Kavraki et al., 1996 ), Expansive space trees (ESP) ( Hsu et al., 1997 ) and Rapidly-exploring random tree (RRT) ( Kuffner & LaValle, 2000 )), which have shown excellent performance in path planning in high-dimensional spaces under dynamic constraints ( LaValle & Kuffner, 2001 ;  Hsu et al., 2002 ;  Kavraki et al., 1996 ). RL was previously combined with sampling-based planning to replace core elements of planning algorithms, such as PRM's point-to-point connection ( Faust et al., 2018 ), local RRT steering func- tion (Chiang et al., 2019) or RRT expansion policy ( Chen et al., 2019 ). In contrast, the proposed method bridges the gap in the opposite direction, employing a sampling-based planner to generate demonstrations that kick-start RL algorithms and enhance their performance. Accelerating RL by learning from demonstration was investigated in  Niekum et al. (2015) ;  Bojarski et al. (2016) ;  Torabi et al. (2018) . However, these techniques rely on user-generated demonstra- tions or a-priori knowledge of environment parameters. In contrast, R3L automatically generates demonstrations, with no need of an external expert.

Section Title: EXPERIMENTS
  EXPERIMENTS In this section, we investigate (i) how learning a local policy π l and biasing search towards F goal with probability p g affects R3L exploration, (ii) whether separating exploration from policy refinement Under review as a conference paper at ICLR 2020

Section Title: R3L exploration analysis
  R3L exploration analysis We first analyze the exploration performance of R3L in a limited set of RL environments, to determine the impact that learning policy π l has on exploration speed. We also investigate whether R3L exploration is viable in environments where no goal information is available.  Table 1  shows the results of this analysis. Learning π l seems to greatly decrease the number of exploration timesteps needed on most environments. However, it significantly increases the number of timesteps on the acrobot and reacher environments. Results also suggest that learning π l helps R3L to find shorter trajectories on the same environments, which is a desirable property in many RL problems. Biasing R3L exploration towards the goal set F goal helps finding successful trajectories faster, as well as reducing their length. However, R3L exploration without goal bias is still viable in all cases. Although goal information is not given in the classic MDP framework, it is often available in real-world problems and can be easily utilized by R3L. Lastly, successful trajectory lengths have low variance, which suggests R3L finds consistent solutions.

Section Title: Comparison to classic and intrinsic exploration on RL benchmarks
  Comparison to classic and intrinsic exploration on RL benchmarks We examine the rates at which R3L learns to solve several RL benchmarks, and compare them with state-of-the-art RL algorithms. Performance is measured in terms of undiscounted returns and aggregated over 10 random seeds, sampled at random for each environment. We focus on domains with sparse rewards, which are notoriously difficult to explore for traditional RL methods. Our experiments focus on the widely-used methods TRPO ( Schulman et al., 2015 ) and DDPG ( Lillicrap et al., 2015 ). R3L-TRPO and R3L-DDPG are compared to the baseline algorithms with Gaussian action noise. As an additional baseline we include VIME-TRPO ( Houthooft et al., 2016 ). VIME is an exploration strategy based on maximizing information gain about the agent's belief of the environment dynamics. It is included to show that R3L can improve on state-of-the-art exploration methods as well as naive ones, even though the return surface for VIME-TRPO is no longer flat, unlike  Figure 1 . The exact experimental setup is described in Appendix S3.2. The R3L exploration phase is first run to generate training trajectories for all environments. The number of environment interactions during this phase is accounted for in the results, displayed as an offset with a vertical dashed black line. The average performance achieved by these trajectories is also reported as a guideline, with the exception of Cartpole Swingup where doing so does not make sense. RL is then used to refine a policy pretrained with these trajectories.  Figure 3  shows the median and interquartile range for all methods. R3L is very competitive with both vanilla and VIME baselines. It converges faster and achieves higher performance at the end of the experiment. In most cases, the upper quartile for our method begins well above the minimum return, indicating that R3L exploration and pre-training are able to produce successful though not optimal policies. R3L-DDPG performance, for the majority of problems, starts significantly above the minimum return, plunges due to the inherent instability of DDPG, but eventually recovers, indicating that R3L pre-training can help mitigate the instability. It is worth noting that R3L's lower quartile is considerably higher than that of baselines. Indeed, for many of the baselines the lower quartile takes a long time to improve on the minimum return, and in some cases it never manages to do so at all. This is a common problem in sparse reward RL, where there is no alternative but to search the parameter space randomly until the first successful trajectory is found, as explained in Section 2. While a few random seeds will by chance find a successful trajectory quickly (represented by the quickly rising upper quartile), others take a long time (represented by the much slower rise of the median and lower quartile). In other words, R3L-TRPO/DDPG is much more robust to random policy initialization and to the random seed than standard RL methods. This is because R3L is able to use automatically generated demonstrations to initialize RL policy parameters to a region with informative return gradients.

Section Title: CONCLUSION
  CONCLUSION We proposed Rapidly Randomly-exploring Reinforcement Learning (R3L), an exploration paradigm for leveraging planing algorithms to automatically generate successful demonstrations, which can be converted to policies then refined by classic RL methods. We provided theoretical guarantees of R3L finding solutions, as well as sampling complexity bounds. Empirical results show that R3L outperforms classic and intrinsic exploration techniques, requiring only a fraction of exploration samples and achieving better asymptotic performance. As future work, R3L could be extended to real-world problems by leveraging recent advances on bridging the gap between simulation and reality ( Peng et al., 2018 ). Respecting Assumption 2, a policy would first be trained on a simulator and then transferred to the real-world. Exploration in high-dimensional tasks is also challenging as stated in Theorem 3 and confirmed experimentally by increased R3L exploration timesteps. Exploiting external prior knowledge and/or the structure of the problem can benefit exploration in high-dimensional tasks, and help make R3L practical for problems such as Atari games. Lastly, recent advances in RRT (Chiang et al., 2019) and learning from demonstration ( Torabi et al., 2018 ) could also improve R3L. Under review as a conference paper at ICLR 2020

```
