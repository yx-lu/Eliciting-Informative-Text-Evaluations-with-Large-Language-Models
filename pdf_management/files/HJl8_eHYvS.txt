Title:
```
Published as a conference paper at ICLR 2020 DISCRIMINATIVE PARTICLE FILTER REINFORCEMENT LEARNING FOR COMPLEX PARTIAL OBSERVATIONS
```
Abstract:
```
Deep reinforcement learning is successful in decision making for sophisticated games, such as Atari, Go, etc. However, real-world decision making often requires reasoning with partial information extracted from complex visual observations. This paper presents Discriminative Particle Filter Reinforcement Learning (DPFRL), a new reinforcement learning framework for complex partial observations. DPFRL encodes a differentiable particle filter in the neural network policy for explicit reasoning with partial observations over time. The particle filter maintains a belief using learned discriminative update, which is trained end-to-end for decision making. We show that using the discriminative update instead of standard generative models results in significantly improved performance, especially for tasks with complex visual observations, because they circumvent the difficulty of modeling complex observations that are irrelevant to decision making. In addition, to extract features from the particle belief, we propose a new type of belief feature based on the moment generating function. DPFRL outperforms state-of-the-art POMDP RL models in Flickering Atari Games, an existing POMDP RL benchmark, and in Natural Flickering Atari Games, a new, more challenging POMDP RL benchmark introduced in this paper. Further, DPFRL performs well for visual navigation with real-world data in the Habitat environment. The code is available online 1 . 1 https://github.com/Yusufma03/DPFRL
```

Figures/Tables Captions:
```
Figure 1: (a) DPFRL tracks a learned latent belief with a differentiable particle filter and learns a policy conditioned on the particle belief. (b) Generative models learn p(o | ht), the distribution of observations o given the latent state ht. The particle filter then evaluates the probability of an observed ot to get a compatibility measure of ot and ht. (c) The compatibility function directly predicts a compatibility measure of ot and ht using a learned neural network f obs (ot, ht).
Figure 2: DPFRL Network. In DPFRL, latent particles {(h i t , w i t )} K i=1 are maintained by a differentiable particle filter algorithm, which includes observation-conditioned transition function ftrans, discriminative compatibility function f obs , and soft-resampling. The policy and value function is conditioned on the belief, which is summarized by the mean particleht, and m moment generating function features, M 1:m t .
Figure 3: Mountain Hike Task. An agent navigates on the map from the start position (white dot) to the goal (green dot with the shaded area as the threshold). Par- tial observation is introduced by a Gaussian noise and appended with a long noise vector of length l. The reward r(x, y) for position (x, y) is given by the heat map.
Figure 4: Results for Mountain Hike where useful observations are concatenated with a noise vector of length l.
Figure 5: Partially Observable Atari Games. In Flickering Atari Games frames are randomly dropped and replaced with a blank frame. In Natural Flickering Atari Games the background is replaced with a random video stream and the Atari components of the image are randomly dropped.
Table 1: Results for Flickering Atari Games and Natural Flickering Atari Games
Table 2: Visual Navigation Results
Table 3: Ablation Study Results for the Natural Flickering Atari Games
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Deep Reinforcement Learning (DRL) has attracted significant interest, with applications ranging from game playing ( Mnih et al., 2013 ;  Silver et al., 2017 ) to robot control and visual navigation ( Levine et al., 2016 ;  Kahn et al., 2018 ;  Savva et al., 2019 ). However, natural real-world environments remain challenging for current DRL methods ( Arulkumaran et al., 2017 ), in part because they require (i) reasoning in a partially observable environment and (ii) reasoning with complex observations, such as visually rich images. Consider, for example, a robot, navigating in an indoor environment, with a camera for visual perception. To determine its own location and a traversable path, the robot must extract from image pixels relevant geometric features, which often coexist with irrelevant visual features, such as wall textures, shadows, etc. Further, the task is partially observable: a single image at the current time does not provide sufficient features for localization, and the robot must integrate information from the history of visual inputs received. The partially observable Markov decision process (POMDP) provides a principled general framework for decision making under partial observability. Solving POMDPs requires tracking a sufficient statistic of the action-observation history, e.g., the posterior distribution of the states, called the belief. Most POMDP reinforcement learning (RL) methods summarize the history into a vector using a recurrent neural network (RNN) ( Hausknecht & Stone, 2015 ;  Zhu et al., 2018 ). RNNs are model-free generic function approximators. Without appropriate structural priors, they need large amounts of training data to learn to track a complex belief well. Model-based DRL methods aim to reduce the sample complexity by learning a model together with a policy. In particular, to deal with partial observability,  Igl et al. (2018)  recently proposed DVRL, which learns a generative observation model embedded into the policy through a Bayes filter. Since the Bayes filter tracks the belief explicitly, DVRL performs much better than generic RNNs under partial observability. However, a Bayes filter normally assumes a generative observation model, that defines the probability p(o | h t ) of receiving an observation o = o t given the latent state h t (Fig. 1b). Learning this model can be very challenging since it requires modeling all observation features, including features irrelevant for RL. When o is an image, p(o | h t ) is a distribution over all possible images. This means, e.g., to navigate in a previously unseen environment, we need to learn the distribution of all possible environments with their visual appearance, lighting condition, etc. - a much harder task than learning to extract features relevant to navigation, e.g., the traversable space. We introduce the Discriminative Particle Filter Reinforcement Learning (DPFRL), a POMDP RL method that learns to explicitly track a belief over the latent state without a generative observation model, and make decisions based on features of the belief (Fig. 1a). DPFRL approximates the belief by a set of weighted learnable latent particles {(h i t , w i t )} K i=1 , and it tracks this particle belief by a non- parametric Bayes filter algorithm, an importance weighted particle filter, encoded as a differentiable computational graph in the neural network architecture. The importance weighted particle filter applies discriminative update to the belief with an observation-conditioned transition model and a discriminative state-observation compatibility function (serving as the importance weights), both of which are learnable neural networks trained end-to-end. By using these update functions instead of the transition and observation models of the standard particle filter, DPFRL sidesteps the difficulty of learning a generative observation model (Fig. 1b). The model is discriminative in the sense that the compatibility function, f obs (o t , h t ), as shown in Fig. 1c, while playing an analogue role as p(o t | h t ), is not required to directly represent a normalized distribution over observations; and through end-to- end training it only needs to model observation features relevant for the RL task. Finally, to summarize the particle belief for the policy, we introduce novel learnable features based on Moment-Generating Functions (MGFs) ( Bulmer, 1979 ). MGF features are computationally efficient and permutation invariant, and they can be directly optimized to provide useful higher-order moment information for learning a policy. MGF features could be also used as learned features of any empirical distribution in applications beyond RL. We evaluate DPFRL on a range of POMDP RL domains: a continuous control task from  Igl et al. (2018) , Flickering Atari Games ( Hausknecht & Stone, 2015 ), Natural Flickering Atari Games, a new domain with more complex observations that we introduce, and the Habitat visual navigation domain using real-world data ( Savva et al., 2019 ). DPFRL outperforms state-of-the-art POMDP RL methods in most cases. Results show that belief tracking with a particle filter is effective for handling partial observability, and the discriminative update and MGF-based belief features allow for complex observations.

Section Title: RELATED WORK
  RELATED WORK Real-world decision-making problems are often formulated as POMDPs. POMDPs are notori- ously hard to solve; in the worst case, they are computationally intractable ( Papadimitriou & Tsit- siklis, 1987 ). Approximate POMDP solvers have made dramatic progress in solving large-scale POMDPs ( Kurniawati et al., 2008 ). Particle filters have been widely adopted as a belief tracker for POMDP solvers ( Silver & Veness, 2010 ;  Somani et al., 2013 ) having the flexibility to model complex and multi-modal distributions, unlike Gaussian and Kalman filters. However, predefined model and state representations are required for these methods (see e.g.  Bai et al. (2015) ). Given the advances in generative neural network models, various neural models have been proposed for belief tracking ( Chung et al., 2015 ;  Maddison et al., 2017 ;  Le et al., 2018 ;  Naesseth et al., 2018 ). DVRL ( Igl et al., 2018 ) uses a Variational Sequential Monte-Carlo method ( Naesseth et al., 2018 ), similar to the particle filter we use, for belief tracking in RL. This gives better belief tracking capabilities, but as we demonstrate in our experiments, generative modeling is not robust in complex observation spaces with high-dimensional irrelevant observation. More powerful generative models, e.g., DRAW ( Gregor et al., 2015 ), could be considered to improve generative observation modeling; however, evaluating a complex generative model for each particle would significantly increase the computational cost and optimization difficulty. Learning a robust latent representation and avoiding reconstructing observations are of great interest for RL ( Oord et al., 2018 ;  Guo et al., 2018 ;  Hung et al., 2018 ;  Gregor et al., 2019 ;  Gelada et al., 2019 ). Discriminative RNNs have also been widely used for belief approximation in partially observable domains ( Bakker, 2002 ;  Wierstra et al., 2007 ;  Foerster et al., 2016 ). The latent representation is directly optimized for the policy p(a|h t ) that skips observation modeling. For example,  Hausknecht & Stone (2015)  and  Zhu et al. (2018)  tackle partially observable Flickering Atari Games by extending DQN ( Mnih et al., 2013 ) with an LSTM memory. Our experiments demonstrate that the additional structure for belief tracking provided by a particle filter can give improved performance in RL. Embedding algorithms into neural networks to allow end-to-end discriminative training has gained attention recently. For belief tracking, the idea has been used in the differentiable histogram filter ( Jon- schkowski & Brock, 2016 ), Kalman filter ( Haarnoja et al., 2016 ) and particle filter ( Karkus et al., 2018 ;  Jonschkowski et al., 2018 ). Further,  Karkus et al. (2017)  combined a learnable histogram filter with the Value Iteration Network ( Tamar et al., 2016 ) and introduced a learnable POMDP planner, QMDP-net. However, these methods require a predefined state representation and are limited to relatively small state spaces.  Ma et al. (2019)  integrated the particle filter with standard RNNs, e.g., the LSTM, and introduced PF-RNNs for sequence prediction. We build on the work of  Ma et al. (2019)  and demonstrate its advantages for RL with complex partial observations, and extend it with MGF features for improved decision making from particle beliefs. Note that our framework is not specific to PF-RNNs, and could be applied to other differentiable particle filters as well.

Section Title: DISCRIMINATIVE PARTICLE FILTER REINFORCEMENT LEARNING
  DISCRIMINATIVE PARTICLE FILTER REINFORCEMENT LEARNING We introduce DPFRL for reinforcement learning under partial and complex observations. The DPFRL architecture is shown in  Fig. 2 . It has two main components, a discriminatively trained particle filter that tracks a latent belief b t , and an actor network that learns a policy p(a | b t ) given the belief b t .

Section Title: PARTICLE FILTER FOR LATENT BELIEF TRACKING
  PARTICLE FILTER FOR LATENT BELIEF TRACKING

Section Title: Latent State Representation
  Latent State Representation In POMDPs the semantics of states s is typically defined explicitly. State variables may correspond to the position of a robot, configuration of obstacles, etc. In DPFRL, we do not require explicit specification of the state variables, but implicitly represent the state as a vector h of latent variables, that is, the semantics of the state variables are learned instead of being pre-specified. We use a fully differentiable particle filter algorithm to maintain a belief over h. More specifically, we approximate the belief with a set of weighted latent particles b t ≈ {(h i t , w i t )} K i=1 , where {h i t } K i=1 are K latent states learned by policy-oriented training, and {w i t } K i=1 represents the Published as a conference paper at ICLR 2020 corresponding weights. Each latent state h i t stands for a hypothesis in the belief; the set of latent particles provide an approximate representation for the belief.

Section Title: Belief Update
  Belief Update The first step, Eq. 1, takes the transition dynamics into account to update each particle. The second step, Eq. 2, takes the observation into account to reweigh the new particles. Our belief update has a similar structure as the standard particle filter, but we replace the transition model and the observation model with richer functions to make the update more suitable for learning a policy in a partially observable domain. Specifically, the update equations are as follows. Below, we first explain the intuition behind the above updates and the roles of f trans and f obs as compared to the standard transition and observation models. We then derive that above rules from an importance weighed particle filter in Sect. 3.2. Observation-conditioned transition update. Eq. 3 takes a form more general than that in Eq. 2: instead of using the transition dynamics p(h | h i t−1 , a t ) to evolve a particle, we use a more general observation-conditioned transition f trans (h | h i t−1 , a t , o t ). Incorporating the observation allows alle- viating the problem of sampling unlikely particles. In fact, if we take f trans to be p(h | h i t−1 , a t , o t ), then this allows us to skip Eq. 2, and completely avoids sampling particles that are likely consid- ering a t only, but unlikely considering both a t and o t . Of course, in RL we do not have access to p(h | h i t−1 , a t , o t ), and instead f trans is learned. In our implementation, a network first extracts features from o t , they are fed to a gated function following the PF-GRU of  Ma et al. (2019) , which outputs the mean and variance of a normal distribution. Details are in the Appendix. Importance weighting via a compatibility function. Eq. 4 is a relaxed version of Eq. 2: instead of using the observation model p(o t | h i t ) to adjust the particle weights based on their compatibility with the observation, we use a general non-negative compatibility function f obs (h i t , o t ). If the compatibility function is required to satisfy the normalization constraint that o f obs (h, o) is a constant for all h, then it is equivalent to a conditional distribution of o given h. We do not require this, and thus the update loses the probabilistic interpretation in Eq. 2. However, eliminating the need for the normalization constraint allows the compatibility function to be efficiently trained, as we can avoid computing the normalization constant. In addition, since the observation has already been incorporated in Eq. 3, we actually expect that the weights need to be adjusted in a way different from the standard particle filter. In our implementation, f obs (h i t , o t ) is a neural network with a single fully connected layer that takes in a concatenation of h i t and features extracted from o t . The output of the network is interpreted as the log of f obs ; and for numerical stability we perform the weight updates of Eq. 4 in the log-space as well. Note that more complex network architectures could improve the capability of f obs , which we leave to future work.

Section Title: Soft-resampling
  Soft-resampling To avoid particle degeneracy, i.e., most of the particles having a near-zero weight, particle filters typically resample particles. We adopt the soft-resampling strategy of  Karkus et al. (2018) ;  Ma et al. (2019) , that provides approximate gradients for the non-differentiable resampling step. Instead of sampling from p t (i) = w i t , we sample particles {h i t } K i=1 from a softened proposal distribution q(i) = αw i t + (1 − α)1/K, where α is an trade-off parameter. The new weights are derived using importance sampling: w i t = w i t αw i t +(1−α)1/K . We can have the final particle belief as {(h i t , w i t )} K i=1 = Soft-Resampling({(h i t , w i t )} K i=1 ). As a result, f obs can be optimized with global belief information and model shared useful features across multiple time steps. Another related concern is that the particle distribution may collapse to particles with the same latent state. This can be avoided by ensuring that the stochastic transition function f trans has a non-zero variance, e.g., by adding a small constant to the learned variance.

Section Title: Published as a conference paper at ICLR 2020
  Published as a conference paper at ICLR 2020 End-to-end training. In DPFRL the observation-conditioned transition function f trans and the compatibility function f obs are learned. Instead of training for a modeling objective, they are trained end-to-end for the final RL objective, backpropagating gradients through the belief-conditional policy p(a | b t ) and the update steps of the particle filter algorithm, Eq. 3-5.

Section Title: CONNECTION TO IMPORTANCE WEIGHTED PARTICLE FILTER
  CONNECTION TO IMPORTANCE WEIGHTED PARTICLE FILTER Our belief update can be motivated from the following importance weighted particle filter. Learning directly p(h | h, a, o) is generally difficult, but if we have a distribution q(h | h, a, o) that is easy to learn, then we can use importance sampling to update a particle belief. where f = p/q is the importance weight. Consider the case that q(h | h, a, o) is the conditional distribution of a joint distribution q(h , h, a, o) of the form p(h | h, a)q(o | h ). That is, p and q share the same transition dynamics p(h | h, a). Then the importance weight f is a function of h and o only, because This simpler form is exactly the form that we used for f obs in our belief update.

Section Title: DISCRIMINATIVE VS. GENERATIVE MODELING
  DISCRIMINATIVE VS. GENERATIVE MODELING We expect the discriminative compatibility function to be more effective than a generative model for the following reasons. A generative model aims to approximate p(o | h) by learning a function that takes h as input and outputs a parameterized distribution over o. When o is, e.g., an image, this requires approximations, e.g., using pixel-wise Gaussians with learned mean and variance. This model is also agnostic to the RL task and considers all observation features equally, including features irrelevant for filtering and decision making. In contrast, f obs takes o and h as inputs, and estimates the compatibility of o and h for particle filtering directly. This function avoids forming a parametric distribution over o, and the function can be easier to learn. The same functional form is used for the energy-function of energy-based models ( LeCun et al., 2006 ) and in contrastive predictive coding ( Oord et al., 2018 ), with similar benefits. For example, f obs may learn unnormalized likelihoods that are only proportionate to p(o | h) up to a o-dependent value, because after the normalization in Eq. 4, they would give the same belief update as the normalized p(o | h). Further, because f obs is trained for the final RL objective instead of a modeling objective, it may learn a compatibility function that is useful for decision making, but that does not model all observation features and has no proper probabilistic interpretation. While the task-oriented training of discriminative models may improve policy performance for the reasons above, it cannot take advantage of an auxiliary learning signal like the reconstruction objective of a generative model. An interesting line of future work may combine generative models with a compatibility function to simultaneously benefit from both formulations.

Section Title: BELIEF-CONDITIONAL ACTOR NETWORK
  BELIEF-CONDITIONAL ACTOR NETWORK Conditioning a policy directly onto a particle belief is non-trivial. To feed it to the networks, we need to summarize it into a single vector. We introduce a novel feature extraction method for empirical distributions based on Moment- Generating Functions (MGFs). The MGF of an n-dimensional random variable X is given by M X (v) = E[e v X ], v ∈ R n . In statistics, MGF is an alternative specification of its probability dis- tribution ( Bulmer, 1979 ). Since particle belief b t is an empirical distribution, the moment generating function of b t can be denoted as M bt (v) = K i=1 w i t e v h i t . A more detailed background on MGFs is in Appendix A.2.

Section Title: Published as a conference paper at ICLR 2020
  Published as a conference paper at ICLR 2020 In DPFRL, we use the values of the MGF at m learned locations v 1:m as the feature vector of the MGF. The j-th MGF feature is given by M j bt (v j ). For a clean notation, we use M j t in place of M j bt (v j ). We use h t , M 1:m t as features for belief b t , whereh t = K i=1 w i t h i t is the mean particle. The mean particleh t , as the first-order moment, and m additional MGF features, give a summary of the belief characteristics. The number of MGF features, m, controls how much additional information we extract from the belief. We empirically study the influence of MGF features in ablation studies. Compared to  Ma et al. (2019)  that uses the mean as the belief estimate, MGF features provide additional features from the empirical distribution. Compared to DVRL ( Igl et al., 2018 ) that treats the Monte-Carlo samples as a sequence and merges them by an RNN, MGF features are permutation- invariant, computationally efficient and easy to optimize, especially when the particle set is large. Given the features h t , M 1:m t for b t , we compute the policy p(a | b t ) with a policy network π(b t ). We trained with an actor-critic RL algorithm, A2C ( Mnih et al., 2016 ), where a value network V (b t ) is introduced to assist learning. We use small fully-connected networks for π(b t ) and V (b t ) that share the same input b t .

Section Title: EXPERIMENTS
  EXPERIMENTS We evaluate DPFRL in a range of POMDP RL domains with increasing belief tracking and observation modeling complexity. We first use benchmark domains from the literature, Mountain Hike, and 10 different Flickering Atari Games. We then introduce a new, more challenging domain, Natural Flickering Atari Games, that uses a random video stream as the background. Finally we apply DPFRL to a challenging visual navigation domain with RGB-D observations rendered from real-world data. We compare DPFRL with a GRU network, a state-of-the-art POMDP RL method, DVRL, and ablations of the DPFRL architecture. As a brief conclusion, we show that: 1) DPFRL significantly outperforms GRU in most cases because of its explicit structure for belief tracking; 2) DPFRL outperforms the state-of-the-art DVRL in most cases even with simple observations, and its benefit increases dramatically with more complex observations because of DPFRL's discriminative update; 3) MGF features are more effective for summarizing the latent particle belief than alternatives. We train DPFRL and baselines with the same A2C algorithm, and use a similar network architecture and hyperparameters as the orig- inal DVRL implementation. DPFRL and DVRL differ in the particle belief update structure, but they use the same latent particle size dim(h) and the same number of particles K as in the DVRL paper (dim(h) = 128 and K = 30 for Mountain Hike, dim(h) = 256 and K = 15 for Atari games and visual navigation). The effect of the number of particles is discussed in Sect. 4.5. We train all models for the same number of iterations using the RMSProp optimizer ( Tiele- man & Hinton, 2012 ). Learning rates and gradient clipping values are chosen based on a search in the BeamRider Atari game inde- pendently for each model. Further details are in the Appendix. We have not performed additional searches for the network architecture and other hyper-parameters, nor tried other RL algorithm, such as PPO (Schulman et al., 2017), which may all improve our results. All reported results are averages over 3 different random seeds. We plot rewards accumulated in an episode, same as DVRL ( Igl et al., 2018 ). The curves are smoothed over time and averaged over parallel environment executions.

Section Title: MOUNTAIN HIKE
  MOUNTAIN HIKE Mountain Hike was introduced by  Igl et al. (2018)  to demonstrate the benefit of belief tracking for POMDP RL. It is a continuous control problem where an agent navigates on a fixed 20 × 20 map. In the original task, partial observability is introduced by disturbing the agent observation with an additive Gaussian noise. To illustrate the effect of observation complexity in natural environments, we concatenate the original observation vector with a random noise vector. The complexity of the optimal policy remains unchanged, but the relevant information is now coupled with irrelevant observation features. More specifically, the state space and action space in Mountain Hike are defined as S = A = R 2 , where s t = [x t , y t ] and a t = [δx t , δy t ]. Transitions of the agent are stochastic with an additive Gaussian noise: s t+1 = s t + a t + a , where a ∼ N (0, 0.25). The observation space is O = R 2+l , where l is a predefined constant and l = 0 corresponds to the original setting. Observations are o t = [o s t , o n t ], where o s t = s t + s , s ∼ N (0, 1), and o n t ∈ R l is sampled from a uniform distribution U(−10, 10). The reward for each step is given by r t = r(x t , y t ) − 0.01||a t || where r(x t , y t ) is shown in  Fig. 3 . Episodes end after 75 steps. We train models for different settings of the noise vector length l, from l = 0 to l = 100. Results are shown in  Fig. 4 . We observe that DPFRL learns faster than the DVRL and GRU in all cases, including the original setting l = 0. Importantly, as the noise vector length increases, the performance of DVRL and GRU degrades, while DPFRL is unaffected. This demonstrates the ability of DPFRL to track a latent belief without having to explicitly model complex observations.

Section Title: ATARI GAMES WITH PARTIAL OBSERVABILITY
  ATARI GAMES WITH PARTIAL OBSERVABILITY Atari games are one of the most popular benchmark domains for RL methods ( Mnih et al., 2013 ). Their partially observable variants, Flickering Atari Games, have been used to benchmark POMDP RL methods ( Hausknecht & Stone, 2015 ;  Zhu et al., 2018 ;  Igl et al., 2018 ). Here image observations are single frames randomly replaced by a blank frame with a probability of 0.5. The flickering obser- vations introduce a simple form of partial observability. Another variant, Natural Atari Games ( Zhang et al., 2018 ), replaces the simple black background of the frames of an Atari game with a randomly sampled video stream. This modification brings the Atari domain one step closer to the visually rich real-world, in that the relevant information is now encoded in complex observations. As shown by  Zhang et al. (2018) , this poses a significant challenge for RL. We propose a new RL domain, Natural Flickering Atari Games, that involves both challenges: partial observability simulated by flickering frames, and complex observations simulated by random background videos. The background videos increase observation complexity without affecting the decision making complexity, making this a suitable domain for evaluating RL methods with complex observations. We sample the background video from the ILSVRC dataset ( Russakovsky et al., 2015 ). Examples for the BeamRider game are shown in  Fig. 5 . Details are in Appendix B. We evaluate DPFRL for both Flickering Atari Games and Natural Flickering Atari Games. We use the same set of games as  Igl et al. (2018) . To ensure a fair comparison, we take the GRU and DVRL results from the paper for Flickering Atari Games, use the same training iterations as in  Igl et al. (2018) , and we use the official DVRL open source code to train for Natural Flickering Atari Games. Results are summarized in  Table 1 . We highlight the best performance in bold where the difference is statistically significant (p = 0.05). Detailed training curves are in Appendix E. We observe that DPFRL significantly outperforms GRU in almost all games, which indicates the importance of explicit belief tracking, and shows that DPFRL can learn a useful latent belief repre- sentation. Despite the simpler observations, DPFRL significantly outperforms DVRL and achieves state-of-the-art results on 5 out of 10 standard Flickering Atari Games (ChopperCommand, MsPac- man, BeamRider, Bowling, Asteroids), and it performs comparably in 3 other games (Centipede, Frostbite, IceHockey). The strength of DFPRL shows even more clearly in the Natural Flickering Atari Games, where it significantly outperforms DVRL on 7 out of 10 games and performs similarly in the rest. In some games, e.g. in Pong, DPFRL performs similarly with and without videos in the background (15.65 vs. 15.40), while the DVRL performance degrades substantially (-19.78 vs. 18.17). These results show that while the architecture of DPFRL and DVRL are similar, the policy-oriented discriminative update of DPFRL is much more effective for handling complex observations, and the MGF features provide a more powerful summary of the particle belief for decision making. However, on some games, e.g. on ChopperCommand, even DPFRL performance drops significantly when adding background videos. This shows that irrelevant features can make a task much harder, even for a discriminative approach, as also observed by  Zhang et al. (2018) . SPL the validation split and compute the same metrics as in the literature: SPL, success rate, and average rewards. Results are shown in  Table 2 . Further details and results are in Appendix B and E. DPFRL significantly outperforms both DVRL and GRU in this challenging domain. DVRL performs especially poorly, demonstrating the difficulty of learning a generative observation model in realistic, visually rich domains. DPFRL also outperforms the PPO baseline from  Savva et al. (2019) . We note that submissions to the recently organized Habitat Challenge 2019 ( Savva et al., 2019 ), such as ( Chaplot et al., 2019 ), have demonstrated better performance than the PPO baseline (while our results are not directly comparable because of the closed test set of the competition). However, these approaches rely on highly specialized structures, such as 2D mapping and 2D path planning, while we use the same generic network as for Atari games. Future work may further improve our results by adding a task-specific structure to DPFRL or training with PPO instead of A2C.

Section Title: ABLATION STUDY
  ABLATION STUDY We conduct an extensive ablation study on the Natural Flickering Atari Games to understand the influence of each DPFRL component. The results are presented in  Table 3 . The discriminative compatibility function is more effective than a generative observation function. DPFRL-generative replaces the discriminative compatibility function of DPFRL with a generative observation function, where grayscale image observations are modeled by pixel-wise Gaussian distributions with learned mean and variance. Unlike DVRL, DPFRL-generative only differs from DPFRL in the parameterization of the observation function, the rest of the architecture and training loss remains the same. In most cases, the performance for DPFRL-generative degrades significantly compared to DPFRL. These results are aligned with our earlier observations, and indicate that the compatibility function is capable of extracting the relevant information from complex observations without having to learn a more complex generative model.

Section Title: More particles perform better
  More particles perform better DPFRL with 1 particle performs poorly on most of the tasks (DPFRLL- P1). This indicates that a single latent state is insufficient to represent a complex latent distribution that is required for the task, and that more particles may improve performance.

Section Title: MGF features are useful
  MGF features are useful We compare DPFRL using MGF features with DPFRL-mean, that only uses the mean particle; and with DPFRL-GRUmerge, that uses a separate RNN to summarize the belief, similar to DVRL. Results show that DPFRL-mean does not work as well as the standard DPFRL, especially for tasks that may need complex belief tracking, e.g., Pong. This can be attributed to the more rich belief statistics provided by MGF features, and that they do not constrain the learned belief representation to be always meaningful when averaged. Comparing to DPFRL-GRUmerge shows that MGF features generally perform better. While an RNN may learn to extract useful features from the latent belief, optimizing the RNN parameters is harder, because they are not permutation invariant to the set of particles and they result in a long backpropagation chain.

Section Title: CONCLUSION
  CONCLUSION We have introduced DPFRL, a framework for POMDP RL in natural environments. DPFRL combines the strength of Bayesian filtering and end-to-end RL: it performs explicit belief tracking with Published as a conference paper at ICLR 2020 learnable particle filters optimized directly for the RL policy. DPFRL achieved state-of-the-art results on POMDP RL benchmarks from prior work, Mountain Hike and a number of Flickering Atari Games. Further, it significantly outperformed alternative methods in a new, more challenging domain, Natural Flickering Atari Games, as well as for visual navigation using real-world data. We have proposed a novel MGF feature for extracting statistics from an empirical distribution. MGF feature extraction could be applied beyond RL, e.g., for general sequence prediction. DPFRL does not perform well in some particular cases, e.g., DoubleDunk. While our task-oriented discriminative update are less susceptible to complex and noisy observations than a generative model, they do not benefit from an additional learning signal that could improve sample efficiency, e.g., through a reconstruction loss. Future work may combine a generative observation model with the discriminative update in the DPFRL framework.

Section Title: ACKNOWLEDGEMENT
  ACKNOWLEDGEMENT

```
