Title:
```
Under review as a conference paper at ICLR 2020 DATA VALUATION USING REINFORCEMENT LEARNING
```
Abstract:
```
Quantifying the value of data is a fundamental problem in machine learning. Data valuation has multiple important use cases: (1) building insights about the learning task, (2) domain adaptation, (3) corrupted sample discovery, and (4) robust learn- ing. To adaptively learn data values jointly with the target task predictor model, we propose a meta learning framework which we name Data Valuation using Re- inforcement Learning (DVRL). We employ a data value estimator (modeled by a deep neural network) to learn how likely each datum is used in training of the pre- dictor model. We train the data value estimator using a reinforcement signal of the reward obtained on a small validation set that reflects performance on the target task. We demonstrate that DVRL yields superior data value estimates compared to alternative methods across different types of datasets and in a diverse set of appli- cation scenarios. The corrupted sample discovery performance of DVRL is close to optimal in many regimes (i.e. as if the noisy samples were known apriori), and for domain adaptation and robust learning DVRL significantly outperforms state-of-the-art by 14.6% and 10.8%, respectively.
```

Figures/Tables Captions:
```
Figure 1: Block diagram of the DVRL framework for training. A batch of training samples is used as the input to the data value estimator (with shared parameters across the batch) and the output corre- sponds to selection probabilities: w i = h φ (x i , y i ) of a multinomial distribution. The sampler, based on this multinomial distribution, returns the selection vector s = (s 1 , ..., s Bs ) where s i ∈ {0, 1} and P (s i = 1) = w i . The target task predictor model is trained only using the samples with selection vector s i = 1, using conventional gradient-descent optimization. The selection probabilities w i rank the samples according to their importance - these are used as data values. The loss of the predic- tor model is evaluated on a small validation set, which is compared to the moving average of the previous losses (δ) to determine the reward. Finally, the reinforcement signal guided by this reward updates the data value estimator. Block diagrams for inference are shown in Appendix A.
Figure 2: Performance after removing the most (marked with ×) and least (marked with ) impor- tant samples according to the estimated data values in a conventional supervised learning setting.
Figure 3: Prediction performance after removing the most (marked with ×) and least (marked with ) important samples according to the estimated data values with 20% noisy label ratio. Additional results on Blog, HAM 10000, and CIFAR-10 datasets can be found in Appendix C.3. The prediction performance is lower than state of the art due to a smaller training set size and the introduced noise.
Figure 4: Discovering corrupted samples in three datasets with 20% noisy label ratio. 'Optimal' saturates at 20%, perfectly assigning the lowest data value scores to the samples with noisy labels. 'Random' does not introduce any knowledge on distinguishing clean vs. noisy labels, and thus the fraction of discovered corrupt samples is proportional to the amount of inspection. More results on Adult, Fashion-MNIST and Flower datasets are in Appendix C.4. Komodakis, 2016), trained on CIFAR-10 and CIFAR-100 datasets. Additional results on other image datasets are in Appendix C.1, and results on robust learning with noisy features are in Appendix C.2.
Figure 5: Number of validation samples needed for DVRL. Discovering corrupted samples in three datasets (Adult, Blog and Fashion MNIST) with various number of validation samples. X-axis represents the fraction of inspected data and y-axis is the fraction of discovered corrupted samples. On Adult and Fashion-MNIST datasets, DVRL needs 13% and 14% of inspected samples to identify 50% of the corrupted samples respectively - merely 3% and 4% more than the optimal cases.
Table 1: Robust learning with noisy labels. Test accuracy for ResNet-32 and WideResNet-28-10 on CIFAR-10 and CIFAR-100 datasets with 40% of Uniform and Background noise on labels. As shown in Table 1, DVRL outperforms other robust learning methods in all cases. The perfor- mance improvements with DVRL are larger with Uniform noise. Learning to Reweight loses 7.16% and 13.21% accuracy compared to the optimal case (Zero Noise); on the other hand, DVRL only loses 5.06% and 7.99% accuracy for CIFAR-10 and CIFAR-100 respectively with Uniform noise.
Table 2: Domain adaptation setting showing target accuracy. Baseline represents the predictor model which is naively trained on the training set with equal treatment of all training samples.
Table 3: Performance of Baseline and DVRL in 3 different settings with 2 different predictor models on the Rossmann Store Sales dataset. Metric is Root Mean Squared Percentage Error (RMSPE, lower the better). We use 79% of the data as training, 1% as validation, and 20% as testing. DVRL outperforms Baseline in all settings.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Data is an essential ingredient in machine learning. Machine learning models are well-known to improve when trained on large-scale and high-quality datasets (Hestness et al., 2017; Najafabadi et al., 2015). However, collecting such large-scale and high-quality datasets is costly and challeng- ing. One needs to determine the samples that are most useful for the target task and then label them correctly. Recent work (Toneva et al., 2019) suggests that not all samples are equally useful for training, particularly in the case of deep neural networks. In some cases, similar or even higher test performance can be obtained by removing a significant portion of training data, i.e. low-quality or noisy data may be harmful (Ferdowsi et al., 2013; Frenay & Verleysen, 2014). There are also some scenarios where train-test mismatch cannot be avoided because the training dataset only exists for a different domain. Different methods (Ngiam et al., 2018; Zhu et al., 2019) have demonstrated the importance of carefully selecting the most relevant samples to minimize this mismatch. Accurately quantifying the value of data has a great potential for improving model performance for real-world training datasets which commonly contain incorrect labels, and where the input samples differ in relatedness, sample quality, and usefulness for the target task. Instead of treating all data samples equally, lower priority can be assigned for a datum to obtain a higher performance model - for example in the following scenarios: 1. Incorrect label (e.g. human labeling errors). 2. Input comes from a different distribution (e.g. different location or time). 3. Input is noisy or low quality (e.g. noisy capturing hardware). 4. Usefulness for target task (label is very common in the training dataset but not as common in the testing dataset). In addition to improving performance in such scenarios, data valuation also enables many new use cases. It can suggest better practices for data collection, e.g. what kinds of additional data would the model benefit the most from. For organizations that sell data, it determines the correct value-based pricing of data subsets. Finally, it enables new possibilities for constructing very large-scale training datasets in a much cheaper way, e.g. by searching the Internet using the labels and filtering away less valuable data.

Section Title: Under review as a conference paper at ICLR 2020
  Under review as a conference paper at ICLR 2020 How does one evaluate the value of a single datum? This is a crucial and challenging question. It is straightforward to address at the full dataset granularity: one could naively train a model on the entire dataset and use its prediction performance as the value. However, evaluating the value of each datum is far more difficult, especially for complex models such as deep neural networks that are trained on large-scale datasets. In this paper, we propose a meta learning-based data valuation method which we name Data Valuation using Reinforcement Learning (DVRL). Our method inte- grates data valuation with the training of the target task predictor model. DVRL determines a reward by quantifying the performance on a small validation set, and uses it as a reinforcement signal to learn the likelihood of each datum being using in training of the predictor model. In a wide range of use cases, including domain adaptation, corrupted sample discovery and robust learning, we demon- strate significant improvements compared to permutation-based strategies (such as Leave-one-out and Influence Function (Koh & Liang, 2017)) and game theory-based strategies (such as Data Shap- ley (Ghorbani & Zou, 2019)). The main contributions can be summarized as follows: 1. We propose a novel meta learning framework for data valuation that is jointly optimized with the target task predictor model. 2. We demonstrate multiple use cases of the proposed data valuation framework and show DVRL significantly outperforms competing methods on many image, tabular and language datasets. 3. Unlike previous methods, DVRL is scalable to large datasets and complex models, and its com- putational complexity is not directly dependent on the size of the training set.

Section Title: RELATED WORK
  RELATED WORK Data valuation: A commonly-used method for data valuation is leave-one-out (LOO). It quantifies the performance difference when a specific sample is removed and assigns it as that sample's data value. The computational cost is a major concern for LOO - it scales linearly with the number of training samples which means its cost becomes prohibitively high for large-scale datasets and com- plex models. In addition, there are fundamental limitations in the approximation. For example, if there are two exactly equivalent samples, LOO underestimates the value of that sample even though that sample may be very important. The method of Influence Function (Koh & Liang, 2017) was proposed to approximate LOO in a computationally-efficient manner. It uses the gradient of the loss function with small perturbations to estimate the data value. In order to compute the gradient, Hes- sian values are needed; however these are prohibitively expensive to compute for neural networks. Approximations for Hessian computations are possible, although they generally result in perfor- mance limitations. From data quality assessment perspective, the method of Influence Function inherits the major limitations of LOO. Data Shapley (Ghorbani & Zou, 2019) is another relevant work. Shapley values are motivated by game theory (Shapley, 1953) and are commonly used in feature attribution problems such as relating predictions to input features (Lundberg & Lee, 2017). For Data Shapley, the prediction performance of all possible subsets is considered and the marginal performance improvement is used as the data value. The computational complexity for computing the exact Shapley value is exponential with the number of samples. Therefore, Monte Carlo sampling and gradient-based estimation are used to approximate them. However, even with these approximations, the computational complexity still re- mains high (indeed much higher than LOO) due to re-training for each test combination. In addition, the approximations may result in fundamental limitations in data valuation performance - e.g. with Monte Carlo approximation, the ratio of tested combinations compared to all possible combinations decreases exponentially. Moreover, in all the aforementioned methods data valuation is decoupled from predictor model training, which limits the performance due to lack of joint optimization.

Section Title: Meta learning-based adaptive learning
  Meta learning-based adaptive learning There are relevant studies that utilize meta learning for adaptive weight assignment while training for various use cases such as robust learning, domain adaptation, and corrupted sample discovery. ChoiceNet (Choi et al., 2018) explicitly models output distributions and uses the correlations of the output to improve robustness. Xue et al. (2019) esti- mates uncertainty of predictions to identify the corrupted samples. Li et al. (2019) combines meta learning with standard stochastic gradient update with generated synthetic noise for robust learn- ing. Shen & Sanghavi (2019) alternates the processes of selecting the samples with low loss and model training to improve robustness. Shu et al. (2019) uses neural networks to model the rela- tionship between current loss and the corresponding sample weights, and utilizes a meta-learning Under review as a conference paper at ICLR 2020 framework for robust weight assignment. Köhler et al. (2019) estimates the uncertainty to discover the noisy labeled data and relabels mislabeled samples to improve the prediction performance of the predictor model. Gold Loss Correction (Hendrycks et al., 2018) uses a clean validation set to recover the label corruption matrix to re-train the predictor model with corrected labels. Learning to Reweight (Ren et al., 2018) proposes a single gradient descent step guided with validation set per- formance to reweight the training batch. Domain Adaptive Transfer Learning (Ngiam et al., 2018) introduces importance weights (based on the prior label distribution match) to scale the training sam- ples for transfer learning. MentorNet (Jiang et al., 2018) proposes a curriculum learning framework that learns the order of mini-batch for training of the corresponding predictor model. Our method, DVRL, differs from the aforementioned as it directly models the value of the data using learnable neural networks (which we refer to as a data value estimator). To train the data value estimator, we use reinforcement learning with a sampling process. DVRL is model-agnostic and even applicable to non-differentiable target objectives. Learning is jointly performed for the data value estimator and the corresponding predictor model, yielding superior results in all of the use cases we consider.

Section Title: PROPOSED METHOD
  PROPOSED METHOD

Section Title: Framework
  Framework label space Y, e.g. ∆[0, 1] c for classification where c is the number of classes and ∆ is the simplex. We consider a disjoint testing dataset D t = {(x t j , y t j )} M j=1 ∼ P t where the target distribution P t does not need to be the same with the training distribution P. We assume an availability of a (often small 1 ) validation dataset D v = {(x v k , y v k )} L k=1 ∼ P t that comes from the target distribution P t . The DVRL method (overview in  Fig. 1 ) consists of two learnable functions: (1) the target task predictor model f θ , (2) data value estimator model h φ . The predictor model f θ : X → Y is trained to minimize a certain weighted loss function L f (e.g. Mean Squared Error (MSE) for regression or cross entropy for classification) on training set D: f θ can be any trainable function with parameters θ, such as a neural network. The data value esti- mator model h φ : X · Y → [0, 1], on the other hand, is optimized to output weights that determine Under review as a conference paper at ICLR 2020 the distribution of selection likelihood of the samples to train the predictor model f θ . We formulate the corresponding optimization problem as: where h φ (x, y) represents value of the training sample (x, y). The data value estimator is also a trainable function, such as a neural network. Similar to L f , we use MSE or cross entropy for L h .

Section Title: Training
  Training To encourage exploration based on uncertainty, we model training sample selection stochastically. Let w = h φ (x, y) denote the probability that (x, y) is used to train the predictor model f θ . h φ (D) = {h φ (x i , y i )} N i=1 is the probability distribution for inclusion of each training sample. s ∈ {0, 1} N is a binary vector that represents the selected samples. If s i = 1/0, (x i , y i ) is selected/not selected for training the predictor model. π φ (D, s) = N i=1 h φ (x i , y i ) si · (1 − h φ (x i , y i )) 1−si is the probability that certain selection vector s is selected based on h φ (D). We assign the outputs of the data value estimator model, w = h φ (x, y), as the data values. We can use the data values to rank the dataset samples (e.g. to determine a subset of the training dataset) and to do sample-adaptive training (e.g. for domain adaptation). The predictor model can be trained using standard stochastic gradient descent because it is differen- tiable with respect to the input. However, gradient descent-based optimization cannot be used for the data value estimator because the sampling process is non-differentiable. There are multiple ways to handle the non-differentiable optimization bottleneck, such as Gumbel-softmax (Jang et al., 2017) or stochastic back-propagation (Rezende et al., 2014). In this paper, we consider reinforcement learning instead, which directly encourages exploration of the policy towards the optimal solution of Eq. (2). We use the REINFORCE algorithm (Williams, 1992) to optimize the policy gradients, with the rewards obtained from a small validation set that approximates performance on the target task. For the loss functionl(φ): we directly compute the gradient ∇ φl (φ) as: To improve the stability of the training, we use the moving average of the previous loss (δ), with a window size (T ), as the baseline for the current loss. The pseudo-code is shown in Algorithm 1.

Section Title: Computational complexity
  Computational complexity DVRL models the mapping between an input and its value with a learnable function. The training time of DVRL is not directly proportional to the dataset size, but rather dominated by the required number of iterations and per-iteration complexity in Algorithm 1. One way to minimize the computational overhead is to use pre-trained models to initialize the Under review as a conference paper at ICLR 2020 Algorithm 1 Pseudo-code of DVRL training 1: Inputs: Learning rates α, β > 0, mini-batch size B p , B s > 0, inner iteration count N I > 0, moving average window T > 0, training dataset D, validation dataset 2: Initialize parameters θ, φ, moving average δ = 0 3: while until convergence do Update the data value estimator model network parameters φ predictor networks at each iteration. Unlike alternative methods like Data Shapley, we demonstrate the scalability of DVRL to large-scale datasets such as CIFAR-100, and complex models such as ResNet-32 (He et al., 2016) and WideResNet-28-10 (Zagoruyko & Komodakis, 2016). Instead of being exponential in terms of the dataset size, the training time overhead DVRL is only twice of conventional training. Please see Appendix D for further analysis on learning dynamics of DVRL and Appendix B for additional computational complexity discussions.

Section Title: EXPERIMENTS
  EXPERIMENTS We evaluate data value estimation quality of DVRL on multiple types of dataset and use cases.

Section Title: Benchmark methods
  Benchmark methods We consider the following benchmarks: (1) Randomly-assigned values (Random), (2) Leave-one-out (LOO), (3) Data Shapley Value (Data Shapley) (Ghorbani & Zou, 2019). For some experiments, we also compare with (4) Learning to Reweight (Ren et al., 2018), (5) MentorNet (Jiang et al., 2018), and (6) Influence Function (Koh & Liang, 2017).

Section Title: Datasets
  Datasets We consider 12 public datasets (3 public tabular datasets, 7 public image datasets, and 2 public language datasets) to evaluate DVRL in comparison to multiple benchmark methods. 3 public tabular datasets are (1) Blog, (2) Adult, (3) Rossmann; 7 public image datasets are (4) HAM 10000, (5) MNIST, (6) USPS, (7) Flower, (8) Fashion-MNIST, (9) CIFAR-10, (10) CIFAR-100; 2 public language datasets are (11) Email Spam, (12) SMS Spam. Details can be found in the hyper-links.

Section Title: Baseline predictor models
  Baseline predictor models We consider various machine learning models as the baseline pre- dictor model to highlight the proposed model-agnostic data valuation framework. For Adult and Blog datasets, we use LightGBM (Ke et al., 2017), and for Rossmann dataset, we use XGBoost and multi-layer perceptrons due to their superior performance on the tabular datasets. For Flower, HAM 10000, and CIFAR-10 datasets, we use Inception-v3 with top-layer fine-tuning (pre-trained on ImageNet, (Szegedy et al., 2016)) as the baseline predictor model. For Fashion-MNIST, MNIST, and USPS datasets, we use multinomial logistic regression, and for Email and SMS datasets, we use Naive Bayes model. We also use ResNet-32 (He et al., 2016) and WideResNet-28-10 (Zagoruyko & Komodakis, 2016) as the baseline models for CIFAR-10 and CIFAR-100 datasets in Section 4.3 to demonstrate the scalability of DVRL. For data value estimation network, we use multi-layer per- ceptrons with ReLU activation as the base architecture. The number of layers and hidden units are optimized with cross-validation.

Section Title: Under review as a conference paper at ICLR 2020
  Under review as a conference paper at ICLR 2020

Section Title: Experimental details
  Experimental details In all experiments, we use Standard Normalizer to normalize the entire fea- tures to have zero mean and one standard deviation. We transform categorical variables into one-hot encoded embeddings. We set the inner iteration count (N I =200) for the predictor network, moving average window (T =20), and mini-batch size (B p =256) for the predictor network and mini-batch size (B s =2000) for the DVE network (large batch size often improves the stability of the reinforce- ment learning model training (McCandlish et al., 2018)). We set the learning rate to 0.01 (β) for the data value estimator (DVE) and 0.001 (α) for the predictor network. As the DVE architecture, for tabular datasets, we use 5-layer perceptrons with 100 hidden units and ReLU; and for image datasets, we use 5-layer perceptrons with 100 hidden units and ReLU on top of the CNN-based architecture used for the predictor network (such as ResNet-32 or WideResNet-28-10 in  Table 1 ). In order to provide further informative signal to DVE, we propose to use an additional input of the difference between the predictions of a separate predictive model (fined-tuned or trained from scratch on the validation set) for the training samples and the original training labels. We simply concatenate this additional input to the hidden states of DVE network. Intuitively, if the training label is corrupted, the additional input would be high; thus, this could be an important signal for DVE to assign low value to this sample. Ablation study for the variants of DVRL can be found in the Appendix C.6.

Section Title: REMOVING HIGH/LOW VALUE SAMPLES
  REMOVING HIGH/LOW VALUE SAMPLES Removing low value samples from the training dataset can improve the predictor model perfor- mance, especially in the cases where the training dataset contains corrupted samples. On the other hand, removing high value samples, especially if the dataset is small, would decrease the perfor- mance significantly. Overall, the performance after removing high/low value samples is a strong indicator for the quality of data valuation. Initially, we consider the conventional supervised learning setting, where all training, validation and testing datasets come from the same distribution (without sample corruption or domain mismatch). We use two tabular datasets (Adult and Blog) with 1,000 training samples and one image dataset (Flower) with 2,000 training samples. 2 We use 400 validation samples for tabular datasets and 800 validation samples for the image dataset. Then, we report the prediction performance on the disjoint testing set after removing the high/low value samples based on the estimated data values. As shown in  Fig. 2 , even in the absence of sample corruption or domain mismatch, DVRL can marginally improve the prediction performance after removing some portion of the least important samples. Using only ∼60%-70% of the training set (the highest valued samples), DVRL can obtain a similar performance compared to training on the entire dataset. After removing a small portion (10%-20%) of the most important samples, the prediction performance significantly degrades which indicates the importance of the high valued samples. Qualitatively looking at these samples, we ob- Under review as a conference paper at ICLR 2020 serve them to typically be representative of the target task which can be insightful. Overall, DVRL shows the fastest performance degradation after removing the most important samples and the slow- est performance degradation after removing the least important samples in most cases, underlining the superiority of DVRL in data valuation quality compared to competing methods. Next, we focus on the setting of removing high/low value samples in the presence of label noise in the training data. We consider three image datasets: Fashion-MNIST, HAM 10000, and CIFAR- 10. As noisy samples hurt the performance of the predictor model, an optimal data value estimator with a clean validation dataset should assign lowest values to the noisy samples. With the removal of samples with noisy labels ('Least' setting), the performance should either increase, or at least decrease much slower, compared to removal of samples with correct labels ('Most' setting). In this experiment, we introduce label noise to 20% of the samples by replacing true labels with random labels. As can be seen in Fig. 10, for all data valuation methods the prediction performance tends to first slowly increase and then decrease in the 'Least' setting; and tends to rapidly decrease in the 'Most' setting. Yet, DVRL achieves the slowest performance decrease in 'Least' setting and fastest performance decrease in the 'Most' setting, reflecting its superiority in data valuation.

Section Title: CORRUPTED SAMPLE DISCOVERY
  CORRUPTED SAMPLE DISCOVERY There are some scenarios where training samples may contain corrupted samples, e.g. due to cheap label collection methods. An automated corrupted sample discovery method would be highly ben- eficial for distinguishing samples with clean vs. noisy labels. Data valuation can be used in this setting by having a small clean validation set to assign low data values to the potential samples with noisy labels. With an optimal data value estimator, all noisy labels would get the lowest data values. We consider the same experimental setting with the previous subsection with 20% noisy label ratio on 6 datasets.  Fig. 4  shows that DVRL consistently outperforms all benchmarks (Data Shapley, LOO and Influence Function). The trend of noisy label discovery for DVRL can be very close to optimal (as if we perfectly knew which samples have noisy labels), particularly for the Adult, CIFAR-10 and Flower datasets. To highlight the stability of DVRL, we provide the confidence intervals of DVRL performance on the corrupted sample discovery in Appendix E.

Section Title: ROBUST LEARNING WITH NOISY LABELS
  ROBUST LEARNING WITH NOISY LABELS In this section, we consider how reliably DVRL can learn with noisy data in an end-to-end way, without removing the low-value samples as in the previous section. Ideally, noisy samples should get low data values as DVRL converges and a high performance model can be returned. To compare DVRL with two recently-proposed benchmarks: MentorNet (Jiang et al., 2018) and Learning to Reweight (Ren et al., 2018) for this use case, we focus on two complex deep neural networks as the baseline predictor models, ResNet-32 (He et al., 2016) and WideResNet-28-10 (Zagoruyko & Under review as a conference paper at ICLR 2020 We consider the same experimental setting from Ren et al. (2018) on CIFAR-10 and CIFAR-100 datasets. For the first experiment, we use WideResNet-28-10 as the baseline predictor model and apply 40% of label noise uniformly across all classes. We use 1,000 clean (noise-free) samples as the validation set and test the performance on the clean testing set. For the second experiment, we use ResNet-32 as the baseline predictor model and apply 40% background noise (same-class noise to the 40% of the samples). In this case, we only use 10 clean samples per class as the validation set. We consider five additional benchmarks: (1) Validation Set Only - which only uses clean validation set for training, (2) Baseline - which only uses noisy training set for training, (3) Baseline + Fine- tuning - which is initialized with the trained baseline model on the noisy training set and fine-tuned on the clean validation set, (4) Clean Only (60% data) - which is trained on the clean training set after removing the training samples with flipped labels, (5) Zero Noise - which uses the original noise-free training set for training (100% clean training data). We exclude Data Shapley and LOO in this experiment due to their prohibitively-high computational complexities.

Section Title: DOMAIN ADAPTATION
  DOMAIN ADAPTATION In this section, we consider the scenario where the training dataset comes from a substantially dif- ferent distribution from the validation and testing sets. Naive training methods (i.e. equal treatment of all training samples) often fail in this scenario (Ganin et al., 2016; Glorot et al., 2011). Data valuation is expected to be beneficial for this task by selecting the samples from the training dataset that best match the distribution of the validation dataset. We initially focus on the three cases from Ghorbani & Zou (2019), shown in  Table 2 . (1) uses Google image search results (cheaply collected dataset) to predict skin lesion classification on HAM 10000 data (clean), (2) uses MNIST data to recognize digit on USPS dataset, (3) uses Email spam data to detect spam in an SMS dataset. The experimental settings are exactly the same with Ghorbani & Zou (2019).  Table 2  shows that DVRL significantly outperforms Baseline and Data Shapley in all three tasks. One primary reason is that DVRL jointly optimizes the data value estimator and corresponding predictor model; on the other hand, Data Shapley needs a two step processes to construct the predictor model in domain adaptation setting. Next, we focus on a real-world tabular data learning problem where the domain differences are sig- nificant. We consider the sales forecasting problem with the Rossmann Store Sales dataset, which consists of sales data from four different store types. Simple statistical investigation shows a signif- icant discrepancy between the input feature distributions across different store types, meaning there is a large domain mismatch across store types (see Appendix F). To further illustrate distribution difference across the store types, we show the t-SNE analysis on the final layer of a discriminative neural network trained on the entire dataset in Appendix Fig. 11. We consider three different set- tings: (1) training on all store types (Train on All), (2) training on store types excluding the store type of interest (Train on Rest), and (3) training only on the store type of interest (Train on Specific). In all cases, we evaluate the performance on each store type separately. For example, to evaluate the performance on store type D, Train on All setting uses all four store type datasets for training, Train on Rest setting uses store types A, B and C for training, and Train on Specific setting only uses the store type D for training. Train on Rest is expected to yield the largest domain mismatch between training and testing sets, and Train on Specific yield the minimal. We evaluate the performance of Baseline (train the predictor model without data valuation) and DVRL in 3 different settings with 2 different predictor models (XGBoost (Chen & Guestrin, 2016) and Neural Networks (3-layer perceptrons)). As shown in  Table 3 , DVRL improves the performance in all settings. The improvements are most significant in Train on Rest setting due to the large domain mismatch. For instance, DVRL reduces the error more than 50% for store type B predictions with XGBoost in comparison to Baseline. In Train on All setting, the performance improvement is still significant, showing that DVRL can distinguish the samples from the target distribution. In Appendix G, we demonstrate that DVRL actually prioritizes selection of the samples from the target store type. In Train on Specific setting, the performance improvements are smaller - even without domain mismatch, DVRL can marginally improve the performance by accurately prioritizing the important samples within the same store type. These results further support the conclusions from  Fig. 2  in the conventional supervised learning setting that DVRL learns high quality data value scores. Comparison to other domain adaptation benchmarks can be found in Appendix C.5.

Section Title: DISCUSSION: HOW MANY VALIDATION SAMPLES ARE NEEDED?
  DISCUSSION: HOW MANY VALIDATION SAMPLES ARE NEEDED? DVRL requires a validation dataset from the target distribution that the testing dataset comes from. Depending on the task, the requirements for the validation dataset may involve being noise-free in labels, being from the same domain, or being high quality. Acquiring such a dataset can be costly in some scenarios and it is desirable to minimize its size requirements. We analyze the impact of the size of the validation dataset on DVRL with 3 different datasets: Adult, Blog, and Fashion MNIST for the use case of corrupted sample discovery. Similar to Section 4.2, we add 20% noise to the training samples and try to find the corrupted samples with DVRL. As shown in  Fig. 5 , DVRL achieves reasonable performance with 100 to 400 validation samples. In the Adult dataset, even 10 validation samples are sufficient to achieve a reasonable data valuation quality. Both of these settings are often realistic in real world scenarios.

Section Title: CONCLUSIONS
  CONCLUSIONS In this paper, we propose a meta learning framework, named DVRL, that adaptively learns data values jointly with a target task predictor model. The value of each datum determines how likely it will be used in training of the predictor model. We model this data value estimation task using a deep neural network, which is trained using reinforcement learning with a reward obtained from a small validation set that represents the target task performance. With a small validation set, DVRL can provide computationally highly efficient and high quality ranking of data values for the training dataset that is useful for domain adaptation, corrupted sample discovery and robust learning. We show that DVRL significantly outperforms other techniques for data valuation in various applica- tions on diverse types of datasets.
  We provide empirical results that how small the validation set can be in Section 4.5. 2 We use the small training dataset in this experiment in order to compare with LOO and Data Shapley which have high computational complexities. DVRL is scalable to larger datasets as shown in Section 4.3.

```
