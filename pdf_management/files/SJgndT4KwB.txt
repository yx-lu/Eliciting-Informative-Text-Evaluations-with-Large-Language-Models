Title:
```
Published as a conference paper at ICLR 2020 FINITE DEPTH AND WIDTH CORRECTIONS TO THE NEURAL TANGENT KERNEL
```
Abstract:
```
We prove the precise scaling, at finite depth and width, for the mean and variance of the neural tangent kernel (NTK) in a randomly initialized ReLU network. The standard deviation is exponential in the ratio of network depth to width. Thus, even in the limit of infinite overparameterization, the NTK is not deterministic if depth and width simultaneously tend to infinity. Moreover, we prove that for such deep and wide networks, the NTK has a non-trivial evolution during training by showing that the mean of its first SGD update is also exponential in the ratio of network depth to width. This is sharp contrast to the regime where depth is fixed and network width is very large. Our results suggest that, unlike relatively shallow and wide networks, deep and wide ReLU networks are capable of learning data-dependent features even in the so-called lazy training regime.
```

Figures/Tables Captions:
```
Figure 1: Cartoon of the four paths γ 1 , γ 2 , γ 3 , γ 4 between layers 1 and 2 in the case where there is no interaction. Paths stay with there original partners γ 1 with γ 2 and γ 3 with γ 4 at all intermediate layers.
Figure 2: Cartoon of the four paths γ 1 , γ 2 , γ 3 , γ 4 between layers 1 and 2 in the case where there is exactly one "loop" interaction between the marked layers. Paths swap away from their original part- ners exactly once at some intermediate layer after 1 , and then swap back to their original partners before 2 .
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Modern neural networks are typically overparameterized: they have many more parameters than the size of the datasets on which they are trained. That some setting of parameters in such networks can interpolate the data is therefore not surprising. But it is a priori unexpected that not only can such interpolating parameter values can be found by stochastic gradient descent (SGD) on the highly non-convex empirical risk but also that the resulting network function generalizes to unseen data. In an overparameterized neural network N (x) the individual parameters can be difficult to interpret, and one way to understand training is to rewrite the SGD updates ∆θ p = − λ ∂L ∂θ p , p = 1, . . . , P of trainable parameters θ = {θ p } P p=1 with a loss L and learning rate λ as kernel gradient descent updates for the values N (x) of the function computed by the network: Here B = {(x 1 , y 1 ), . . . , (x |B| , y |B| )} is the current batch, the inner product is the empirical 2 inner product over B, and K N is the neural tangent kernel (NTK): Relation (1) is valid to first order in λ. It translates between two ways of thinking about the difficulty of neural network optimization: (i) The parameter space view where the loss L, a complicated function of θ ∈ R #parameters , is minimized using gradient descent with respect to a simple (Euclidean) metric; Published as a conference paper at ICLR 2020 (ii) The function space view where the loss L, which is a simple function of the network map- ping x → N (x), is minimized over the manifold M N of all functions representable by the architecture of N using gradient descent with respect to a potentially complicated Rie- mannian metric K N on M N . A remarkable observation of  Jacot et al. (2018)  is that K N simplifies dramatically when the network depth d is fixed and its width n tends to infinity. In this setting, by the universal approximation theorem ( Cybenko, 1989 ;  Hornik et al., 1989 ), the manifold M N fills out any (reasonable) ambient linear space of functions. The results in  Jacot et al. (2018)  then show that the kernel K N in this limit is frozen throughout training to the infinite width limit of its average E[K N ] at initialization, which depends on the depth and non-linearity of N but not on the dataset. This mapping between parameter space SGD and kernel gradient descent for a fixed kernel can be viewed as two separate statements. First, at initialization, the distribution of K N converges in the infinite width limit to the delta function on the infinite width limit of its mean E[K N ]. Second, the infinite width limit of SGD dynamics in function space is kernel gradient descent for this limiting mean kernel for any fixed number of SGD iterations. As long as the loss L is well-behaved with respect to the network outputs N (x) and E[K N ] is non-degenerate in the subspace of function space given by values on inputs from the dataset, SGD for infinitely wide networks will converge with probability 1 to a minimum of the loss. Further, kernel method-based theorems show that even in this infinitely overparameterized regime neural networks will have non-vacuous guarantees on generalization ( Wei et al., 2018 ). However, as ( Wei et al., 2018 ) shows, the regularized neural networks at finite width can have better sample complexity the corresponding infinite width kernel method. But replacing neural network training by gradient descent for a fixed kernel in function space is also not completely satisfactory for several reasons. First, it suggests that no feature learning occurs during training for infinitely wide networks in the sense that the kernel E[K N ] (and hence its asso- ciated feature map) is data-independent. In fact, empirically, networks with finite but large width trained with initially large learning rates often outperform NTK predictions at infinite width ( Arora et al., 2019 ). One interpretation is that, at finite width, K N evolves through training, learning data- dependent features not captured by the infinite width limit of its mean at initialization. In part for such reasons, it is important to study both empirically and theoretically finite width corrections to K N . Another interpretation is that the specific NTK scaling of weights at initialization ( Chizat & Bach, 2018b ;a;  Mei et al., 2019 ; 2018;  Rotskoff & Vanden-Eijnden, 2018a ;b) and the implicit small learning rate limit ( Li et al., 2019 ) obscure important aspects of SGD dynamics. Second, even in the infinite width limit, although K N is deterministic, it has no simple analytical formula for deep networks, since it is defined via a layer by layer recursion. In particular, the exact dependence, even in the infinite width limit, of K N on network depth is not well understood. Moreover, the joint statistical effects of depth and width on K N in finite size networks remain unclear, and the purpose of this article is to shed light on the simultaneous effects of depth and width on K N for finite but large widths n and any depth d. Our results apply to fully connected ReLU networks at initialization for which our main contributions are: 1. In contrast to the regime in which the depth d is fixed but the width n is large, K N is not approximately deterministic at initialization so long as d/n is bounded away from 0. Specifically, for a fixed input x the normalized on-diagonal second moment of K N satisfies Thus, when d/n is bounded away from 0, even when both n, d are large, the standard deviation of K N (x, x) is at least as large as its mean, showing that its distribution at initialization is not close to a delta function. See Theorem 1. 2. Moreover, when L is the square loss, the average of the SGD update ∆K N (x, x) to K N (x, x) from a batch of size one containing x satisfies Published as a conference paper at ICLR 2020 where n 0 is the input dimension. Therefore, if d 2 /nn 0 > 0, the NTK will have the potential to evolve in a data-dependent way. Moreover, if n 0 is comparable to n and d/n > 0 then it is possible that this evolution will have a well-defined expansion in d/n. See Theorem 2. In both statements above, means is bounded above and below by universal constants. We em- phasize that our results hold at finite d, n and the implicit constants in both and in the error terms O(d/n 2 ) are independent of d, n. Moreover, our precise results, stated in §2 below, hold for networks with variable layer widths. We have denoted network width by n only for the sake of exposition. The appropriate generalization of d/n to networks with varying layer widths is the parameter β := d i=1 1 n j , which in light of the estimates in (1) and (2) plays the role of an inverse temperature.

Section Title: PRIOR WORK
  PRIOR WORK A number of articles ( Bietti & Mairal, 2019 ;  Dyer & Gur-Ari, 2019 ;  Lee et al., 2019 ;  Yang, 2019 ) have followed up on the original NTK work  Jacot et al. (2018) . Related in spirit to our results is the work  Dyer & Gur-Ari (2019) , which uses Feynman diagrams to study finite width corrections to general correlations functions (and in particular the NTK). The most complete results obtained by  Dyer & Gur-Ari (2019)  are for deep linear networks but a number of estimates hold general non-linear networks as well. The results there, like in essentially all previous work, fix the depth d and let the layer widths n tend to infinity. In contrast, our results (as well as those of  Hanin (2018) ;  Hanin & Nica (2018) ;  Hanin & Rolnick (2018) ), do not treat d as a constant, suggesting that the 1/n expansions (e.g. in  Dyer & Gur-Ari (2019) ) can be promoted to d/n expansions. Also, the sum-over-path approach to studying correlation functions in randomly initialized ReLU nets was previously taken up for the forward pass by  Hanin & Rolnick (2018)  and for the backward pass by  Hanin (2018)  and  Hanin & Nica (2018) . We also point the reader to Theorems 3.1 and 3.2 in  Arora et al. (2019) , which provide quantitative rates of convergence for both the neural tangent kernel and the resulting full optimization trajectory of neural networks at large but finite width (and fixed depth).

Section Title: FORMAL STATEMENT OF RESULTS
  FORMAL STATEMENT OF RESULTS Consider a ReLU network N with input dimension n 0 , hidden layer widths n 1 , . . . , n d−1 , and output dimension n d = 1. We will assume that the output layer of N is linear and initialize the biases in N to zero. Therefore, for any input x ∈ R n0 , the network N computes N (x) = x (d) given by and µ is a fixed probability measure on R that we assume has a density with respect to Lebesgue measure and satisfies: The three assumptions in (4) hold for virtually all standard network initialization schemes with the exception of orthogonal weight initialization. But believe our results extend hold also for this case but not do take up this issue. The on-diagonal NTK is K N (x, x) := d j=1 nj−1 α=1 nj β=1 ∂N ∂W (j) α,β (x) 2 + d j=1 nj β=1 ∂N ∂b (j) β (x) 2 , (5) and we emphasize that although we have initialized the biases to zero, they are not removed from the list of trainable parameters. Our first result is the following: Moreover, we have that E[K N (x, x) 2 ] is bounded above and below by universal constants times In particular, if all the hidden layer widths are equal (i.e. n i = n, for i = 1, . . . , d − 1), we have where f g means f is bounded above and below by universal constants times g. This result shows that in the deep and wide double scaling limit n i , d → ∞, 0 < lim ni,d→∞ d i=1 1 n i < ∞, the NTK does not converge to a constant in probability. This is contrast to the wide and shallow regime where n i → ∞ and d < ∞ is fixed. Our next result shows that when L is the square loss K N (x, x) is not frozen during training. To state it, fix an input x ∈ R n0 to N and define ∆K N (x, x) to be the update from one step of SGD with a batch of size 1 containing x (and learning rate λ). Theorem 2 (Mean of Time Derivative of NTK on Diagonal at Init). We have that E λ −1 ∆K N (x, x) is bounded above and below by universal constants times times a multiplicative error of size 1 + O d i=1 1 n 2 i , where β = d i=1 1/n i , as in Theorem 1. In particular, if all the hidden layer widths are equal (i.e. n i = n, for i = 1, . . . , d − 1), we find Observe that when d is fixed and n i = n → ∞, the pre-factor in front of exp (5β) scales like 1/n. This is in keeping with the results from  Dyer & Gur-Ari (2019)  and  Jacot et al. (2018) . Moreover, it shows that if d, n, n 0 grow in any way so that dβ/n 0 = d 2 /nn 0 → 0, the update ∆K N (x, x) to K N (x, x) from the batch {x} at initialization will have mean 0. It is unclear whether this will be true also for larger batches and when the arguments of K N are not equal. In contrast, if n i n and β = d/n is bounded away from 0, ∞, and the n 0 is proportional to d, the average update E[∆K N (x, x)] has the same order of magnitude as E[K N (x)].

Section Title: ORGANIZATION FOR THE REST OF THE ARTICLE
  ORGANIZATION FOR THE REST OF THE ARTICLE The remainder of this article is structured as follows. First, we give an outline of the proofs of Theorems 1 and 2 in §3 and particularly in §3.1, which gives an in-depth but informal explanation of our strategy for computing moments of K N and its time derivative. Next, in the Appendix Section §A, we introduce some notation about paths and edges in the computation graph of N . This Published as a conference paper at ICLR 2020 notation will be used in the proofs of Theorems 1 and 2 presented in the Appendix Section §B-§D. The computations in §B explain how to handle the contribution to K N and ∆K N coming only from the weights of the network. They are the most technical and we give them in full detail. Then, the discussion in §C and §D show how to adapt the method developed in §B to treat the contribution of biases and mixed bias-weight terms in K N , K 2 N and ∆K N . Since the arguments are simpler in these cases, we omit some details and focus only on highlighting the salient differences.

Section Title: OVERVIEW OF PROOF OF THEOREMS 1 AND 2
  OVERVIEW OF PROOF OF THEOREMS 1 AND 2 The proofs of Theorems 1 and 2 are so similar that we will prove them at the same time. In this section and in §3.1 we present an overview of our argument. Then, we carry out the details in Appendix Sections §B-§D below. Fix an input x ∈ R n0 to N . Recall from (5) that K N (x, x) = K w + K b , where we've set K w := weights w ∂N ∂w (x) 2 , K b := biases b ∂N ∂b (x) 2 (6) and have suppressed the dependence on x, N . Similarly, we have − 1 2λ ∆K N (x, x) = ∆ ww + 2∆ wb + ∆ bb , where we have introduced and have used that the loss on the batch {x} is given by L(x) = 1 2 (N (x) − N * (x)) 2 for some target value N * (x). To prove Theorem 1 we must estimate the following quantities: To prove Theorem 2, we must control in addition The most technically involved computations will turn out to be those involving only weights: namely, the terms E[K w ], E[K 2 w ], E[∆ ww ]. These terms are controlled by writing each as a sum over certain paths γ that traverse the network from the input to the output layers. The corresponding results for terms involving the bias will then turn out to be very similar but with paths that start somewhere in the middle of network (corresponding to which bias term was used to differentiate the network output). The main result about the pure weight contributions to K N is the following Proposition 3 (Pure weight moments for K N , ∆K N ). We have

Section Title: Published as a conference paper at ICLR 2020
  Published as a conference paper at ICLR 2020 We prove Proposition 3 in §B below. The proof already contains all the ideas necessary to treat the remaining moments. In §C and §D we explain how to modify the proof of Proposition 3 to prove the following two Propositions: Proposition 4 (Pure bias moments for K N , ∆K N ). We have Finally, with probability 1, we have ∆ bb = 0. Proposition 5 (Mixed bias-weight moments for K N , ∆K N ). We have Further, E[∆ wb ] is bounded above and below by universal constants times The statements in Theorems 1 and 2 that hold for general n i now follow directly from Propositions 3-5. The asymptotics when n i n follow from some routine algebra.

Section Title: IDEA OF PROOF OF PROPOSITIONS 3-5
  IDEA OF PROOF OF PROPOSITIONS 3-5 Before turning to the details of the proof of Propositions 3-5 below, we give an intuitive explanation of the key steps in our sum-over-path analysis of the moments of K w , K b , ∆ ww , ∆ wb , ∆ bb . Since the proofs of all three Propositions follow a similar structure and Proposition 3 is the most compli- cated, we will focus on explaining how to obtain the first 2 moments of K w . Since the biases are initialized to zero and K w involves only derivatives with respect to the weights, for the purposes of analyzing K w the biases play no role. Without the biases, the output of the neural network, N (x) can be express as a weighted sum over paths in the computational graph of the network: N (x) = n0 a=1 x a γ∈Γ 1 a wt(γ), where Γ 1 a is the collection of paths in N starting at neuron a and the weight of a path wt(γ) is defined in (13) in the Appendix and includes both the product of the weights along γ and the condition that every neuron in γ is open at x. The path γ begins at some neuron in the input layer of N and passes through a neuron in every subsequent layer until ending up at the unique neuron in the output layer (see (10)). Being a product over edge weights in a given path, the derivative of wt(γ) with respect to a weight W e on an edge e of the computational graph of N is: There is a subtle point here that wt(γ) also involves indicator functions of the events that neurons along γ are open at x. However, with probability 1, the derivative with respect to W e of these indicator functions is identically 0 at x. The details are in Lemma 11. Because K w is a sum of derivatives squared (see (6)), ignoring the dependence on the network input x, the kernel K w roughly takes the form K w ∼ γ1,γ2 e∈γ1∩γ2 2 k=1 wt(γ k ) W 2 e , where the sum is over collections (γ 1 , γ 2 ) of two paths in the computation graph of N and edges e in the computational graph of N that lie on both (see Lemma 6 for the precise statement). When computing the mean, E[K w ], by the mean zero assumption of the weights W e (see (4)), the only contribution is when every edge in the computational graph of N is traversed by an even number of paths. Since there are exactly two paths, the only contribution is when the two paths are identical, dramatically simplifying the problem. This gives rise to the simple formula for E[K w ] (see (23)). The expression K 2 w ∼ γ1,γ2,γ3,γ4 e1∈γ1∩γ2 e2∈γ3∩γ4 4 k=1 wt(γ k ) W 2 e1 W 2 e2 , for K 2 w is more complex. It involves sums over four paths in the computational graph of N as in the second statement of Lemma 6. Again recalling that the moments of the weights have mean 0, the only collections of paths that contribute to E[K 2 w ] are those in which every edge in the computational graph of N is covered an even number of times: However, there are now several ways the four paths can interact to give such a configuration. It is the combinatorics of these interactions, together with the stipulation that the marked edges e 1 , e 2 belong to particular pairs of paths, which complicates the analysis of E[K 2 w ]. We estimate this expectation in several steps: 1. Obtain an exact formula for the expectation in (8): E 4 k=1 wt(γ k ) W 2 e1 W 2 e2 = F (Γ, e 1 , e 2 ), where F (Γ, e 1 , e 2 ) is the product over the layers = 1, . . . , d in N of the "cost" of the interactions of γ 1 , . . . , γ 4 between layers − 1 and . The precise formula is in Lemma 7. 2. Observe the dependence of F (Γ, e 1 , e 2 ) on e 1 , e 2 is only up to a multiplicative constant: The precise relation is (24). This shows that, up to universal constants, This is captured precisely by the terms I j , II j defined in (27),(28). 3. Notice that F * (Γ) depends only on the un-ordered multiset of edges E = E Γ ∈ Σ 4 even determined by Γ (see (17) for a precise definition). We therefore change variables in the sum from the previous step to find E[K 2 w ] E∈Σ 4 even F * (E)Jacobian(E, e 1 , e 2 ), where Jacobian(E, e 1 , e 2 ) counts how many collections of four paths Γ ∈ Γ 4 even that have the same E Γ also have paths γ 1 , γ 2 pass through e 1 and paths γ 3 , γ 4 pass through e 2 . Lemma 8 gives a precise expression for this Jacobian. It turns outs, as explained just below Lemma 8, that Jacobian(E, e 1 , e 2 ) 6 #loops(E) , where a loop in E occurs when the four paths interact. More precisely, a loop occurs whenever all four paths pass through the same neuron in some layer (see  Figures 1  and 2). 4. Change variables from unordered multisets of edges E ∈ Σ 4 even in which every edge is covered an even number of times to pairs of paths V ∈ Γ 2 . The Jacobian turns out to be 2 −#loops(E) (Lemma 9), giving 5. Just like F * (V ), the term 3 #loops(V ) is again a product over layers in the computational graph of N of the "cost" of interactions between our four paths. Aggregating these two terms into a single functional F * (E) and factoring out the 1/n terms in F * (V ) we find that: E[K 2 w ] 1 n 2 0 E F * (V ) , where the 1/n terms cause the sum to become an average over collections V of two inde- pendent paths in the computational graph of N , with each path sampling neurons uniformly at random in every layer. The precise result, including the dependence on the input x, is in (42). 6. Finally, we use Proposition 10 to obtain for this expectation estimates above and below that match up multiplicative constants.

Section Title: CONCLUSION
  CONCLUSION Taken together Theorems 1 and 2 show that in fully connected ReLU nets that are both deep and wide the neural tangent kernel K N is genuinely stochastic and enjoys a non-trivial evolution during training. This suggests that in the overparameterized limit n, d → ∞ with d/n ∈ (0, ∞), the kernel K N may learn data-dependent features. Moreover, our results show that the fluctuations of both K N and its time derivative are exponential in the inverse temperature β = d/n. It would be interesting to obtain an exact description of its statistics at initialization and to describe the law of its trajectory during training. Assuming this trajectory turns out to be data-dependent, our results suggest that the double descent curve  Belkin et al. (2018 ; 2019);  Spigler et al. (2018)  that trades off complexity vs. generalization error may display significantly different behaviors depending on the mode of network overparameterization. However, it is also important to point out that the results in  Hanin (2018) ;  Hanin & Nica (2018) ;  Hanin & Rolnick (2018)  show that, at least for fully connected ReLU nets, gradient-based training is not numerically stable unless d/n is relatively small (but not necessarily zero). Thus, we conjecture that there may exist a "weak feature learning" NTK regime in which network depth and width are both large but 0 < d/n 1. In such a regime, the network will be stable enough to train but flexible enough to learn data-dependent features. In the language of  Chizat & Bach (2018b)  one might say this regime displays weak lazy training in which the model can still be described by a stochastic positive definite kernel whose fluctuations can interact with data. Finally, it is an interesting question to what extent our results hold for non-linearities other than ReLU and for network architectures other than fully connected (e.g. convolutional and residual). Even in fully connected networks, the input/outpu Jacobian already displays different spectral statis- tics depending on the non-linearity ( Pennington et al., 2017 ). Moreover, typical ConvNets, are sig- nificantly wider than they are deep, and we leave it to future work to adapt the techniques from the present article to these more general settings (the neural tangent kernel for finite depth convolutional networks is studied in part in ( Arora et al., 2019 )).

Section Title: A NOTATION
  A NOTATION In this section, we introduce some notation, adapted in large part from  Hanin & Nica (2018) , that will be used in the proofs of Theorems 1 and 2. For n ∈ N, we will write

```
