Title:
```
Published as a conference paper at ICLR 2020 THE VARIATIONAL BANDWIDTH BOTTLENECK: STOCHASTIC EVALUATION ON AN INFORMATION BUDGET
```
Abstract:
```
In many applications, it is desirable to extract only the relevant information from complex input data, which involves making a decision about which input features are relevant. The information bottleneck method formalizes this as an information- theoretic optimization problem by maintaining an optimal tradeoff between com- pression (throwing away irrelevant input information), and predicting the target. In many problem settings, including the reinforcement learning problems we consider in this work, we might prefer to compress only part of the input. This is typically the case when we have a standard conditioning input, such as a state observation, and a "privileged" input, which might correspond to the goal of a task, the output of a costly planning algorithm, or communication with another agent. In such cases, we might prefer to compress the privileged input, either to achieve better gener- alization (e.g., with respect to goals) or to minimize access to costly information (e.g., in the case of communication). Practical implementations of the information bottleneck based on variational inference require access to the privileged input in order to compute the bottleneck variable, so although they perform compression, this compression operation itself needs unrestricted, lossless access. In this work, we propose the variational bandwidth bottleneck, which decides for each example on the estimated value of the privileged information before seeing it, i.e., only based on the standard input, and then accordingly chooses stochastically, whether to access the privileged input or not. We formulate a tractable approximation to this framework and demonstrate in a series of reinforcement learning experiments that it can improve generalization and reduce access to computationally costly information.
```

Figures/Tables Captions:
```
Figure 1: The variational bandwidth bottleneck: Based on the standard input S, the channel capacity network determines the capacity of the bottleneck Z. The channel capacity then determines the probability of accessing the privileged input. In the event that the privileged input is not accessed, no part of the model actually reads its value.
Figure 2: on the left shows the environment, where the agent needs to go from blue dot to green dot.
Figure 3: Partially Observable FindObjSX environments - The agent is placed in the central room. An object is placed in one of the rooms and the agent must navigate to the object in a randomly chosen outer room to complete the mission. The agent again receives an egocentric observation (7 x 7 pixels), and the difficulty of the task increases with X. For more details refer to supplementary material.
Table 1: Running Expensive Model Based
Table 2: Generalization of the agent to larger grids in RoomNXSY envs and FindObj envs. Success of an agent is measured by the fraction of episodes where the agent was able to navigate to the goal in 500 steps. Results are averaged over 500 examples, and 5 different random seeds.
Table 3: Goal Driven Navigation - Percentage of time steps on which each method acsess the goal in- formation when the agent is near the junction point (or branching points in the maze. We show that the proposed method learns to access the privileged input (in this case, the goal) only when necessary.
Table 4: Multiagent communication: The VBB performs better, as compared to the baselines. In the baseline scenario, all of the agents communicate with all the other agents all the time. Averaged over 5 random seeds.
Table 5: The VBB performs better, as compared to the baselines. The VBB transmits a similar number of bits, while accessing privileged information a fraction of the time (in brackets % of times access to privileged information). Using REINFORCE to learn the parameter of the Bernoulli, does not perform as well as the proposed method.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION A model that generalizes effectively should be able to pick up on relevant cues in the input while ignoring irrelevant distractors. For example, if one want to cross the street, one should only pay attention to the positions and velocities of the cars, disregarding their color. The information bottleneck ( Tishby et al., 2000 ) formalizes this in terms of minimizing the mutual information between the bottleneck representation layer with the input, while maximizing its mutual information with the correct output. This type of input compression can improve generalization ( Tishby et al., 2000 ), and has recently been extended to deep parametric models, such as neural networks where it has been shown to improve generalization ( Achille & Soatto, 2016 ;  Alemi et al., 2016 ). The information bottleneck is generally intractable, but can be approximated using variational inference ( Alemi et al., 2016 ). This variational approach parameterizes the information bottleneck model using a neural network (i.e., an encoder). While the variational bound makes it feasible to train (approximate) information bottleneck layers with deep neural networks, the encoder in these networks - the layer that predicts the bottleneck variable distribution conditioned on the input - must still process the full input, before it is compressed and irrelevant information is removed. The encoder itself can therefore fail to generalize, and although the information bottleneck minimizes mutual information with the input on the training data, it might not compress successfully on new inputs. To 1 Mila, University of Montreal, 2 Deepmind, 3 University of California, Berkeley, :anirudhgoyal9119@gmail.com Published as a conference paper at ICLR 2020 address this issue, we propose to divide our input into two categories: standard input and privileged input, and then we aim to design a bottleneck that does not need to access the privileged input before deciding how much information about the input is necessary. The intuition behind not accessing the privileged input is twofold: (a) we might want to avoid accessing the privileged input because we want to generalize with respect to it (and therefore compress it) (b) we actually would prefer not to access it (as this input could be costly to obtain). The objective is to minimize the conditional mutual information between the bottleneck layer and the privileged input, given the standard input. This problem statement is more narrow than the standard information bottleneck, but encompasses many practical use cases. For example, in reinforcement learning, which is the primary subject of our experiments, the agent can be augmented with some privileged information in the form of a model based planner, or information which is the result of communication with another agent. This "additional" information can be seen as a privileged input because it requires the agent to do something extra to obtain it. Our work provides the following contributions. First, we propose a variational bandwidth bottleneck (VBB) that does not look at the privileged input before deciding whether to use it or not. At a high level, the network is trained first to examine the standard input, and then stochastically decide whether to access the privileged input or not. Second, we illustrate several applications of this approach to reinforcement learning, in order to construct agents that can stochastically determine when to evaluate costly model based computations, when to communicate with another agent, and when to access the memory. We experimentally show that the proposed model produces better generalization, as it learns when to use (or not use) the privileged input. For example, in the case of maze navigation, the agent learns to access information about the goal location only near natural bottlenecks, such as doorways.

Section Title: PROBLEM FORMULATION
  PROBLEM FORMULATION We aim to address the generalization issue described in the introduction for an important special case of the variational information bottleneck, which we refer to as the conditional bottleneck. The conditional bottleneck has two inputs, a standard input, and a privileged input, that are represented by random variables S and G, respectively. Hence, S, G, Y are three random variables with unknown distribution p dist (S, G, Y). The information bottleneck provides us with a mechanism to determine the correct output while accessing the minimal possible amount of information about the privileged input G. In particular, we formulate a conditional variant of the information bottleneck to minimize the mutual information between the bottleneck layer and the privileged input I(Z, G|S), given the standard input while avoiding unnecessary access to privileged input G. The proposed model consists of two networks (see  Fig. 1 ): The encoder network that takes in the privileged input G as well as the standard input S and outputs a distribution over the latent variable z such that z ∼ p(Z|G, S). The decoder network p dec (Y|Z, S) takes the standard input S and the compressed representation Z and outputs the distribution over the target variable Y.

Section Title: VARIATIONAL BOTTLENECK ON STANDARD INPUT AND PRIVILEGED INPUT
  VARIATIONAL BOTTLENECK ON STANDARD INPUT AND PRIVILEGED INPUT The information bottleneck (IB) objective ( Tishby et al., 2000 ) is formulated as the maximization of I(Z; Y) − βI(Z; X), where X refers to the input signal, Y refers to the target signal, Z refers to the compressed representation of X, and β controls the trade-off between compression and prediction. The IB has its roots in channel coding, where a compression metric I(Z; X) represents the capacity of the communication channel between Z and X. Assuming a prior distribution r(Z) over the random variable Z, constraining the channel capacity corresponds to limiting the information by which the posterior p(Z|X) is permitted to differ from the prior r(Z). This difference can be measured using the Kullback-Leibler (KL) divergence, such that D KL (p(Z|X) r(Z)) refers to the channel capacity. Now, we write the equations for the variational information bottleneck, where the bottleneck is learnt on both the standard input S as well as a privileged input G. The Data Processing Inequality (DPI) ( Cover & Thomas, 2006 ) for a Markov chain x → z → y ensures that I(x; z) ≥ I(x; y). Hence for a bottleneck where the input is comprised of both the standard input as well as privileged input, we have I(Z; G|S) ≥ I(Y; G|S). To obtain an upper bound on I(Z; G|S), we must first obtain an Published as a conference paper at ICLR 2020 upper bound on I(Z; G|S = s), and then average over p(s). We get the following result: We ask the reader to refer to the section on the conditional bottleneck in the supplementary material for the full derivation. We now introduce our proposed method, the variational bandwidth bot- tleneck (VBB). The goal of the vari- ational bandwidth bottleneck is to avoid accessing the privileged input G if it is not required to make an in- formed decision about the output Y. This means that the decision about whether or not to access G must be made only on the basis of the standard input S. The standard input is used to determine a channel capacity, d cap , which controls how much information about G is available to compute Z. If d cap denotes the channel capacity, one way to satisfy this channel capac- ity is to access the input losslessly with probability d cap , and otherwise send no information about the input at all. In this communication strategy, we have p(Z|S, G) = δ(f enc (S, G)) if we choose to access the privileged input (with probability d cap ), where f enc (S, G) is a deterministic encoder, and δ denotes the Dirac delta function. The full posterior distribution p(Z|S, G) over the compressed representation can be written as a weighted mixture of (a) (deterministically) accessing the privileged input and standard input and (b) sampling from the prior (when channel capacity is low), such that z is sampled using This modified distribution p(Z|S, G) allows us to dynamically adjusts how much information about G is transmitted through Z. As shown in the  Figure 1 , if d cap is set to zero, Z is simply sampled from the prior and contains no information about G. If it is set to one, the privileged information in G is deterministically transmitted. The amount of information about G that is transmitted is therefore determined by d cap , which will depend only on the standard input S. This means that the model must decide how much information about the privileged input is required be- fore accessing it. Optimizing the information bottleneck objective with this type of bottleneck requires computing gradients through the term D KL (p(Z|S, G) r(Z)) (as in Eq. 1), where z ∼ p(Z|S, G) is sampled as in Eq. 2. The non-differentiable binary event, whose probability is represented by d cap , precludes us from differentiating through the channel capacity directly. In the next sections, we will first show that this mixture can be used within a variational approximation to the information bottleneck, and then describe a practical approximation that allows us to train the model with standard backpropagation.

Section Title: TRACTABLE EVALUATION OF CHANNEL CAPACITY
  TRACTABLE EVALUATION OF CHANNEL CAPACITY In this section, we show how we can evaluate the channel capacity in a tractable way. We learn a deterministic function B(S) of the standard input S which determines channel capacity. This Published as a conference paper at ICLR 2020 function outputs a scalar value for d cap ∈ (0, 1), which is treated as the probability of accessing the information about the privileged input. This deterministic function B(S) is parameterized as a neural network. We then access the privileged input with probability d cap = B(S). Hence, the resulting distribution over Z is a weighted mixture of accessing the privileged input f enc (S, G) with probability d cap and sampling from the prior with probability 1 − d cap . At inference time, using d cap , we sample from the Bernoulli distribution b ∼ Bernoulli(d prob ) to decide whether to access the privileged input or not.

Section Title: OPTIMIZATION OF THE KL OBJECTIVE
  OPTIMIZATION OF THE KL OBJECTIVE Here, we derive the KL divergence objective that allows for tractable optimization of D KL (p(Z|S, G) r(Z)) (as in Eq. 1, 2). Proposition 1 Given the standard input s, privileged input g, bottleneck variable z, and a deter- ministic encoder f enc (s, g), we can express the D KL between the weighed mixture and the prior as The proof is given in the Appendix, section B. This equation is fully differentiable with respect to the parameters of f (g, s) and B(s) = d cap , making it feasible to use standard gradient-based optimizers.

Section Title: Summary
  Summary As in Eq. 2, we approximate p(Z|S, G) as a weighted mixture of f enc (S, G) and the normal prior, such that z ∼ d cap * (f enc (S, G)) + (1 − d cap ) * N (0, 1). Hence, the quantity D KL (p(Z|S, G) r(Z)) can be seen as a bound on the information bottleneck objective. When we access the privileged input G, we pay a cost equal to I(Z, G|S), which is bounded by D KL (p(Z|S, G) r(Z)) as in Eq. 1. Hence, optimizing this objective causes the model to avoid accessing the privileged input when it is not necessary.

Section Title: VARIATIONAL BANDWIDTH BOTTLENECK WITH RL
  VARIATIONAL BANDWIDTH BOTTLENECK WITH RL In order to show how the proposed model can be implemented, we consider a sequential decision making setting, though our variational bandwidth bottleneck could also be applied to other learning problems. In reinforcement learning, the problem of sequential decision making is cast within the framework of MDPs ( Sutton et al., 1998 ). Our proposed method depends on two sources of input, standard input and privileged input. In reinforcement learning, privileged inputs could be the result of performing any upstream computation, such as running model based planning. It can also be the information from the environment, such as the goal or the result of active perception. In all these settings, the agent must decide whether to access the privileged input or not. If the agent decides to access the privileged input, then the the agent pays an "information cost". The objective is to maximize the expected reward and reduce the cost associated with accessing privileged input, such that across all states on average, the information cost of using the privileged information is minimal. We parameterize the agent's policy π θ (A|S, G) using an encoder p enc (Z|S, G) and a decoder p dec (A|S, Z), parameterized as neural networks. Here, the channel capacity network B(S) would take in the standard input that would be used to determine channel capacity, depending on which we decide to access the privileged input as in Section 4.1, such that we would output the distribution over the actions. That is, Y is A, and π θ (A | S, G) = z p priv (z | S, G) p dec (A | S, z). This would correspond to minimizing I(A; G|S), resulting in the objective J(θ) ≡ E π θ [r] − βI(A; G | S) = E π θ [r] − βI(Z; G | S), (4) where E π θ denotes an expectation over trajectories generated by the agent's policy. We can mini- mize this objective with standard optimization methods, such as stochastic gradient descent with backpropagation.

Section Title: RELATED WORK
  RELATED WORK A number of prior works have studied information-theoretic regularization in RL. For instance,  van Dijk & Polani (2011)  use information theoretic measures to define relevant goal-information, which then could be used to find subgoals. Our work is related in that our proposed method could be used to find relevant goal information, but without accessing the goal first. Information theoretic measures have also been used for exploration ( Still & Precup, 2012 ;  Mohamed & Rezende, 2015 ;  Houthooft et al., 2016 ;  Gregor et al., 2016 ). More recently  Goyal et al. (2019)  proposed InfoBot, where "decision" states are identified by training a goal conditioned policy with an information bottleneck. In InfoBot, the goal conditioned policy always accesses the goal information, while the proposed method conditionally access the goal information. The VBB is also related to work on conditional computation. Conditional computation aims to reduce computation costs by activating only a part of the entire network for each example ( Bengio et al., 2013 ). Our work is related in the sense that we activate the entire network, but only conditionally access the privileged input. Another point of comparison for our work is the research on attention models (( Bahdanau et al., 2014 ;  Mnih et al., 2014 ;  Xu et al., 2015 )). These models typically learn a policy, that allows them to selectively attend to parts of their input. However, these models still need to access the entire input in order to decide where to attend. Our method dynamically decides whether to access privileged information or not. As shown in our experiments, our method performs better than the attention method of  Mnih et al. (2014) . Recently, many models have been shown to be effective at learning communication in multi-agent reinforcement learning ( Foerster et al., 2016 ;  Sukhbaatar et al., 2016 ). ( Sukhbaatar et al., 2016 ) learns a deep neural network that maps inputs of all the agents to their respective actions. In this particular architecture, each agent sends its state as the communication message to other agents. Thus, when each agent takes a decision, it takes information from all the other agents. In our proposed method, each agent communicates with other agents only when its necessary. Our work is also related to work in behavioural research that deals with two modes of decision making ( Dic, 1985 ;  Kahneman, 2003 ;  Sloman, 1996 ;  Botvinick & Braver, 2015 ;  Shenhav et al., 2017 ): an automatic systems that relies on habits and a controlled system that uses some extra information for making decision making. These systems embody different accuracy and demand trade-offs. The habit based system (or the default system) has low computation cost but is often more accurate, whereas the controlled system (which uses some external information) achieves greater accuracy but often is more costly. The proposed model also has two parts of input processing, when the channel capacity is low, agent uses its standard input only, and when channel capacity is high, agent uses both the standard as well as privileged input. The habit based system is analogous to using only the standard input, while the controlled system could be analogous to accessing more costly privileged input.

Section Title: EXPERIMENTAL EVALUATION
  EXPERIMENTAL EVALUATION In this section, we evaluate our proposed method and study the following questions: Better generalization? Does the proposed method learn an effective bottleneck that generalizes better on test distributions, as compared to the standard conditional variational information bottleneck? Learn when to access privileged input? Does the proposed method learn when to access the privileged input dynamically, minimizing unnecessary access?

Section Title: BASELINES
  BASELINES We compare the proposed method to the following methods and baselines: Conditional Variational Information Bottleneck (VIB): The agent always access the privileged input, with a VIB using both the standard and the privileged input InfoBot ( Goyal et al., 2019 ).

Section Title: Deterministically Accessing Privileged Input (UVFA)
  Deterministically Accessing Privileged Input (UVFA) We compare the proposed method to simpler reinforcement-learning baselines, where accessing privileged information can be formalized as one of the available actions. This action reveals the privileged information, at the cost of a small negative reward. This baseline evaluates whether the explicit VBB formulation provides a benefit over a more conventional approach, where the MDP itself is reformulated to account for the cost of information. Randomly accessing goal (RAG) - Here, we compared the proposed method to the scenario where we randomly access the privileged input (e.g., 50% of the time). This baseline evaluates whether the VBB is selecting when to access the goal in an intentional and intelligent way.

Section Title: DECIDING WHEN TO RUN AN EXPENSIVE MODEL BASED PLANNER
  DECIDING WHEN TO RUN AN EXPENSIVE MODEL BASED PLANNER Model-based planning can be computationally expensive, but beneficial in temporally extended decision making domains. In this setting, we evaluate whether the VBB can dynamically choose to invoke the planner as infrequently as possible, while still attaining good performance. While it is easy to plan using a planner (like a model based planner, which learns the dynamics model of the environment), it is not very cheap, as it involves running a planner at every step (which is expensive). So, here we try to answer whether the agent can decide based on the standard input when to access privileged input (the output of model based planner by running the planner). Experimental Setup: We consider a maze world as shown in Figure 2(a). The agent is represented by a blue dot, and the agent has to reach the goal (represented by a green dot). The agent has access to a dynamics model of the environment (which is pretrained and represented using a pa- rameterized neural network). In this task, the agent only gets a partial view of the surrounding i.e. the agent ob- serves a small number of squares in front of it. The agent has to reach the goal position from the start position, and agent can use the pretrained dynamics model to sample multiple plausible trajectories, and the output of the dynamics model is fed as a conditional input to the agent's policy (similar to ( Racanière et al., 2017 )), thus the agent can use this dynamics model to predict possible futures, and then make an informed decision based on its current state as well as the result of the prediction from the dynamic model.

Section Title: Planner
  Planner In this setup, the current state of the agent (i.e. the egocentric visual observation) acts as the standard input S, and the result of running the planner acts as the privileged input G. In order to avoid running the model based planner, the agent needs to decide when to access the more costly planner.

Section Title: Results
  Results - Here, we analyze when the agent access the output of the planner. We find that most of the times agent access the privileged information (output of model based planner) near the junctions as shown in  Table 1 .

Section Title: BETTER GENERALIZATION IN GOAL DRIVEN NAVIGATION
  BETTER GENERALIZATION IN GOAL DRIVEN NAVIGATION The goal of this experiment is to show that, by selectively choosing when to access the privileged input, the agent can generalize better with respect to this input. We consider an agent navigating through a maze comprising sequences of rooms separated by doors, as shown in Figure 7. We use a partially observed formulation of the task, where the agent only observes a small number of squares ahead of it. These tasks are difficult to solve with standard RL algorithms, not only due to the partial observability of the environment but also the sparsity of the reward, since the agent receives a reward only upon reaching the goal ( Chevalier-Boisvert et al., 2018 ). The low probability of reaching the goal randomly further exacerbates these issues. The privileged input in this case corresponds to the Published as a conference paper at ICLR 2020 agent's relative distance to the goal G. At junctions, the agent needs to know where the goal is so that it can make the right turn. While in a particular room, the agent doesn't need much information about the goal. Hence, the agent needs to learn to access goal information when it is near a door, where it is most valuable. The current visual inputs act as a standard input S, which is used to compute channel capacity d cap .

Section Title: Experimental setup
  Experimental setup To investi- gate if agents can generalize by se- lectively deciding when to access the goal information, we compare our method to InfoBot (( Goyal et al., 2019 )) (a conditional variant of VIB). We use different mazes for training, validation, and testing. We evaluate generalization to an unseen distribu- tion of tasks (i.e., more rooms than were seen during training). We exper- iment on both RoomNXSY (X num- ber of rooms with atmost size Y , for more details, refer to the Appendix G) as well as the FindObjSY environ- ment. For RoomNXSY, we trained on RoomN2S4 (2 rooms of at most size 6), and evaluate on RoomN6S6 (6 rooms of at most size 6) and RoomN12S10 (12 rooms, of at most size 10). We also evaluate on the FindObjSY environment, which consists of 9 connected rooms of size Y − 2 × Y − 2 arranged in a grid. For FindObjSY, we train on FindObjS5, and evaluate on FindObjS7 and FindObjS10. Results: Tables 3a, 3b compares an agent trained with the proposed method to a goal conditioned baseline (UVFA) (Schaul et al., 2015), a conditional variant of the VIB ( Goyal et al., 2019 ), as well as to the baseline where accessing goal information is formulated as one of the actions (AIC). We also investigate how many times the agent accesses the goal information. We first train the agent on Mul- tiRoomN2S4, and then evaluate this policy on MultiRoomN12S10. We sample 500 trajecto- ries in MultiRoomN12S10env. Ideally, if the agent has learned when to access goal informa- tion (i.e., near the doorways), the agent should only access the goal information when it is near a door. We take sample rollouts from the pretrained policy in this new environment and check if the agent is near the junction point (or doorway) when the agent access the goal information.  Table 3  quantitatively compares the proposed method with Published as a conference paper at ICLR 2020 different baselines, showing that the proposed method indeed learns to generalize with respect to the privileged input (i.e., the goal).

Section Title: LEARNING WHEN TO COMMUNICATE FOR MULTIAGENT COMMUNICATION
  LEARNING WHEN TO COMMUNICATE FOR MULTIAGENT COMMUNICATION Next, we consider multiagent communication, where in order to solve a task, agents must communi- cate with other agents. Here we show that selectively deciding when to communicate with another agent can result in better learning.

Section Title: Experimental setup
  Experimental setup We use the setup proposed by  Mordatch & Abbeel (2017) . The environment consists of N agents and M landmarks. Both the agents and landmarks exhibit different characteristics such as different color and shape type. Different agents can act to move in the environment. They can also be affected by the interactions with other agents. Asides from taking physical actions, agents communicate with other agents using verbal communication symbols. Each agent has a private goal that is not observed by another agent, and the goal of the agent is grounded in the real physical environment, which might include moving to a particular location. It could also involve other agents (like requiring a particular agent to move somewhere) and hence communication between agents is required. We consider the cooperative setting, in which the problem is to find a policy that maximizes expected return for all the agents. In this scenario, the current state of the agent is the standard input S, and the information which might be obtained as a result of communication with other agents is the privileged input G. For more details refer to the Appendix (D). Tasks: Here we consider two tasks: (a) 6 agents and 6 landmarks, (b) 10 agents and 10 landmarks. The goal is for the agents to coordinate with each other and reach their respective landmarks. We measure two metrics: (a) the distance of the agent from its destination landmark, and (b) the percentage of times the agent accesses the privileged input (i.e., information from the other agents).  Table 4  shows the relative distance as well as the percentage of times agents access information from other agents (in brackets). Results:  Table 4  compares an agent trained with proposed method to ( Mordatch & Abbeel, 2017 ) and Infobot ( Goyal et al., 2019 ). We also study how many times an agent access the privileged input. As shown in  Table 4  (within brackets) the VBB can achieve better results, as compared to other methods, even when accessing the privileged input only less than 40% of the times. Channel Capacity: We can quantify the average information transmission through both the VBB and the VIB in bits. The average information is similar to the conventional VIB, while the input Published as a conference paper at ICLR 2020 is accessed only a fraction of the time (the VIB accesses it 100% of the time). In order to show empirically that the VBB is minimizing information transmission (Eq. 1 in main paper), we measure average channel capacity D KL (p(z|s, g) r(z)) numerically and compare the proposed method with the VIB, which must access the privileged input every time (See  Table 5 ).

Section Title: DISCUSSION
  DISCUSSION We demonstrated how the proposed variational bandwidth bottleneck (VBB) helps in generalization over the standard variational information bottleneck, in the case where the input is divided into a standard and privileged component. Unlike the VIB, the VBB does not actually access the privileged input before deciding how much information about it is needed. Our experiments show that the VBB improves generalization and can achieve similar or better performance while accessing the privileged input less often. Hence, the VBB provides a framework for adaptive computation in deep network models, and further study applying it to domains where reasoning about access to data and computation is an exciting direction for future work. Current limitation of the proposed method is that it assumes independence between standard input and the privileged input but we observe in practice assuming independence does not seem to hurt the results. Future work would be to investigate how we can remove this assumption.

```
