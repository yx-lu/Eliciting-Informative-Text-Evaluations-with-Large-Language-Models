Title:
```
Published as a conference paper at ICLR 2020 FAST NEURAL NETWORK ADAPTATION VIA PARAME- TER REMAPPING AND ARCHITECTURE SEARCH
```
Abstract:
```
Deep neural networks achieve remarkable performance in many computer vi- sion tasks. Most state-of-the-art (SOTA) semantic segmentation and object de- tection approaches reuse neural network architectures designed for image clas- sification as the backbone, commonly pre-trained on ImageNet. However, per- formance gains can be achieved by designing network architectures specifically for detection and segmentation, as shown by recent neural architecture search (NAS) research for detection and segmentation. One major challenge though, is that ImageNet pre-training of the search space representation (a.k.a. super net- work) or the searched networks incurs huge computational cost. In this paper, we propose a Fast Neural Network Adaptation (FNA) method, which can adapt both the architecture and parameters of a seed network (e.g. a high perform- ing manually designed backbone) to become a network with different depth, width, or kernels via a Parameter Remapping technique, making it possible to utilize NAS for detection/segmentation tasks a lot more efficiently. In our ex- periments, we conduct FNA on MobileNetV2 to obtain new networks for both segmentation and detection that clearly out-perform existing networks designed both manually and by NAS. The total computation cost of FNA is significantly less than SOTA segmentation/detection NAS approaches: 1737× less than DPC, 6.8× less than Auto-DeepLab and 7.4× less than DetNAS. The code is available at https://github.com/JaminFong/FNA.
```

Figures/Tables Captions:
```
Figure 1: The framework of our proposed FNA. Firstly, we select an artificially designed network as the seed network N s and expand N s to a super network N sup which is the representation of the search space. Then parameters of N s are remapped to N sup . We utilize the NAS method to start the architecture adaptation with the super network and obtain the target architecture Arch t . Before parameter adaptation, we remap the parameters of N s to Arch t . Finally, we adapt the parameters of Arch t to get the target network N t .
Figure 2: Our parameters are remapped on three levels. (a) shows the depth-level remapping. The parameters of existing corresponding layers are mapped from the original network. The parameters of new layers are mapped from the last layer in the original network. (b) shows the width-level remapping. For each channels-diminished dimension, the parameters are copied from the original existing ones. (c) shows the kernel-level remapping. The original parameters are mapped to the central part of the new larger kernel. The values of the other parameters are assigned with 0.
Figure 3: Parameter Remapping on the kernel-level with a dilation setting.
Table 1: Semantic segmentation results on Cityscapes. OS: output stride, the spatial resolution ratio of input image to backbone output. The result of DPC in the brackets is our implemented version under the same settings as FNA. The MAdds of the models are computed with the 1024 × 2048 input resolution.
Table 2: Comparisons of computational cost on the semantic segmentation tasks. ArchAdapt: Ar- chitecture Adaptation. ParamAdapt: Parameter Adaptation. GHs: GPU Hours. * indicates the computational cost calculated under our reproducing settings. † indicates the cost estimated accord- ing to the description in the original paper.
Table 3: Object detection results on MS-COCO. The MAdds are calculated with 1088 × 800 input.
Table 4: Comparison of computational cost on the object detection tasks. All our experiments on object detection are conducted on TITAN-Xp GPUs.
Table 5: Effectiveness evaluation of Parameter Remapping. The experiments are conducted with DeepLabv3 on Cityscapes. Remap: Parameter Remapping. ArchAdapt: Architecture Adaptation. RandInit: Random Initialization. Pretrain: ImageNet Pretrain. ParamAdapt: Parameter Adaptation.
Table 6: Results of random search experiments with the RetinaNet framework on MS-COCO. Diff- Search: Differentiable NAS. RandSearch: Random Search. The other definitions of abbreviations are the same as Tab. 5.
Table 7: Study the methods of Parameter Remapping.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Deep convolutional neural networks have achieved great successes in computer vision tasks such as image classification ( Krizhevsky et al., 2012 ;  He et al., 2016 ;  Howard et al., 2017 ), semantic segmentation (Long et al., 2015; Ronneberger et al., 2015;  Chen et al., 2017b ) and object detec- tion ( Ren et al., 2015 ;  Liu et al., 2016 ;  Lin et al., 2017 ) etc. Image classification has always served as a fundamental task for neural architecture design. It is common to use networks designed and pre-trained on the classification task as the backbone and fine-tune them for segmentation or detec- tion tasks. However, the backbone plays an important role in the performance on these tasks and the difference between these tasks calls for different design principles of the backbones. For example, segmentation tasks require high-resolution features and object detection tasks need to make both localization and classification predictions from each convolutional feature. Such distinctions make neural architectures designed for classification tasks fall short. Some attempts ( Li et al., 2018 ;  Wang et al., 2019 ) have been made to tackle this problem. Handcrafted neural architecture design is inefficient, requires a lot of human expertise, and may not find the best-performing networks. Recently, neural architecture search (NAS) methods ( Zoph et al., 2017 ;  Pham et al., 2018 ;  Liu et al., 2018 ) see a rise in popularity. Some works ( Liu et al., Published as a conference paper at ICLR 2020  As ImageNet ( Deng et al., 2009 ) pre-training has been a standard practice for many computer vi- sion tasks, there are lots of models trained on ImageNet available in the community. To take full advantages of these models, we propose a Fast Neural Network Adaptation (FNA) method based on a novel parameter remapping paradigm. Our method can adapt both the architecture and parameters of one network to a new task with negligible cost. Fig. shows the whole framework. The adapta- tion is performed on both the architecture- and parameter-level. We adopt the NAS methods ( Zoph et al., 2017 ;  Real et al., 2018 ;  Liu et al., 2019b ) to implement the architecture-level adaptation. We select a manually designed network (MobileNetV2 ( Sandler et al., 2018 ) in our experiments) as the seed network, which is pre-trained on ImageNet. Then, we expand the seed network to a super network which is the representation of the search space in FNA. New parameters in the super net- work are initialized by mapping those from the seed network using parameter remapping. Thanks to that, the neural architecture search can be performed efficiently on the detection and segmentation tasks. With FNA we obtain a new optimal target architecture for the new task. Similarly, we remap the parameters of the seed network to the target architecture for initialization and fine-tune it on the target task with no need of pre-training on a large-scale dataset. We demonstrate FNA's effectiveness and efficiency via experiments on both segmentation and de- tection tasks. We adapt the manually designed network MobileNetV2 ( Sandler et al., 2018 ) to seg- mentation framework DeepLabv3 ( Chen et al., 2017b ), detection framework RetinaNet ( Lin et al., 2017 ) and SSDLite ( Liu et al., 2016 ;  Sandler et al., 2018 ). Networks adapted by FNA surpass both manually designed and NAS searched networks in terms of both performance and model MAdds. Compared to NAS methods, FNA costs 1737× less than DPC ( Chen et al., 2018a ), 6.8× less than Auto-DeepLab ( Liu et al., 2019a ) and 7.4× less than DetNAS ( Chen et al., 2019b ).

Section Title: RELATED WORK
  RELATED WORK Neural Architecture Search With reinforcement learning (RL) and evolutionary algorithm (EA) being applied to NAS methods, many works ( Zoph & Le, 2016 ;  Zoph et al., 2017 ;  Real et al., 2018 ) Published as a conference paper at ICLR 2020 make great progress in promoting the performances of neural networks. Recently, NAS methods based on one-shot model ( Brock et al., 2017 ;  Bender et al., 2018 ) or differentiable representa- tions ( Liu et al., 2019b ;  Cai et al., 2019 ;  Fang et al., 2019b ) achieve remarkable results with low search cost. We use the differentiable NAS method to implement architecture adaptation, which adjusts the architecture of the backbone network automatically.

Section Title: Backbone Design
  Backbone Design As deep neural network designing (Simonyan & Zisserman, 2014;  Szegedy et al., 2016 ;  He et al., 2016 ) develops, the backbones of segmentation or detection networks evolve accordingly. Some works improve the backbone architectures by modifying existing networks. PeleeNet ( Wang et al., 2018 ) proposes a variant of DenseNet ( Huang et al., 2017 ) for more real- time object detection on mobile devices. DetNet ( Li et al., 2018 ) applies dilated convolution ( Yu & Koltun, 2016 ) in the backbone to enlarge the receptive field which helps to detect objects. BiSeNet ( Yu et al., 2018 ) and HRNet ( Wang et al., 2019 ) design multiple paths to learn both high- and low- resolution representations for better dense prediction. Parameter Remapping Net2Net ( Chen et al., 2015 ) proposes the function-preserving transfor- mations to remap the parameters of one network to a new deeper or wider network. This remapping mechanism accelerates the training of the new larger network and achieves great performances. Following this manner, EAS ( Cai et al., 2018 ) extends the parameter remapping concept to neural architecture search. Moreover, some NAS works ( Pham et al., 2018 ;  Fang et al., 2019a ;  Elsken et al., 2019 ) apply parameters sharing on child models to accelerate the search process. Our pa- rameter remapping paradigm extends the mapping dimension with the kernel level. Parameters can be also mapped to a shallower or narrower network with our scheme, while Net2Net focuses on mapping parameters to a deeper and wider network. The parameter remapping in our FNA largely decreases the computation cost of the network adaptation by taking full advantages of the ImageNet pre-trained parameters.

Section Title: METHOD
  METHOD As the most commonly used network for designing search spaces in NAS methods ( Tan et al., 2018 ;  Cai et al., 2019 ;  Fang et al., 2019b ), MobileNetV2 ( Sandler et al., 2018 ) is selected as the seed network to give the details of our method. To adapt the network to segmentation and detection tasks, we adjust the architecture elements on three levels, i.e., convolution kernel size, depth and width of the network. In this section, we first describe the parameter remapping paradigm. Then we explain the whole procedure of the network adaptation.

Section Title: PARAMETER REMAPPING
  PARAMETER REMAPPING We define parameter remapping as one paradigm which aims at mapping the parameters of one seed network to another one. We denote the seed network as N s and the new network as N n , whose parameters are denoted as W s and W n respectively. The remapping paradigm is illustrated in the following three aspects. The remapping on the depth-level is firstly carried out and then the remapping on the kernel- and width- level is conducted simultaneously. Moreover, we study different remapping strategies in the experiments (Sec. 4.5).

Section Title: Remapping on Depth-level
  Remapping on Depth-level We introduce more depth settings in our architecture adaptation pro- cess. In other word, we adjust the number of inverted residual blocks (MBConvs) ( Sandler et al., 2018 ) in every stage of the network. We assume that one stage in the seed network N s has l layers. The parameters of each layer can be denoted as {W (1) s , W (2) s , . . . , W (l) s }. Similarly, we assume that the corresponding stage with m layers in the new network N n has parameters {W (1) n , W (2) n , . . . , W (m) n }. The remapping process on the depth-level is shown in Fig. 2(a). The parameters of layers in N n which also exit in N s are just copied from N s . The parameters of new layers are all copied from the last layer in the stage of N s . It is formulated as Remapping on Width-level In the MBConv block of MobileNetV2 ( Sandler et al., 2018 ) net- work, the first point-wise convolution expands the low-dimensional features to a high dimension. This practice can be utilized for expanding the width and capacity of one neural network. We allow smaller expansion ratios for architecture adaptation. We denote the parameters of one convolution in N s as W s ∈ R p×q×h×w and that in N n as W n ∈ R r×s×h×w , where r ≤ p and s ≤ q. As shown in Fig. 2(b), on the width-level, we directly map the first r or s channels of parameters in N s to the narrower one in N n . It can be formulated as

Section Title: Remapping on Kernel-level
  Remapping on Kernel-level The kernel size is commonly set as 3×3 in most artificially-designed networks. To expand the receptive field and capture abundant features in segmentation or detection tasks, we introduce larger kernel size settings in the adaptation process. As Fig. 2(c) shows, to expand the 3 × 3 kernel to a larger one, we assign the parameters of the central × 3 region in the large kernel with the values of the original 3 × 3 kernel. The values of the other region surrounding the central part are assigned with 0. We denote the parameters of the original × 3 kernel as W 3×3 and the larger k × k kernel as W k×k . The remapping process on kernel-level can be formulated as follows, where h, w denote the indices of the spatial dimension. This design principle conforms to the function-preserving concept ( Chen et al., 2015 ), which accelerates and stabilizes the optimization of the new network.

Section Title: NEURAL NETWORK ADAPTATION
  NEURAL NETWORK ADAPTATION We divide our neural network adaptation into three steps. Fig. demonstrates the whole adaptation procedure. Firstly, we expand the seed network to a super network which is the representation of the search space in the latter architecture adaptation process. Secondly, we perform the differen- tiable NAS method to implement network adaptation on the architecture-level and obtain the target architecture Arch t . Finally, we adapt the parameters of the target architecture and obtain the tar- get network N t . The aforementioned parameter remapping mechanism is deployed before the two stages, i.e. architecture adaptation and parameter adaptation.

Section Title: Network Expansion
  Network Expansion We expand the seed network to a super network by introducing more options for architecture elements. For every MBConv layer, we allow for more kernel size settings {3, 5, 7} and more expansion ratios {3, 6}. As most differentiable NAS methods ( Liu et al., 2019b ;  Cai et al., 2019 ;  Wu et al., 2018 ) do, we relax every layer as a weighted sum of all candidate operations. where O denotes the operation set, α i o denotes the architecture parameter of operation o in the ith layer, and x denotes the input tensor. We set more layers in one stage of the super network and add the identity connection to the candidate operation set for depth search. After expanding the seed network to a super network, we remap the parameters of the seed network to the super network based on the paradigm illustrated in Sec. 3.1. This remapping strategy prevents the huge cost of ImageNet pre-training involved in the search space, i.e. the super network in differentiable NAS.

Section Title: Architecture Adaptation
  Architecture Adaptation We start the differentiable NAS process with the expanded super net- work directly on the target task, e.g., semantic segmentation or object detection. We first fine-tune operation weights of the super network for some epochs on the training dataset. After the weights are sufficiently trained, we start alternating the optimization of operation weights w with ∂L ∂w and architecture parameters α with ∂L ∂α . To accelerate the search process and decouple the parameters of different sub-networks, we only sample one path in each iteration according to the distribution of architecture parameters for operation weight updating. As the search process terminates, we use the architecture parameters α to derive the target architecture.

Section Title: Parameter Adaptation
  Parameter Adaptation We obtain the target architecture Arch t from architecture adaptation. To accommodate the new segmentation or detection tasks, the target architecture becomes different from that of the seed network N s (which is primitively designed for the image classification task). Unlike conventional training strategy, we discard the cumbersome pre-training process of Arch t on ImageNet. We remap the parameters of N s to Arch t utilizing the method described in Sec. 3.1. Finally, we directly fine-tune Arch t on the target task and obtain the final target network N t .

Section Title: EXPERIMENTS
  EXPERIMENTS We select the ImageNet pre-trained MobileNetV2 model as the seed network and apply our FNA method on both semantic segmentation and object detection tasks. In this section, we firstly give the implementation details of our experiments; then we report and analyze the network adaptation results; finally, we perform ablation studies to validate the effectiveness of the parameter remapping paradigm and compare different parameter remapping implementations.

Section Title: NETWORK ADAPTATION ON SEMANTIC SEGMENTATION
  NETWORK ADAPTATION ON SEMANTIC SEGMENTATION The semantic segmentation experiments are conducted on the Cityscapes ( Cordts et al., 2016 ) dataset. In the architecture adaptation process, we map the seed network to the super network, Published as a conference paper at ICLR 2020 which is used as the backbone of DeepLabv3 ( Chen et al., 2017b ). We randomly sample 20% im- ages from the training set as the validation set for architecture parameters updating. The original validation set is not used in the search process. To optimize the MAdds of the searched network, we define the loss function in search as L = L task + λ log τ (cost). The first term denotes the cross- entropy loss and the second term controls the MAdds of the network. We set λ as 9 × 10 −3 and τ as 45. The search process takes 80 epochs in total. The architecture optimization starts after 30 epochs. The whole search process is conducted on a single V100 GPU and takes only 1.4 hours in total. In the parameter adaptation process, we remap the parameters of original MobileNetV2 to the target architecture obtained in the aforementioned architecture adaptation. The whole parameter adaptation process is conducted on 4 TITAN-Xp GPUs and takes 100K iterations, which cost only 8.5 hours in total. Our semantic segmentation results are shown in  Tab. 1 . The FNA network achieves 76.6% mIOU on Cityscapes with the DeepLabv3 ( Chen et al., 2017b ) framework, 1.1% mIOU better than the man- ually designed seed Network MobileNetV2 ( Sandler et al., 2018 ) with fewer MAdds. Compared with a NAS method DPC ( Chen et al., 2018a ) (with MobileNetV2 as the backbone) which searches a multi-scale module for semantic segmentation tasks, FNA gets 0.9% mIOU promotion with 0.52B fewer MAdds. For fair comparison with Auto-DeepLab ( Liu et al., 2019a ) which searches the back- bone architecture on DeepLabv3 and retrains the searched network on DeepLabv3+ ( Chen et al., 2018b ), we adapt the parameters of the target architecture Arch t to DeepLabv3+ framework. Com- paring with Auto-DeepLab-S, FNA achieves far better mIOU with fewer MAdds, Params and train- ing iterations. With the remapping mechanism, FNA only takes 35.8 GPU hours, 1737× less than DPC and 6.8× less than Auto-DeepLab.

Section Title: NETWORK ADAPTATION ON OBJECT DETECTION
  NETWORK ADAPTATION ON OBJECT DETECTION We further implement our FNA method on object detection tasks. We adapt the MobileNetV2 seed network to two commonly used detection systems, RetinaNet ( Lin et al., 2017 ) and a lightweight one SSDLite ( Liu et al., 2016 ;  Sandler et al., 2018 ). The experiments are conducted on the MS-COCO dataset ( Lin et al., 2014b ). Our implementation is based on the MMDetection ( Chen et al., 2019a ) framework. In the search process of architecture adaptation, we randomly sample 50% data from the original trainval35k set as the validation set. We show the results on the COCO dataset in  Tab. 3 . In the RetinaNet framework, compared with two manually designed networks, ShuffleNetV2-10 ( Ma et al., 2018 ;  Chen et al., 2019b ) and Mo- bileNetV2 ( Sandler et al., 2018 ), FNA achieves higher mAP with similar MAdds. Compared with DetNAS ( Chen et al., 2019b ) which searches the backbone of detection network, FNA achieves 0.6% higher mAP with 1.64M fewer Params and 0.2B fewer MAdds. As shown in  Tab. 4 , our total computation cost is only 13.5% of DetNAS. Moreover, we implement our FNA method on the SS- DLite framework. In  Tab. 3 , FNA surpasses both the manually designed network MobileNetV2 and the NAS-searched network MnasNet-92, where MnasNet ( Tan et al., 2018 ) takes around 3.8K GPU Published as a conference paper at ICLR 2020 days to search for the backbone network on ImageNet. The specific cost FNA takes on SSDLite is shown in  Tab. 4 . It is difficult to train the small network due to the simplification ( Liu et al., 2019c ). Therefore, experiments on SSDLite need long training schedule and take larger computation cost. The experimental results further demonstrate the efficiency and effectiveness of direct adaptation on the target task with parameter remapping.

Section Title: EFFECTIVENESS OF PARAMETER REMAPPING
  EFFECTIVENESS OF PARAMETER REMAPPING To evaluate the effectiveness of the parameter remapping paradigm in our method, we attempt to op- tionally remove the parameter remapping process before the two stages, i.e. architecture adaptation and parameter adaptation. The experiments are conducted with the DeepLabv3 ( Chen et al., 2017b ) semantic segmentation framework on the Cityscapes dataset ( Cordts et al., 2016 ). In Row (2) we remove the parameter remapping process before architecture adaptation. In other word, the search is performed from scratch without using the pre-trained network. The mIOU in Row (2) drops by 0.6% compared to FNA in Row (1). Then we remove the parameter remapping before parameter adaptation in Row (3), i.e. training the target architecture from scratch on the target task. The mIOU decreases by 3.6% compared the result of FNA. When we remove the parameter remapping before both stages in Row (4), it gets the worst performance. In Row (5), we first pre- train the searched architecture on ImageNet and then fine-tune it on the target task. It is worth noting that FNA even achieves a higher mIOU by a narrow margin (0.1%) than the ImageNet pre-trained one in Row (5). We conjecture that this may benefit from the regularization effect of parameter remapping before the parameter adaptation stage. All the experiments are conducted using the same searching and training settings for fair compar- isons. With parameter remapping applied on both stages, the adaptation achieves the best results in  Tab. 5 . Especially, the remapping process before parameter adaptation tends to provide greater performance gains than the remapping before architecture adaptation. All the experimental results demonstrate the importance and effectiveness of the proposed parameter remapping scheme.

Section Title: RANDOM SEARCH EXPERIMENTS
  RANDOM SEARCH EXPERIMENTS We carry out the Random Search (RandSearch) experiments with the RetinaNet ( Lin et al., 2017 ) framework on the MS-COCO ( Lin et al., 2014a ) dataset. All the results are shown in the  Tab. 6 . We purely replace the original differentiable NAS (DiffSearch) method in FNA with the random search method in Row (3). The random search takes the same computation cost as the search in FNA for fair comparisons. We observe that FNA with RandSearch achieves comparable results with our original method. It further confirms that FNA is a general framework for network adaptation and has great generalization. NAS is only an implementation tool for architecture adaptation. The whole framework of FNA can be treated as a NAS-method agnostic mechanism. It is worth noting that even using random search, our FNA still outperforms DetNAS ( Chen et al., 2019b ) with 0.2% mAP better and 150M MAdds fewer. We further conduct similar ablation studies with experiments in Sec. 4.3 about the parameter remap- ping scheme in Row (4) - (6). All the experiments further support the effectiveness of the parameter remapping scheme.

Section Title: STUDY ON PARAMETER REMAPPING
  STUDY ON PARAMETER REMAPPING We explore more strategies for the Parameter Remapping paradigm. Similar to Sec. 4.3, all the experiments are conducted with the DeepLabv3 ( Chen et al., 2017b ) framework on the Cityscapes dataset ( Cordts et al., 2016 ). We make exploration from the following respects. For simplicity, we denote the weights of the seed network and the new network on the remapping dimension (out- put/input channel) as W s = (W (1) s . . . W (p) s ) and W n = (W (1) n . . . W (q) n ), where q ≤ p.

Section Title: Remapping with BN Statistics on Width-level
  Remapping with BN Statistics on Width-level We review the formulation of batch normaliza- tion ( Ioffe & Szegedy, 2015 ) as follows, y i ← γ x i − µ B σ 2 B + + β, (5) where x i = (x (1) i . . . x (p) i ) denotes the p-dimensional input tensor of the ith layer, γ ∈ R p denotes the learnable parameter which scales the normalized data on the channel dimension. We compute the absolute values of γ as |γ| = (|γ (1) | . . . |γ (p) |). When remapping the parameters on the width-level, we sort the values of |γ| and map the parameters with the sorted top-q indices. More specifically, we define a weights remapping function in Algo. 1, where the reference vector v is |γ|. Remapping with Weight Importance on Width-level We attempt to utilize a canonical form of convolution weights to measure the importance of parameters. Then we remap the seed network parameters with great importance to the new network. The remapping operation is conducted based on Algo. 1 as well. We experiment with two canonical forms of weights to compute the reference vector, the standard deviation of W s as (std(W (1) s ) . . . std(W (p) s )) and the L 1 norm of W s as (||W (1) s || 1 . . . ||W (p) s || 1 ).

Section Title: Remapping with Dilation on Kernel-level
  Remapping with Dilation on Kernel-level We experiment with another strategy of parameter remapping on the kernel-level. Different from the function-preserving method defined in Sec. 3.1, we remap the parameters with a dilation manner as shown in  Fig. 3 . The values in the convolution kernel without remapping are all assigned as 0. It is formulated as where W k×k and W 3×3 denote the weights of the new network and the seed network respectively, h, w denote the spatial indices.  Tab. 7  shows the experimental results. The network adaptation with the parameter remapping paradigm define in FNA achieves the best results. Furthermore, the remapping operation of FNA is easier to implement compared to the several aforementioned ones. However, we explore limited number of methods to implement the parameter remapping paradigm. How to conduct the remap- ping strategy more efficiently remains a significative future work.

Section Title: CONCLUSION
  CONCLUSION In this paper, we propose a fast neural network adaptation method (FNA) with a parameter remap- ping paradigm and the architecture search method. We adapt the manually designed network Mo- bileNetV2 to semantic segmentation and detection tasks on both architecture- and parameter- level. The parameter remapping strategy takes full advantages of the seed network parameters, which greatly accelerates both the architecture search and parameter fine-tuning process. With our FNA method, researchers and engineers could fast adapt more manually designed networks to various frameworks on different tasks. As there are lots of ImageNet pre-trained models available in the community, we could conduct adaptation with low cost and do more applications, e.g., face recogni- tion, pose estimation, depth estimation, etc. We leave more efficient remapping strategies and more applications for future work.

```
