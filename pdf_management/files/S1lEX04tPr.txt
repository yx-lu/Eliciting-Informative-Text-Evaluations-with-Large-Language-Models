Title:
```
Published as a conference paper at ICLR 2020 CM3: COOPERATIVE MULTI-GOAL MULTI-STAGE MULTI-AGENT REINFORCEMENT LEARNING
```
Abstract:
```
A variety of cooperative multi-agent control problems require agents to achieve individual goals while contributing to collective success. This multi-goal multi- agent setting poses difficulties for recent algorithms, which primarily target settings with a single global reward, due to two new challenges: efficient exploration for learning both individual goal attainment and cooperation for others' success, and credit-assignment for interactions between actions and goals of different agents. To address both challenges, we restructure the problem into a novel two-stage curricu- lum, in which single-agent goal attainment is learned prior to learning multi-agent cooperation, and we derive a new multi-goal multi-agent policy gradient with a credit function for localized credit assignment. We use a function augmentation scheme to bridge value and policy functions across the curriculum. The complete architecture, called CM3, learns significantly faster than direct adaptations of exist- ing algorithms on three challenging multi-goal multi-agent problems: cooperative navigation in difficult formations, negotiating multi-vehicle lane changes in the SUMO traffic simulator, and strategic cooperation in a Checkers environment.
```

Figures/Tables Captions:
```
Figure 1: In Stage 1, Q 1 and π 1 learn to achieve multiple goals in a single-agent environment. Between Stage 1 and 2, π is constructed from the trained π 1 and a new module π 2 according to ( same construction is done for Q n (s, a) and Q n (s, a m ), not shown). In the multi-agent environment of Stage 2, these augmented functions are instantiated for each of N agents (with parameter-sharing).
Figure 4: Agent sedans must perform double lane merge to reach goal lanes. SUMO controls yellow sedans and trucks. Policy generalization was tested on such traffic conditions.
Figure 5: a-e: Comparison against baselines in cooperative navigation (a-c), SUMO (d), Checkers (e). f-j: Comparison against ablations. Average and standard deviation (shaded) of 10 evaluation episodes conducted every 100 training episodes, across 3 independent runs.
```

Main Content:
```

Section Title: INTRODUCTION
  INTRODUCTION Many real-world scenarios that require cooperation among multiple autonomous agents are multi-goal multi-agent control problems: each agent needs to achieve its own individual goal, but the global optimum where all agents succeed is only attained when agents cooperate to allow the success of other agents. In autonomous driving, multiple vehicles must execute cooperative maneuvers when their individual goal locations and nominal trajectories are in conflict (e.g., double lane merges) ( Cao et al., 2013 ). In social dilemmas, mutual cooperation has higher global payoff but agents' individual goals may lead to defection out of fear or greed ( Van Lange et al., 2013 ). Even settings with a global objective that seem unfactorizable can be formulated as multi-goal problems: in Starcraft II micromanagement, a unit that gathers resources must not accidentally jeopardize a teammate's attempt to scout the opponent base ( Blizzard Entertainment, 2019 ); in traffic flow optimization, different intersection controllers may have local throughput goals but must cooperate for high global performance ( Zhang et al., 2019 ). While the framework of multi-agent reinforcement learning (MARL) ( Littman, 1994 ;  Stone and Veloso, 2000 ;  Shoham et al., 2003 ) has been equipped with methods in deep reinforcement learning (RL) ( Mnih et al., 2015 ;  Lillicrap et al., 2016 ) and shown promise on high-dimensional problems with complex agent interactions ( Lowe et al., 2017 ;  Mordatch and Abbeel, 2018 ;  Foerster et al., 2018 ;  Lin et al., 2018 ;  Srinivasan et al., 2018 ), learning multi-agent cooperation in the multi-goal scenario involves significant open challenges. First, given that exploration is crucial for RL ( Thrun, 1992 ) and even more so in MARL with larger state and joint action spaces, how should agents explore to learn both individual goal attainment and cooperation for others' success? Uniform random exploration is common in deep MARL ( Hernandez-Leal et al., 2018 ) but can be highly inefficient as the value of cooperative actions may be discoverable only in small regions of state space where cooperation is needed. Furthermore, the conceptual difference between attaining one's own goal and cooperating for others' success calls for Published as a conference paper at ICLR 2020 more modularized and targeted approaches. Second, while there are methods for multi-agent credit assignment when all agents share a single goal (i.e., a global reward) ( Chang et al., 2004 ;  Foerster et al., 2018 ;  Nguyen et al., 2018 ), and while one could treat the cooperative multi-goal scenario as a problem with a single joint goal, this coarse approach makes it extremely difficult to evaluate the impact of an agent's action on another agent's success. Instead, the multi-goal scenario can benefit from fine-grained credit assignment that leverages available structure in action-goal interactions, such as local interactions where only few agents affect another agent's goal attainment at any time. Given these open challenges, our paper focuses on the cooperative multi-goal multi-agent setting where each agent is assigned a goal 1 and must learn to cooperate with other agents with possibly different goals. To tackle the problems of efficient exploration and credit assignment in this complex problem setting, we develop CM3, a novel general framework involving three synergistic components: 1. We approach the difficulty of multi-agent exploration from a novel curriculum learning perspective, by first training an actor-critic pair to achieve different goals in an induced single-agent setting (Stage 1), then using them to initialize all agents in the multi-agent environment (Stage 2). The key insight is that agents who can already act toward individual objectives are better prepared for discovery of cooperative solutions with additional exploration once other agents are introduced. In contrast to hierarchical learning where sub-goals are selected sequentially in time ( Sutton et al., 1999 ), all agents act toward their goals simultaneously in Stage 2 of our curriculum. 2. Observing that a wide array of complex MARL problems permit a decomposition of agents' observations and state vectors into components of self, others, and non-agent specific environment information ( Hernandez-Leal et al., 2018 ), we employ function augmentation to bridge Stages 1-2: we reduce the number of trainable parameters of the actor-critic in Stage 1 by limiting their input space to the part that is sufficient for single-agent training, then augment the architecture in Stage 2 with additional inputs and trainable parameters for learning in the multi-agent environment. 3. We propose a credit function, which is an action-value function that specifically evaluates action- goal pairs, for localized credit assignment in multi-goal MARL. We use it to derive a multi-goal multi-agent policy gradient for Stage 2. In synergy with the curriculum, the credit function is constructed via function augmentation from the critic in Stage 1. We evaluate our method on challenging multi-goal multi-agent environments with high-dimensional state spaces: cooperative navigation with difficult formations, double lane merges in the SUMO simulator ( Lopez et al., 2018 ), and strategic teamwork in a Checkers game. CM3 solved all domains significantly faster than IAC and COMA ( Tan, 1993 ;  Foerster et al., 2018 ), and solved four out of five environments significantly faster than QMIX ( Rashid et al., 2018 ). Exhaustive ablation experiments show that the combination of all three components is crucial for CM3's overall high performance.

Section Title: RELATED WORK
  RELATED WORK While early theoretical work analyzed Markov games in discrete state and action spaces ( Tan, 1993 ;  Littman, 1994 ;  Hu and Wellman, 2003 ), recent literature have leveraged techniques from deep RL to develop general algorithms for high dimensional environments with complex agent interactions ( Tampuu et al., 2017 ;  Mordatch and Abbeel, 2018 ;  Lowe et al., 2017 ), which pose difficulty for traditional methods that do not generalize by learning interactions ( Bhattacharya et al., 2010 ). Cooperative multi-agent learning is important since many real-world problems can be formulated as distributed systems in which decentralized agents must coordinate to achieve shared objectives ( Panait and Luke, 2005 ). The multi-agent credit assignment problem arises when agents share a global reward ( Chang et al., 2004 ). While credit assignment be resolved when independent individual rewards are available ( Singh et al., 2019 ), this may not be suitable for the fully cooperative setting:  Austerweil et al. (2016)  showed that agents whose rewards depend on the success of other agents can cooperate better than agents who optimize for their own success. In the special case when all agents have a single goal and share a global reward, COMA ( Foerster et al., 2018 ) uses a counterfactual baseline, while  Nguyen et al. (2018)  employs count-based variance reduction limited to discrete-state 1 Goal discovery and assignment are challenges for MARL. However, many practical multi-agent problems have clear goal assignments, such as in autonomous driving and soccer. Our work is specific to known goal assignment and is complementary to methods such as ( Carion et al., 2019 ) for the unknown case. Published as a conference paper at ICLR 2020 environments. However, their centralized critic does not evaluate the specific impact of an agent's action on another's success in the general multi-goal setting. When a global objective is the sum of agents' individual objectives, value-decomposition methods optimize a centralized Q-function while preserving scalable decentralized execution ( Sunehag et al., 2018 ;  Rashid et al., 2018 ;  Son et al., 2019 ), but do not address credit assignment. While MADDPG ( Lowe et al., 2017 ) and M3DDPG ( Li et al., 2019 ) apply to agents with different rewards, they do not address multi-goal cooperation as they do not distinguish between cooperation and competition, despite the fundamental difference. Multi-goal MARL was considered in  Zhang et al. (2018) , who analyzed convergence in a special networked setting restricted to fully-decentralized training, while we conduct centralized training with decentralized execution ( Oliehoek et al., 2008 ). In contrast to multi-task MARL, which aims for generalization among non-simultaneous tasks ( Omidshafiei et al., 2017 ), and in contrast to hierarchical methods that sequentially select subtasks ( Vezhnevets et al., 2017 ;  Shu and Tian, 2019 ), our decentralized agents must cooperate concurrently to attain all goals. Methods for optimizing high-level agent-task assignment policies in a hierarchical framework ( Carion et al., 2019 ) are complementary to our work, as we focus on learning low-level cooperation after goals are assigned. Prior application of curriculum learning ( Bengio et al., 2009 ) to MARL include a single cooperative task defined by the number of agents ( Gupta et al., 2017 ) and the probability of agent appearance ( Sukhbaatar et al., 2016 ), without explicit individual goals.  Rusu et al. (2016)  instantiate new neural network columns for task transfer in single-agent RL. Techniques in transfer learning ( Pan and Yang, 2010 ) are complementary to our novel curriculum approach to MARL.

Section Title: PRELIMINARIES
  PRELIMINARIES In multi-goal MARL, each agent should achieve a goal drawn from a finite set, cooperate with other agents for collective success, and act independently with limited local observations. We formalize the problem as an episodic multi-goal Markov game, review an actor-critic approach to centralized training of decentralized policies, and summarize counterfactual-based multi-agent credit assignment.

Section Title: Multi-goal Markov games
  Multi-goal Markov games A multi-goal Markov game is a tuple S, {O n }, {A n }, P, R, G, N, γ with N agents labeled by n ∈ [N ]. In each episode, each agent n has one fixed goal g n ∈ G that is known only to itself. At time t and global state s t ∈ S, each agent n receives an observation o n t := o n (s t ) ∈ O n and chooses an action a n t ∈ A n . The environment moves to s t+1 due to joint action a t := {a 1 t , . . . , a N t }, according to transition probability P (s t+1 |s t , a t ). Each agent receives a reward R n t := R(s t , a t , g n ), and the learning task is to find stochastic decentralized policies π n : O n × G × A n → [0, 1], conditioned only on local observations and goals, to maximize J(π) := E π ∞ t=0 γ t N n=1 R(s t , a t , g n ) , where γ ∈ (0, 1) and joint policy π factorizes as π(a|s, g) := N n=1 π n (a n |o n , g n ) due to decentralization. Let a −n and g −n denote all agents' actions and goals, respectively, except that of agent n. Let boldface a and g denote the joint action and joint goals, respectively. For brevity, let π(a n ) := π n (a n |o n , g n ). This model covers a diverse set of cooperation problems in the literature ( Hernandez-Leal et al., 2018 ), without constraining how the attainability of a goal depends on other agents: at a traffic intersection, each vehicle can easily reach its target location if not for the presence of other vehicles; in contrast, agents in a strategic game may not be able to maximize their rewards in the absence of cooperators ( Sunehag et al., 2018 ).

Section Title: Centralized learning of decentralized policies
  Centralized learning of decentralized policies A centralized critic that receives full state-action in- formation can speed up training of decentralized actors that receive only local information ( Lowe et al., 2017 ;  Foerster et al., 2018 ). Directly extending the single-goal case, for each n ∈ [1..N ] in a multi- goal Markov game, critics are represented by the value function V π n (s) := E π ∞ t=0 γ t R n t s 0 = s and the action-value function Q π n (s, a) := E π ∞ t=0 γ t R n t s 0 = s, a 0 = a , which evaluate the joint policy π against the reward R n for each goal g n .

Section Title: Multi-agent credit assignment
  Multi-agent credit assignment   Foerster et al., 2018 , Lemma 1) , which evaluates the contribution of a chosen action a n versus the average of all possible counterfactualsâ n , keeping a −n fixed. The analysis in  Wu et al. (2018)  for a formally equivalent action-dependent baseline in RL suggests that COMA is a low-variance estimator for single-goal MARL. We derive its variance in Appendix C.1. However, COMA is unsuitable for credit assignment in multi-goal MARL, as it would treat the Published as a conference paper at ICLR 2020 collection of goals g as a global goal and only learn from total reward, making it extremely difficult to disentangle each agent's impact on other agents' goal attainment. Furthermore, a global Q-function does not explicitly capture structure in agents' interactions, such as local interactions involving a limited number of agents. We substantiate these arguments by experimental results in Section 6.

Section Title: METHODS
  METHODS We describe the complete CM3 learning framework as follows. First we define a credit function as a mechanism for credit assignment in multi-goal MARL, then derive a new cooperative multi-goal policy gradient with localized credit assignment. Next we motivate the possibility of significant training speedup via a curriculum for multi-goal MARL. We describe function augmentation as a mechanism for efficiently bridging policy and value functions across the curriculum stages, and finally synthesize all three components into a synergistic learning framework.

Section Title: CREDIT ASSIGNMENT IN MULTI-GOAL MARL
  CREDIT ASSIGNMENT IN MULTI-GOAL MARL If all agents take greedy goal-directed actions that are individually optimal in the absence of other agents, the joint action can be sub-optimal (e.g. straight-line trajectory towards target in traffic). Instead rewarding agents for both individual and collective success can avoid such bad local optima. A naïve approach based on previous works ( Foerster et al., 2018 ;  Lowe et al., 2017 ) would evaluate the joint action a via a global Q-function Q π n (s, a) for each agent's goal g n , but this does not precisely capture each agent's contribution to another agent's attainment of its goal. Instead, we propose an explicit mechanism for credit assignment by learning an additional function Q π n (s, a m ) that evaluates pairs of action a m and goal g n , for use in a multi-goal actor-critic algorithm. We define this function and show that it satisfies the classical relation needed for sample-based model-free learning. Definition 1. For n, m ∈ [N ], s ∈ S, the credit function for goal g n and a m ∈ A m by agent m is: Proposition 1. For all m, n ∈ [N ], the credit function (1) satisfies the following relations: Derivations are given in Appendix B.1, including the relation between Q π n (s, a m ) and Q π n (s, a). Equation (2) takes the form of the Bellman expectation equation, which justifies learning the credit function, parameterized by θ Qc , by optimizing the standard loss function in deep RL: While centralized training means the input space scales linearly with agent count, many practical environments involving only local interactions between agents allows centralized training with few agents while retaining decentralized performance when deployed at scale (evidenced in Appendix E).

Section Title: COOPERATIVE MULTI-GOAL MULTI-AGENT POLICY GRADIENT
  COOPERATIVE MULTI-GOAL MULTI-AGENT POLICY GRADIENT We use the credit function as a critic within a policy gradient for multi-goal MARL. Letting θ parameterize π, the overall objective J(π) is maximized by ascending the following gradient: Proposition 2. The cooperative multi-goal credit function based MARL policy gradient is Published as a conference paper at ICLR 2020 This is derived in Appendix B.2. For a fixed agent m, the inner summation over n considers all agents' goals g n and updates m's policy based on the advantage of a m over all counterfactual actionŝ a m , as measured by the credit function for g n . The strength of interaction between action-goal pairs is captured by the extent to which Q π n (s,â m ) varies withâ m , which directly impacts the magnitude of the gradient on agent m's policy. For example, strong interaction results in non-constant Q π n (s, ·), which implies larger magnitude of A π n,m and larger weight on ∇ θ log π(a m ). The double summation accounts for first-order interaction between all action-goal pairs, but complexity can be reduced by omitting terms when interactions are known to be sparse, and our empirical runtimes are on par with other methods due to efficient batch computation (Appendix F). As the second term in A π n,m is a baseline, the reduction of variance can be analyzed similarly to that for COMA, given in Appendix C.2. While A π n,m = Q π n (s, a) − V π n (s) (due to (3)), ablation results show stability improvement due to the credit function (Section 6). As the credit function takes in a single agent's action, it synergizes with both CM3's curriculum and function augmentation as described in Section 4.5. 4.

Section Title: CURRICULUM FOR MULTI-GOAL MARL
  CURRICULUM FOR MULTI-GOAL MARL Multi-goal MARL poses a significant challenge for exploration. Random exploration can be highly inefficient for concurrently learning both individual task completion and cooperative behavior. Agents who cannot make progress toward individual goals may rarely encounter the region of state space where cooperation is needed, rendering any exploration useless for learning cooperative behavior. On the other extreme, exploratory actions taken in situations that require precise coordination can easily lead to penalties that cause agents to avoid the coordination problem and fail to achieve individual goals. Instead, we hypothesize and confirm in experiments that agents who can achieve individual goals in the absence of other agents can more reliably produce state configurations where cooperative solutions are easily discovered with additional exploration in the multi-agent environment 2 . We propose a MARL curriculum that first solves a single-agent Markov decision process (MDP), as preparation for subsequent exploration speedup. Given a cooperative multi-goal Markov game MG, we induce an MDP M to be the tuple S n , O n , A n , P n , R, γ , where an agent n is selected to be the single agent in M. Entities S n , P n , and R are defined by removing all dependencies on agent interactions, so that only components depending on agent n remain. This reduction to M is possible in almost all fully cooperative multi-agent environments used in a large body of work 3 ( Hernandez-Leal et al., 2018 ), precisely because they support a variable number of agents, including N = 1. Important real-world settings that allow this reduction include autonomous driving, multi traffic light control, and warehouse commissioning (removing all but one car/controller/robot, respectively, from the environment). Given a full Markov game implementation, the reduction involves only deletion of components associated with all other agents from state vectors (since an agent is uniquely defined by its attributes), deletion of if-else conditions from the reward function corresponding to agent interactions, and likewise from the transition function if a simulation is used. Appendix G provides practical guidelines for the reduction. Based on M, we define a greedy policy for MG. Definition 2. A greedy policy π n by agent n for cooperative multi-goal MG is defined as the optimal policy π * for the induced MDP M where only agent n is present. This naturally leads to our proposed curriculum: Stage 1 trains a single agent in M to achieve a greedy policy, which is then used for initialization in MG in Stage 2. Next we explain in detail how to leverage the structure of decentralized MARL to bridge the two curriculum stages.

Section Title: FUNCTION AUGMENTATION FOR MULTI-GOAL CURRICULUM
  FUNCTION AUGMENTATION FOR MULTI-GOAL CURRICULUM In Markov games with decentralized execution, an agent's observation space decomposes into O n = O n self ∪O n others , where o n self ∈ O n self captures the agent's own properties, which must be observable by the agent for closed-loop control, while o n others ∈ O n others is the agent's egocentric observation of other agents. In our work, egocentric observations are private and not accessible by other agents ( Pynadath and Tambe, 2002 ). Similarly, global state s decomposes into s := (s env , s n , s −n ), where Published as a conference paper at ICLR 2020 s env is environment information not specific to any agent (e.g., position of a landmark), and s n captures agent n's information. While this decomposition is implicitly available in a wide range of complex multi-agent environments ( Bansal et al., 2018 ;  Foerster et al., 2018 ;  Lowe et al., 2017 ;  Rashid et al., 2018 ;  Liu et al., 2019 ;  Jaderberg et al., 2019 ), we explicitly use it to implement our curriculum. In Stage 1, as the ability to process o n others and s −n is unnecessary, we reduce the input space of policy and value functions, thereby reducing the number of trainable parameters and lowering the computation cost. In Stage 2, we restore Stage 1 parameters and activate new modules to process additional inputs o n others and s −n . This augmentation is especially suitable for efficiently learning the credit function (1) and global Q-function, since Q(s, a) can be augmented into both Q π n (s, a) and Q π n (s, a m ), as explained below.

Section Title: A COMPLETE INSTANTIATION OF CM3
  A COMPLETE INSTANTIATION OF CM3 We combine the preceding components to create CM3, using deep neural networks for function approximation ( Figure 1  and Algorithm 1). Without loss of generality, we assume parameter-sharing ( Foerster et al., 2018 ) among homogeneous agents with goals as input ( Schaul et al., 2015 ). The inhomogeneous case can be addressed by N actor-critics. Drawing from multi-task learning ( Taylor and Stone, 2009 ), we sample goal(s) in each episode for the agent(s), to train one model for all goals. Stage 1. We train an actor π 1 (a|o, g) and critic Q 1 (s 1 , a, g) to convergence according to (4) and (5) in the induced MDP with N = 1 and random goal sampling (see Appendix J). This uses orders of magnitude fewer samples than for the full multi-agent environment-compare Figure 6 with  Figure 5 . Being restored from Stage 1, not re-initialized, hidden layers i < i * begin with the ability to process (o n self , g n ), while the new weights in π 2 and W 1:2 specifically learn the effect of surrounding agents. Higher layers i ≥ i * that already take greedy actions to achieve goals in Stage 1 must now do so while cooperating to allow other agents' success. This augmentation scheme is simplest for deep policy and value networks using fully-connected or convolutional layers. The middle panel of  Figure 1  depicts the construction of π from π 1 and π 2 . The global Q π (s, a, g n ) is constructed from Q 1 similarly: when the input to Q 1 is (s env , s n , a n , g n ), a new module takes input (s −n , a −n ) and connects to a chosen hidden layer of Q 1 . Credit function Q π (s, a m , g n ) is Published as a conference paper at ICLR 2020 augmented from a copy of Q 1 , such that when Q 1 inputs are (s env , s n , a m , g n ), the new module's inputs are (s m , s −n ). 5 We train the policy using (5), train the credit function with loss (4), and train the global Q-function with the joint-action analogue of (4).

Section Title: EXPERIMENTAL SETUP
  EXPERIMENTAL SETUP We investigated the performance and robustness of CM3 versus existing methods on diverse and challenging multi-goal MARL environments: cooperative navigation in difficult formations, double lane merge in autonomous driving, and strategic cooperation in a Checkers game. We evaluated ablations of CM3 on all domains. We describe key setup here, with full details in Appendices G to J 6 .

Section Title: Cooperative navigation
  Cooperative navigation We created three variants of the cooperative navigation scenario in  Lowe et al. (2017) , where N agents cooperate to reach a set of targets. We increased the difficulty by giving each agent only an individual reward based on distance to its designated target, not a global team reward, but initial and target positions require complex cooperative maneuvers to avoid collision penalties (Figure 3). Agents observe relative positions and velocities (details in Appendix G.1). SUMO: Previous work modeled autonomous driving tasks as MDPs in which all other vehicles do not learn to respond to a single learning agent ( Isele et al., 2018 ;  Kuefler et al., 2017 ). However, real-world driving requires cooperation among different drivers' with personal goals. Built in the SUMO traffic simulator with sublane resolution ( Lopez et al., 2018 ), this experiment requires agent vehicles to learn double-merge maneuvers to reach goal lane assignments ( Figure 4 ). Agents have limited field of view and receive sparse rewards (Appendix G.2). Checkers: We implemented a challenging strategic game (Appendix G.3, an extension of  Sunehag et al. (2018) ), to investigate whether CM3 is beneficial even when an agent cannot maximize its reward in the absence of another agent. In a gridworld with red and yellow squares that disappear when collected (Figure 2), Agent A receives +1 for red and -0.5 for yellow; Agent B receives -0.5 for red and +1 for yellow. Both have a limited 5x5 field of view. The global optimum requires each agent to clear the path for the other.

Section Title: Algorithm implementations
  Algorithm implementations We describe key points here, leaving complete architecture details and hyperparameter tables to Appendices H and I. CM3: Stage 1 is defined for each environment as follows (Appendix G): in cooperative navigation, a single particle learns to reach any specified landmark; in SUMO, a car learns to reach any specified goal lane; in Checkers, we alternate between training one agent as A and B. Appendix H describes function augmentation in Stage 2 of CM3. COMA ( Foerster et al., 2018 ): the joint goal g and total reward n R n can be used to train COMA's global Q function, which receives input (s, o n , g n , n, a −n , g −n ). Each output node i represents Q(s, a n = i, a −n , g). IAC ( Tan, 1993 ;  Foerster et al., 2018 ): IAC trains each agent's actor and critic independently, using the agent's own observation. The TD error of value function V (o n , g n ) is used in a standard policy gradient ( Sutton et al., 2000 ). QMIX ( Rashid et al., 2018 ): we used the original hypernetwork, giving all goals to the mixer and individual goals to each agent network. We used a manual coordinate descent on exploration and learning rate hyperparameters, including values reported in the original works. We ensured the number of trainable parameters are similar among all methods, up to method-specific architecture requirements for COMA and QMIX.

Section Title: Ablations
  Ablations We conducted ablation experiments in all domains. To discover the speedup from the curriculum with function augmentation, we trained the full Stage 2 architecture of CM3 (labeled as Direct) without first training components π 1 and Q 1 in an induced MDP. To investigate the benefit of the new credit function and multi-goal policy gradient, we trained an ablation (labeled QV) with advantage function A π n (s, a) := Q π n (s, a) − V π n (s), where credit assignment between action-goal pairs is lost. QV uses the same π 1 , Q 1 , and function augmentation as CM3.

Section Title: RESULTS AND DISCUSSIONS
  RESULTS AND DISCUSSIONS CM3 finds optimal or near-optimal policies significantly faster than IAC and COMA on all domains, and performs significantly higher than QMIX in four out of five. We report absolute runtime in Appendix F and account for CM3's Stage 1 episodes (Appendix J) when comparing sample efficiency.

Section Title: Main comparison
  Main comparison Over all cooperative navigation scenarios (Figures 5a to 5c), CM3 (with 1k episodes in Stage 1) converged more than 15k episodes faster than IAC. IAC reached the same final performance as CM3 because dense individual rewards simplifies the learning problem for IAC's fully decentralized approach, but CM3 benefited significantly from curriculum learning, as evidenced by comparison to "Direct" in Figure 5f. QMIX and COMA settled at suboptimal behavior. Both learn global critics that use all goals as input, in contrast to CM3 and IAC that process each goal separately. This indicates the difficulty of training agents for individual goals under a purely global approach. While COMA was shown to outperform IAC in SC2 micromanagement where IAC must learn from a single team reward ( Foerster et al., 2018 ), our IAC agents have access to individual rewards that resolve the credit assignment issue and improve performance ( Singh et al., 2019 ). In SUMO (Figure 5d), CM3 and QMIX found cooperative solutions with performances within the margin of error, while COMA and IAC could not break out of local optima where vehicles move straight but do not perform merge maneuvers. Since initial states force agents into the region of state space requiring cooperation, credit assignment rather than exploration is the dominant challenge, which CM3 addressed via the credit function, as evidenced in Figure 5i. IAC underperformed because SUMO requires a longer sequence of cooperative actions and gave much sparser rewards than the "Merge" scenario in cooperative navigation. We also show that centralized training of merely two decentralized agents allows them to generalize to settings with much heavier traffic (Appendix E). In Checkers (Figure 5e), CM3 (with 5k episodes in Stage 1) converged 10k episodes faster than COMA and QMIX to the global optimum with score 24. Both exploration of the combinatorially large joint trajectory space and credit assignment for path clearing are challenges that CM3 successfully addressed. COMA only solved Checkers among all domains, possibly because the small bounded environment alleviates COMA's difficulty with individual goals in large state spaces. IAC underperformed all centralized learning methods because cooperative actions that give no instantaneous reward are hard for selfish agents to discover in Checkers. These results demonstrate CM3's ability to attain individual goals and find cooperative solutions in diverse multi-agent systems.

Section Title: Ablations
  Ablations The significantly better performance of CM3 versus "Direct" (Figures 5f to 5j) shows that learning individual goal attainment prior to learning multi-agent cooperation, and initializing Stage 2 with Stage 1 parameters, are crucial for improving learning speed and stability. It gives evidence that while global action-value and credit functions may be difficult to train from scratch, function augmentation significantly eases the learning problem. While "QV" initially learns quickly to attain individual goals, it does so at the cost of frequent collisions, higher variance, and inability to maintain a cooperative solution, giving clear evidence for the necessity of the credit function.

Section Title: CONCLUSION
  CONCLUSION We presented CM3, a general framework for cooperative multi-goal MARL. CM3 addresses the need for efficient exploration to learn both individual goal attainment and cooperation, via a two-stage curriculum bridged by function augmentation. It achieves local credit assignment between action and goals using a credit function in a multi-goal policy gradient. In diverse experimental domains, CM3 attains significantly higher performance, faster learning, and overall robustness than existing MARL methods, displaying strengths of both independent learning and centralized credit assignment while avoiding shortcomings of existing methods. Ablations demonstrate each component is crucial to the whole framework. Our results motivate future work on analyzing CM3's theoretical properties and generalizing to inhomogeneous systems or settings without known goal assignments.

```
